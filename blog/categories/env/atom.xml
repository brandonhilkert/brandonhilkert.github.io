<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: env | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/env/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2017-04-01T13:20:24-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Rails 4.1 Secrets for Configuration]]></title>
    <link href="http://brandonhilkert.com/blog/using-rails-4-dot-1-secrets-for-configuration/"/>
    <updated>2014-06-10T20:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/using-rails-4-dot-1-secrets-for-configuration</id>
    <content type="html"><![CDATA[<p>I previously wrote about how I handle <a href="/blog/flexible-rails-environment-configuration/">environment configuration in Rails</a>. Along with solutions like the <a href="https://github.com/bkeepers/dotenv">dotenv gem</a>, it relies on entirely on environment variables.</p>

<p>One of the highlighted features of Rails 4.1 was the <a href="http://guides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml"><code>config/secrets.yml</code></a> file. By default, this file contains the <code>secret_key_base</code> and defers to the ENV variable of the same name in the production environment. Even though <code>secret_key_base</code> isn’t typically referenced explicitly in an application, I was curious if I could use the <code>config/secrets.yml</code> file in place of previously documented configuration solution.</p>

<!--more-->


<p>After a little digging, it turns out that it works perfectly. A valid question is whether the variables are better referenced through the <code>Rails.application</code> hash, but that’s probably more a preference and use-case dependent decision. Either way, we’ll explore the solution below.</p>

<h2>The Question</h2>

<p>Below is a default <code>config/secrets.yml</code> file generated from a Rails 4.1 app. As you can see, both the development and test environments rely on statically set values, where the production environment relies on environment variables being set on the system. The latter is perfect for platforms like <a href="https://www.heroku.com">Heroku</a>, and just as easy if you manage your own systems on EC2 or similar infrastructure.</p>

<p>```
development:
  secret_key_base: 9ac2d0ad8ebcc312090e99d745006d3cf8</p>

<p>test:
  secret_key_base: a1580ad61ccb6ac60f9f256948cf63d6e20</p>

<h1>Do not keep production secrets in the repository,</h1>

<h1>instead read values from the environment.</h1>

<p>production:
  secret_key_base: &lt;%= ENV[&ldquo;SECRET_KEY_BASE&rdquo;] %>
```</p>

<p>Notice how ERB is processed in the file. This gives us the opportunity to use Ruby to generate random strings, dates, or anything else that can be expressed through code.</p>

<p>So can we use it for other configuration values in the application?</p>

<h2>The Solution</h2>

<p>In order to figure out where the output of the parsed secrets file was stored, I pulled the latest Rails changes and went code diving.</p>

<p>The first thing I did was search “secrets”. The first group of results were mostly comments related to the processing of <code>secret_key_base</code> and where it could be found. After combing through a few more results, I came across the <code>Rails::Application</code> class.</p>

<p>A static array at the top of the file seemed to hold some values for the application as shown below:</p>

<p>```
INITIAL_VARIABLES = [:config, :railties, :routes_reloader, :reloaders,</p>

<pre><code>                    :routes, :helpers, :app_env_config, :secrets] # :nodoc:
</code></pre>

<p>```</p>

<p>Looks like we’re on the right track. Going further down the file leads us to the getter:</p>

<p>```
def secrets #:nodoc:
  @secrets ||= begin</p>

<pre><code>secrets = ActiveSupport::OrderedOptions.new
yaml = config.paths["config/secrets"].first

if File.exist?(yaml)
  require "erb"
  all_secrets = YAML.load(ERB.new(IO.read(yaml)).result) || {}
  env_secrets = all_secrets[Rails.env]
  secrets.merge!(env_secrets.symbolize_keys) if env_secrets
end

# Fallback to config.secret_key_base if secrets.secret_key_base isn't set
secrets.secret_key_base ||= config.secret_key_base

secrets
</code></pre>

<p>  end
end
```</p>

<p>As you can see, the file path <code>config/secrets</code> is referenced as the <code>yaml</code> source:</p>

<p><code>
yaml = config.paths["config/secrets"].first
</code></p>

<p>and the result of reading the file is sent through ERB and YAML:</p>

<p><code>
all_secrets = YAML.load(ERB.new(IO.read(yaml)).result) || {}
</code></p>

<p>The environment group is parsed:</p>

<p><code>
env_secrets = all_secrets[Rails.env]
</code></p>

<p>The result of the output is returned, leaving us with a hash of options based on the environment group. With a little luck we should be able to query the application from the console and get the configuration values.</p>

<p><code>
irb(main):001:0&gt; Rails.application.secrets.class
=&gt; ActiveSupport::OrderedOptions
irb(main):002:0&gt; Rails.application.secrets
=&gt; {:secret_key_base=&gt;"9ac2d0ad8ebcc312090e99d745006d3cf8"}
irb(main):003:0&gt; Rails.application.secrets.secret_key_base
=&gt; "a1580ad61ccb6ac60f9f256948cf63d6e20"
</code></p>

<p>That’s great news because it means we can put other values in this file and reference them throughout our application using the parent hash <code>Rails.application.secrets</code>.</p>

<p>For example, let’s assume we need to configuration Pusher URL again. We could add it to the <code>secrets.yml</code> file like so:</p>

<p>```
development:
  secret_key_base: 9ac2d0ad8ebcc312090e99d745006d3cf8
  pusher_url: <a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a></p>

<p>test:
  secret_key_base: a1580ad61ccb6ac60f9f256948cf63d6e20</p>

<h1>Do not keep production secrets in the repository,</h1>

<h1>instead read values from the environment.</h1>

<p>production:
  secret_key_base: &lt;%= ENV[&ldquo;SECRET_KEY_BASE&rdquo;] %>
  pusher_url: &lt;%= ENV[&ldquo;PUSHER_URL&rdquo;] %>
```</p>

<p>Now within our application we can set the Pusher URL within the initializer using the secret value:</p>

<p>```</p>

<h1>config/initializers/pusher.rb</h1>

<p>Pusher.url = Rails.application.secrets.pusher_url
```</p>

<h2>Summary</h2>

<p>I feel like my previous solution has the potential to be replaced with the secrets file. I plan to try it out in an upcoming application and see if it’s as easy to manage as it seems.</p>

<p>Note that by default, the <code>secrets.yml</code> file is NOT ignored by git. If you plan to include passwords or other sensitive data in the file, be sure to add it to your <code>.gitignore</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flexible Rails Environment Configuration]]></title>
    <link href="http://brandonhilkert.com/blog/flexible-rails-environment-configuration/"/>
    <updated>2013-12-19T18:44:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/flexible-rails-environment-configuration</id>
    <content type="html"><![CDATA[<p>It&rsquo;s hard to write a Rails app without interfacing with an external service or
API. In most cases, these services require a secret token or password. Since
checking passwords in to source control is generally a bad practice, we need a
good way to safely and reliably access these values in code.</p>

<p>I&rsquo;ve tried a few gems that attempt to make this process easier and ultimately
settled on a simpler solution &ndash; the combination of a few lines of code and
<a href="http://en.wikipedia.org/wiki/Environment_variable">ENV variables</a>, which are
accessible whether you manage your own infrastructure or use a
<a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PaaS</a> service like
<a href="https://www.heroku.com">Heroku</a>.</p>

<!--more-->


<h2>The Problem</h2>

<p>In a recent Rails app, I used <a href="http://pusher.com/">Pusher</a> and it requires the
unique URL to be setup in an initializer:</p>

<p>```</p>

<h1>config/initializers/pusher.rb</h1>

<p>Pusher.url = &ldquo;<a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a>&rdquo;
```</p>

<p>If I need to set this URL in multiple place &ndash; copying/pasting is not a great
solution because it sets me up for copy/paste errors. It&rsquo;s also a headache to
find all occurrences of the URL when it changes.</p>

<h2>The Solution</h2>

<p>Setup a <a href="http://en.wikipedia.org/wiki/YAML">yaml</a> file similar to this:</p>

<p>```</p>

<h1>config/application.yml</h1>

<p>defaults: &amp;defaults
  PUSHER_URL: <a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a></p>

<p>development:
  &lt;&lt;: *defaults</p>

<p>test:
  &lt;&lt;: *defaults
```</p>

<p>Add the following to <code>config/application.rb</code> before the Rails application class
is defined:</p>

<p>```
if File.exists?(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>))
  config = YAML.load(File.read(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>)))
  config.merge! config.fetch(Rails.env, {})
  config.each do |key, value|</p>

<pre><code>ENV[key] ||= value.to_s unless value.kind_of? Hash
</code></pre>

<p>  end
end
```</p>

<p>Resulting in a <code>config/application.rb</code> that looks something like this:</p>

<p>```</p>

<h1>config/application.rb</h1>

<p>require File.expand_path(&lsquo;../boot&rsquo;, <strong>FILE</strong>)</p>

<p>require &lsquo;rails/all&rsquo;</p>

<h1>Require the gems listed in Gemfile, including any gems</h1>

<h1>you&rsquo;ve limited to :test, :development, or :production.</h1>

<p>Bundler.require(:default, Rails.env)</p>

<p>if File.exists?(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>))
  config = YAML.load(File.read(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>)))
  config.merge! config.fetch(Rails.env, {})
  config.each do |key, value|</p>

<pre><code>ENV[key] ||= value.to_s unless value.kind_of? Hash
</code></pre>

<p>  end
end</p>

<p>module NewApp
  class Application &lt; Rails::Application</p>

<pre><code># ...
</code></pre>

<p>  end
end
```</p>

<p>The added code first looks for an <code>application.yml</code> file. If it finds one, it
reads in the values for that environment (development, test, production, etc.)
and merges them in to the existing Ruby ENV hash.</p>

<p><em>Note: Since <code>application.yml</code> will typically hold passwords and other secret
keys, it should be added to <code>.gitignore</code> so they don&rsquo;t end up in source
control.</em></p>

<p>Now, when the application is initialized, <code>PUSHER_URL</code> is
available in the ENV hash. This allows me to the update the pusher initializer to:</p>

<p>```</p>

<h1>config/initializers/pusher.rb</h1>

<p>Pusher.url = ENV[&ldquo;PUSHER_URL&rdquo;]
```</p>

<p>If I&rsquo;m deploying to Heroku, I need to set the config value using the following
command:</p>

<p><code>heroku config:set PUSHER_URL=http://asdfa@api.pusherapp.com</code></p>

<p>Or if I&rsquo;m deploying to Ubuntu, I can set the ENV variable for all users on the system:</p>

<p>```</p>

<h1>/etc/environment</h1>

<p>&hellip;
PUSHER_URL=<a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a>
```</p>

<p><em>Note: If you choose not to set ENV variables on the host system, you can
easily mimic the development environment and drop the <code>config/application.yml</code>
file on to the system. This is no different than using a <code>database.yml</code> that
most Rails developers are used to.</em></p>

<p>That&rsquo;s it! So with 7 lines of code and a configuration file, you have yourself
an environment configuration setup that&rsquo;s flexible for most deployment
solutions.</p>
]]></content>
  </entry>
  
</feed>
