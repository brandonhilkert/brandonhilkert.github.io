<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-01-07T08:47:37-05:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flexible Rails Environment Configuration]]></title>
    <link href="http://brandonhilkert.com/blog/flexible-rails-environment-configuration/"/>
    <updated>2013-12-19T18:44:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/flexible-rails-environment-configuration</id>
    <content type="html"><![CDATA[<p>It&rsquo;s hard to write a Rails app without interfacing with an external service or
API. In most cases, these services require a secret token or password. Since
checking passwords in to source control is generally a bad practice, we need a
good way to safely and reliably access these values in code.</p>

<p>I&rsquo;ve tried a few gems that attempt to make this process easier and ultimately
settled on a simpler solution &ndash; the combination of a few lines of code and
<a href="http://en.wikipedia.org/wiki/Environment_variable">ENV variables</a>, which are
accessible whether you manage your own infrastructure or use a
<a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PaaS</a> service like
<a href="http://www.heroku.com">Heroku</a>.</p>

<!--more-->


<h2>The Problem</h2>

<p>In a recent Rails app, I used <a href="http://pusher.com/">Pusher</a> and it requires the
unique URL to be setup in an initializer:</p>

<p>```</p>

<h1>config/initializers/pusher.rb</h1>

<p>Pusher.url = &ldquo;<a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a>&rdquo;
```</p>

<p>If I need to set this URL in multiple place &ndash; copying/pasting is not a great
solution because it sets me up for copy/paste errors. It&rsquo;s also a headache to
find all occurrences of the URL when it changes.</p>

<h2>The Solution</h2>

<p>Setup a <a href="http://en.wikipedia.org/wiki/YAML">yaml</a> file similar to this:</p>

<p>```</p>

<h1>config/application.yml</h1>

<p>defaults: &amp;defaults
  PUSHER_URL: <a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a></p>

<p>development:
  &lt;&lt;: *defaults</p>

<p>test:
  &lt;&lt;: *defaults
```</p>

<p>Add the following to <code>config/application.rb</code> before the Rails application class
is defined:</p>

<p>```
if File.exists?(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>))
  config = YAML.load(File.read(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>)))
  config.merge! config.fetch(Rails.env, {})
  config.each do |key, value|</p>

<pre><code>ENV[key] ||= value.to_s unless value.kind_of? Hash
</code></pre>

<p>  end
end
```</p>

<p>Resulting in a <code>config/application.rb</code> that looks something like this:</p>

<p>```</p>

<h1>config/application.rb</h1>

<p>require File.expand_path(&lsquo;../boot&rsquo;, <strong>FILE</strong>)</p>

<p>require &lsquo;rails/all&rsquo;</p>

<h1>Require the gems listed in Gemfile, including any gems</h1>

<h1>you&rsquo;ve limited to :test, :development, or :production.</h1>

<p>Bundler.require(:default, Rails.env)</p>

<p>if File.exists?(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>))
  config = YAML.load(File.read(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>)))
  config.merge! config.fetch(Rails.env, {})
  config.each do |key, value|</p>

<pre><code>ENV[key] ||= value.to_s unless value.kind_of? Hash
</code></pre>

<p>  end
end</p>

<p>module NewApp
  class Application &lt; Rails::Application</p>

<pre><code># ...
</code></pre>

<p>  end
end
```</p>

<p>The added code first looks for an <code>application.yml</code> file. If it finds one, it
reads in the values for that environment (development, test, production, etc.)
and merges them in to the existing Ruby ENV hash.</p>

<p><em>Note: Since <code>application.yml</code> will typically hold passwords and other secret
keys, it should be added to <code>.gitignore</code> so they don&rsquo;t end up in source
control.</em></p>

<p>Now, when the application is initialized, <code>PUSHER_URL</code> is
available in the ENV hash. This allows me to the update the pusher initializer to:</p>

<p>```</p>

<h1>config/initializers/pusher.rb</h1>

<p>Pusher.url = ENV[&ldquo;PUSHER_URL&rdquo;]
```</p>

<p>If I&rsquo;m deploying to Heroku, I need to set the config value using the following
command:</p>

<p><code>heroku config:set PUSHER_URL=http://asdfa@api.pusherapp.com</code></p>

<p>Or if I&rsquo;m deploying to Ubuntu, I can set the ENV variable for all users on the system:</p>

<p>```</p>

<h1>/etc/environment</h1>

<p>&hellip;
export PUSHER_URL=<a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a>
```</p>

<p><em>Note: If you choose not to set ENV variables on the host system, you can
easily mimic the development environment and drop the <code>config/application.yml</code>
file on to the system. This is no different than using a <code>database.yml</code> that
most Rails developers are used to.</em></p>

<p>That&rsquo;s it! So with 7 lines of code and a configuration file, you have yourself
an environment configuration setup that&rsquo;s flexible for most deployment
solutions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a Cloudfront CDN for Rails]]></title>
    <link href="http://brandonhilkert.com/blog/setting-up-a-cloudfront-cdn-for-rails/"/>
    <updated>2013-11-12T21:18:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/setting-up-a-cloudfront-cdn-for-rails</id>
    <content type="html"><![CDATA[<p><em>Update: I&rsquo;ve since added a post on <a href="/blog/serving-fonts-for-firefox-with-fastly/">serving fonts for Firefox with Fastly</a>.</em></p>

<p>Implementing a <a href="http://en.wikipedia.org/wiki/Content_delivery_network">CDN</a> to
serve compiled assets in Rails is one of the most significant performance
enhancements I&rsquo;ve seen. Having done so for 2 fairly large applications, it&rsquo;s
hard for me to imagine serving assets locally anymore.</p>

<h2>The Asset Pipeline</h2>

<p>The addition of the Rails <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset
pipeline</a> has reduced both
the number of assets served and the size of these files. Users on slow
connections have been the biggest beneficiary of these changes.</p>

<h2>The Problem</h2>

<p>Even with the asset pipeline, content is transmitted to the end user
over their, sometimes slow, connection. Distance plays a role in the speed at which
data can be delivered. Because of this, users further away from your servers get a
sluggish experience. This decreases both the users' patience and your ability to effectively
engage them.</p>

<!--more-->


<h2>The Solution</h2>

<p>CDNs are networks of servers that host your content so that when
you make a request, the request is served from a server closest
to you. This can often reduce transmission time by several
seconds (&hellip;think users in Asia requesting content that&rsquo;s
served from Virginia &ndash; this is the case if you deploy to Heroku).</p>

<p>The use of a CDN also reduces the number of requests to your
application servers. Most Ruby applications use
<a href="http://wiki.nginx.org/Main">Nginx</a> or <a href="http://httpd.apache.org/">Apache</a> in
front of the Ruby processes. These HTTP servers are really good at serving
static content, but no one will deny &ndash; the fewer requests, the better.</p>

<h2>Option 1: <em>Push</em> your assets to the CDN during deployment</h2>

<p>Depending on your method of deployment, pushing assets to a CDN isn&rsquo;t always
trivial. The <a href="https://github.com/rumblelabs/asset_sync">asset_sync</a> gem has
made this relatively straight forward if you choose to host your assets from
<a href="http://aws.amazon.com/s3/">Amazon S3</a>. Out of the 2 options, this is the most
efficient because all requests for assets will be diverted away from your
application, leaving its precious processing power to serve more important
application requests.</p>

<h2>Option 2: Assets are <em>pulled</em> to the CDN on first request</h2>

<p>This option won&rsquo;t change deployment and is simple to
setup. The only downside is that upon first request to an asset, the CDN will
pull it from your web server and cache it (it&rsquo;s hardly a downside if you&rsquo;re
currently serving <em>all</em> your assets from your web server). All subsequent
requests to that asset will be served straight from the CDN. The simplicity of
this option generally makes it my preferred option.</p>

<p>So let&rsquo;s get to it&hellip;</p>

<h2>Amazon Cloudfront</h2>

<p>Log in to your Amazon EC2 account and click &ldquo;Cloudfront&rdquo;:</p>

<p><img class="center" src="/images/cdn/cloudfront.png" title="&ldquo;Click Cloudfront in the AWS web console&rdquo;" ></p>

<p>Click &ldquo;Create Distribution&rdquo;:</p>

<p><img class="center" src="/images/cdn/create.png" title="&ldquo;Create a Cloudfront distribution endpoint&rdquo;" ></p>

<p>Enter the domain where your assets currently live (ignore Origin ID &ndash; it&rsquo;ll be filled in for you):</p>

<p><img class="center" src="/images/cdn/settings.png" title="&ldquo;Settings for a typical CDN&rdquo;" ></p>

<p>Make note of the Cloudfront distribution URL</p>

<p><img class="center" src="/images/cdn/domain.png" title="&ldquo;Cloudfront distribution URL&rdquo;" ></p>

<h2>Rails</h2>

<p>Rails provides and easy way to change the host URL of the assets (images,
stylesheets, javascripts, fonts&hellip;). Enter the Cloudfront
distribution URL from above as the Rails <code>asset_host</code>.</p>

<p><code>ruby config/environments/production.rb
config.action_controller.asset_host = "d24xjtg100euk4.cloudfront.net"
</code></p>

<p>At this point, the domain of all Rails asset helpers <code>image_tag</code>, <code>stylesheet_link_tag</code>, and <code>javascript_include_tag</code>
will be prefaced with the asset host URL that you configured above.</p>

<p>For example:</p>

<p>``` ruby
image_tag(&ldquo;shark_teeth.png&rdquo;)</p>

<h1><a href="http://d24xjtg100euk4.cloudfront.net/assets/images/shark_teeth.png">http://d24xjtg100euk4.cloudfront.net/assets/images/shark_teeth.png</a></h1>

<p>```</p>

<p><em>Note: if you only change <code>config/environments/production.rb</code>, you won&rsquo;t see
any changes in your <code>development</code> environment.</em></p>

<p>And that&rsquo;s it!</p>

<h2>In Summary</h2>

<p>This is the ultimate low-hanging fruit optimization. If you haven&rsquo;t served your
assets from a CDN before, I&rsquo;d suggest giving it a try. The <a href="http://aws.amazon.com/cloudfront/pricing/">cost of
Cloudfront</a> is minimal, and in my
mind, worth 10x that.</p>

<p>I&rsquo;ve recently been trying out a service called
<a href="http://www.fastly.com/">Fastly</a>, which is an alternative to Cloudfront. It&rsquo;s
slightly more expensive, but seems to have better and more consistent
performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patterns in a Rails Gemfile]]></title>
    <link href="http://brandonhilkert.com/blog/patterns-in-a-rails-gemfile/"/>
    <updated>2013-11-06T21:04:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/patterns-in-a-rails-gemfile</id>
    <content type="html"><![CDATA[<h2>Rails Rumble</h2>

<p>The <a href="http://railsrumble.com/">2013 Rails Rumble</a> concluded last week and like
in previous years, <a href="http://www.dwellable.com/">Dwellable</a> analyzed the <a href="http://www.dwellable.com/blog/Rails-Rumble-Gem-Teardown">Gemfiles of the submitted
projects</a>.</p>

<p>While it&rsquo;s not an indication of the only gems used in the Ruby community, it&rsquo;s
a pretty good summary of the most common needs in a typical Rails app.</p>

<ul>
<li><p>The majority of the projects used Rails defaults of
<a href="http://coffeescript.org/">Coffeescript</a>, <a href="http://sass-lang.com/">Sass</a>,
<a href="http://jquery.com/">jQuery</a>, and
<a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/erb/rdoc/ERB.html">ERB</a></p></li>
<li><p>Only 37% of the projects used <a href="http://getbootstrap.com/">Bootstrap</a>. I
thought this number would be higher. It feels like every MVP out there starts
with bootstrap.</p></li>
</ul>


<!--more-->


<ul>
<li><p>Only 33% used HAML. I thought this number would be higher as well. I&rsquo;m not a
huge fan of HAML, but it seems like it&rsquo;s the default templating language for
most Rails developers I&rsquo;ve worked with.</p></li>
<li><p>Around 1/3 of the projects turned off
<a href="https://github.com/rails/turbolinks/">Turbolinks</a>. I&rsquo;ve spent a little bit
of time using Turbolinks and while I&rsquo;m not opposed to it, there are a handful
of common practices that I was used to that didn&rsquo;t work with Turbolinks. I
suspect this was the case for many teams and just chose to turn it off out of
frustration or interest in making progress elsewhere. I&rsquo;ve definitely done
this in the past when I just wanted to get something out the door.</p></li>
<li><p>Usage of <a href="http://www.mysql.com/">MySQL</a> and
<a href="http://www.postgresql.org/">Postgres</a> was even. This, to me, is great
news. The more Postgres is used in the community, the more available it will
be hosting services (<a href="http://www.heroku.com">Heroku</a> has done a great job
promoting the usage of Postgres).</p></li>
<li><p>Javascript front-end frameworks were barely used. 7% is a pretty small
number. Part of me believes this number would&rsquo;ve been larger if the teams had
more time to devote to development, but with many people believing JS is the
future of the web, I&rsquo;m still surprised more projects weren&rsquo;t largely
JS-based. With the 1.0 release of <a href="http://emberjs.com/">Ember.js</a> behind us, perhaps
next year will support a continuing movement towards these types of frameworks.</p></li>
<li><p><a href="http://sidekiq.org/">Sidekiq</a> was the overwhelming favorite for background
jobs! I love Sidekiq (full disclaimer: I&rsquo;m a contributor), but I thought
usage of <a href="https://github.com/resque/resque">Resque</a> would be closer to that
of Sidekiq.</p></li>
</ul>


<h2>My Gemfiles</h2>

<p>Most developers have a handful of gems that they rely on during development.
This got me thinking about the gems that I most commonly used in my own projects.</p>

<p>I tend to write a lot of small apps, so I create new Rails projects all the
time. The first hour is always spent setting up the project with the gems I&rsquo;m
most familiar with. I know there are some tools that could make this process
easier (<a href="http://edgeguides.rubyonrails.org/rails_application_templates.html">Rails
templates</a>
and <a href="https://github.com/drnic/appscrolls">AppScrolls</a> ), but I haven&rsquo;t spent
the time to implement them in to my workflow.</p>

<p>Below is the Gemfile of an app I recently started:</p>

<p>``` ruby Gemfile
source &lsquo;<a href="https://rubygems.org">https://rubygems.org</a>&rsquo;</p>

<p>ruby &lsquo;2.0.0&rsquo;
gem &lsquo;rails&rsquo;, &lsquo;4.0.1&rsquo;</p>

<p>group :production do
  gem &lsquo;pg&rsquo;
  gem &lsquo;rails_12factor&rsquo;
end</p>

<p>group :test do
  gem &lsquo;factory_girl_rails&rsquo;
  gem &lsquo;capybara&rsquo;
  gem &lsquo;selenium-webdriver&rsquo;
  gem &lsquo;database_cleaner&rsquo;
  gem &lsquo;shoulda-matchers&rsquo;
end</p>

<p>group :development do
  gem &lsquo;quiet_assets&rsquo;
  gem &lsquo;rails_best_practices&rsquo;
  gem &lsquo;rack-mini-profiler&rsquo;
  gem &lsquo;bullet&rsquo;
  gem &lsquo;better_errors&rsquo;
end</p>

<p>group :development, :test do
  gem &lsquo;rspec-rails&rsquo;
  gem &lsquo;pry&rsquo;
  gem &lsquo;sqlite3&rsquo;
end</p>

<p>gem &lsquo;sass-rails&rsquo;, &lsquo;~> 4.0.0&rsquo;
gem &lsquo;uglifier&rsquo;, &lsquo;>= 1.3.0&rsquo;
gem &lsquo;coffee-rails&rsquo;, &lsquo;~> 4.0.0&rsquo;
gem &lsquo;jquery-rails&rsquo;
gem &lsquo;turbolinks&rsquo;
gem &lsquo;anjlab-bootstrap-rails&rsquo;, :require => &lsquo;bootstrap-rails&rsquo;,</p>

<pre><code>                          :github =&gt; 'anjlab/bootstrap-rails'
</code></pre>

<p>gem &lsquo;font-awesome-rails&rsquo;
gem &lsquo;unicorn&rsquo;</p>

<p>gem &lsquo;sidekiq&rsquo;, require: &ldquo;sidekiq/web&rdquo;
gem &lsquo;sinatra&rsquo;
gem &lsquo;yajl-ruby&rsquo;, require: &lsquo;yajl/json_gem&rsquo;
gem &lsquo;newrelic_rpm&rsquo;
```</p>

<p>A few comments:</p>

<ul>
<li><p>Most of my apps end up on Heroku, at least to start, so, for ease, I tend to
developing locally using <a href="http://www.sqlite.org/">SQLite</a>, while using
Postgres on Heroku. As far as deployments go, I haven&rsquo;t seen any easier than Rails on Heroku.</p></li>
<li><p>My testing stack is what I would consider to be the standard
<a href="https://github.com/rspec/rspec">Rspec</a> setup with integration specs using
Capybara. I never got on the Cucumber bandwagon. I&rsquo;ve experimented with using
<a href="http://docs.seattlerb.org/minitest/">Minitest</a>, but I always end up back
with Rspec for one reason or another. Mostly, for no other reason than I&rsquo;m more comfortable with Rspec and can things done faster as a result.</p></li>
<li><p>I&rsquo;ve found <a href="https://github.com/flyerhzm/bullet">bullet</a> and
<a href="https://github.com/MiniProfiler/rack-mini-profiler">rack-mini-profiler</a> to
be essential for optimizing SQL and notifying me of the poor decisions I&rsquo;ve
made with regards to database calls. There&rsquo;s really no downside to trying
either of these. Give them a shot if you haven&rsquo;t!</p></li>
<li><p>I&rsquo;m still baffled that the logs from assets are so noisy.
<a href="https://github.com/evrone/quiet_assets">quiet_assets</a> removes this noise
allowing you to focus on the logs that matter.</p></li>
<li><p>I typically add <a href="http://fontawesome.io/">Font Awesome</a> and bootstrap to
start. The above includes 2 gems that merge these assets in to the Rails
<a href="http://guides.rubyonrails.org/asset_pipeline.html">asset pipeline</a>
seamlessly.</p></li>
<li><p>I love the <a href="http://pryrepl.org/">Pry</a> gem. I probably use less than 10% of
its designed functionality. But, to me, it&rsquo;s king of debugging both live
requests and tests. I used to use the debugger gem, but got frustrated with
its dependencies when using different versions of Ruby. The pry gem has never
been a problem in that regard.</p></li>
</ul>


<p>When I encounter code I&rsquo;m not familiar with, the Gemfile is often one of the
first places I explore to feel out what&rsquo;s going on. It&rsquo;s almost like a personal signature. There are so many gems, and so little time&hellip;I
feel like I&rsquo;m just scratching the surface for awesome functionality.</p>

<p>Leave a comment let me know what your favorite gems are!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build something]]></title>
    <link href="http://brandonhilkert.com/blog/build-something/"/>
    <updated>2013-10-29T20:10:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-something</id>
    <content type="html"><![CDATA[<p><em>A variation of this post originally appeared on the <a href="http://railsmasterclass.com/">Rails Masterclass</a>
newsletter.</em></p>

<p>Learning new technologies can be a challenge. With books, forums, videos, blog
posts&hellip;where do you start?!?! I&rsquo;ve used all these resources in the past and
only one thing has reliably led to me to really learn the concepts &ndash; building something REAL!</p>

<h2>How I learned Ruby and Rails</h2>

<p>Several years ago, I was learning both <a href="https://www.ruby-lang.org/en/">Ruby</a>
and <a href="http://rubyonrails.org/">Rails</a> and trying to figure out which books were
worth the time. I ended up starting with <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Web Development with
Rails</a>,
which was a fantastic introduction to the features and benefits you&rsquo;ll get from
learning the Rails framework. However, like many other books, it guides you
through building a website with little real world value &ndash; an e-commerce
shopping cart (you&rsquo;ve heard this one before, right???).  The concepts in the
book generally apply to other products built with Rails, but it was sometimes
hard for me to see their value elsewhere.  I found that the books and articles often skipped over things that were fairly
trivial for a more experienced developer, but essential to get a real world application out the door.</p>

<!--more-->


<h2>The best way to learn (with a catch)</h2>

<p>I propose you build something&hellip;anything really. But it would be more useful if
the thing you build is useful to either you, someone else, or even
better&hellip;everyone! But there&rsquo;s a catch&hellip;whatever you build, you must not only
put it out there for the world to see, but you must share it in whatever way
you feel comfortable.</p>

<h2>My Craigslist Scraper</h2>

<p>A few years ago, I was in the market for a new job. I built a small Craigslist
scraper that searched for &ldquo;my perfect job&rdquo; and had it notify me via email
whenever it found a similar post.</p>

<p>The process of creating this little scraper did two things for me. First, it
allowed me to learn (I wrote it in Perl and at the time knew very little about
the language&hellip;). And second, it saved the 15 minutes or so it would take me
each day to sift through the new job postings. It really was a win-win!</p>

<h2>Start to Finish</h2>

<p>It&rsquo;s easy to copy and paste code snippets from a blog post or book. It&rsquo;s much
harder to see these applications through to the point where they&rsquo;re useful. Who
cares if no one uses it? The value you get from seeing your application code
all the way to the point of production is exponentially greater than the value
of having run &ldquo;rails server&rdquo; on your local development machine.</p>

<p>Questions such as &ldquo;How will I log and be notified of errors?&rdquo; and &ldquo;How will I
backup my production data store?&rdquo; take time and thought to answer.</p>

<p>There are so many easy to use
<a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PAAS</a> platforms
now-a-days, even if you&rsquo;re not the devops guru that you aspire to be, you too
can have production code running with minimal effort for FREE!
<a href="https://www.heroku.com">Heroku</a> is a great example of a place that you can
host your Rails applications without hassle or cost. If you have an application
running locally that you&rsquo;d like to share, hosting it at Heroku is a no-brainer.</p>

<p>If you have more aspirational goals of managing servers and understanding what
makes a Rails application tick, servers at <a href="https://www.digitalocean.com/">Digital
Ocean</a>, <a href="https://www.linode.com/">Linode</a>, and
<a href="http://www.rackspace.com/">Rackspace</a> can be extremely cost effective.</p>

<h2>Dogfooding</h2>

<p>Building an application that can save you time in your daily routine (ie. task
tracker, appt. reminder, etc.) is a great first step to learning more. It&rsquo;s
also very possible that if the application helps you, it could help other
people. I&rsquo;ll leave the marketing talk for another time, but stepping back and
being an actual user of your application will cause you to look at it in a very
different light. It&rsquo;s likely that you&rsquo;ll find ways to drastically improve your
application within the first 10 minutes of usage.</p>

<h2>Sharing (this is my favorite part)</h2>

<p>You&rsquo;ve now spent several weeks/months building something interesting &ndash; tell the
world about it. Tweet about it, post it to your local user group mailing list,
email your friends, anything&hellip;the more people that see it, the better. Like
dogfooding, you&rsquo;ll get valuable feedback that you might not have gotten
otherwise.</p>

<p>I can hear all the perfectionists now&hellip;&ldquo;I don&rsquo;t want to share it until it&rsquo;s
perfect&rdquo;. Having worked on a number of large applications, the candid truth is
that it will <strong>NEVER</strong> be perfect. The feedback you&rsquo;ll get sooner is more
valuable than the time you&rsquo;ll waste by attempting perfection. Besides, I have a
feeling that most the features you thought you <em>had</em> to have before you
launched are unimportant to the people that actually want to use your
application.</p>

<p>There&rsquo;s a more subtle point to sharing your new application&hellip;subconsciously
you&rsquo;re likely not going to share something that you think is crappy. If your
goal is to ultimately share what you&rsquo;ve built, you&rsquo;ll put the work in to make
it worthy of sharing, and in the process, learn about the finer details of
releasing a web application in to the wild, not just a basic shopping cart that
has minimal real-world value.</p>

<h2>Where to go from here?</h2>

<p>Knowing what you want to build is easier said than done. I keep a list of ideas
that I ultimately want to build someday. Some have very little use outside my
own world and others probably have potential to be used by other people, but
either way, bringing these ideas to life with new technologies or concepts
really helps me to solidify their real-world value.</p>

<p>If you don&rsquo;t have ideas, a quick Google search for &ldquo;startup ideas&rdquo; will provide
you with some very interesting results. However, I&rsquo;d think about the things
you&rsquo;re doing everyday and ask yourself if any of them can be solved, or aided,
with software. If the answer is &ldquo;yes&rdquo; to any of them, you have yourself a great
candidate.</p>

<p>I&rsquo;d love to hear about what you&rsquo;re building and the challenges you&rsquo;re facing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Technology Hump]]></title>
    <link href="http://brandonhilkert.com/blog/the-technology-hump/"/>
    <updated>2013-09-23T20:16:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/the-technology-hump</id>
    <content type="html"><![CDATA[<p>For the past few years, I&rsquo;ve spent most of my waking moments either reading about or writing code. For me, it&rsquo;s about the constant pursuit of learning and getting better at my craft. In hindsight, I can say that that mentality has helped me have a leg up on the competition (for reasons I will detail in future posts).</p>

<h2>Rewind 4 years</h2>

<p>Four years ago I was writing PHP on the side for startups and just getting into software products as both a profession and hobby (more on this too&hellip;). I had reached a level of comfort with PHP where I knew I could solve just about any business problem thrown at me. This feeling was not only comforting, but empowering. Shortly after, I helped create <a href="/about">Meeteor</a>, which was written in <a href="http://rubyonrails.org/">Rails</a> and my world took turn for the better.</p>

<!--more-->


<p>Not only was I thrown into a ring of unknown, but I was handed an application that was written by contractors overseas. I won&rsquo;t go in to my feelings about outsourcing here now, but suffice it to say, this experience was less than pleasant.</p>

<p>I spent the next 2-3 weeks learning both <a href="http://www.ruby-lang.org/">Ruby</a> and Rails and largely banging my head against the wall. For me, one of the most frustrating feelings is knowing how to do something in another language/framework, but can&rsquo;t in the one your currently working with. I felt like I was moving backwards, but stuck with it because it felt like the Rails knowledge would be a big pay off going forward.</p>

<p>The next 2 years that followed were largely a blur in what seemed like crash course in creating a product and a business. I&rsquo;m grateful for this experience and believe it has better positioned me for the things I want to accomplish going forward.</p>

<h2>Where I am today</h2>

<p>Today, I&rsquo;m back at that position I was 4 years ago with PHP, but now with Ruby. I&rsquo;m confident I can solve just about anything thrown at me with the tools that I&rsquo;m now most familiar with. Rather than entrench myself with Ruby and Rails books, I&rsquo;m finding articles about retention, conversion, and idea validation more interesting.</p>

<p>I&rsquo;m by no means suggesting that I&rsquo;ve solved every problem on the internet and development is a breeze. In fact, it&rsquo;s quite the opposite. But I now feel more confident in my ability to creativity solve a problem rather than find the answer hidden behind a random <a href="http://stackoverflow.com/">Stack Overflow</a> post. Don&rsquo;t get me wrong, I still encounter challenges I&rsquo;ve never seen before, but that&rsquo;s what not only brought me to development in the first place, but one of the reasons I continue to love what I do.</p>

<p>The technology world changes at a rapid pace. There&rsquo;s a certain amount of dedication involved in staying current on your craft if you want to continue being relevant. But I no longer feel the pressure to spend every waking moment with my head in a Ruby book. Seeing other languages and frameworks emerge (here&rsquo;s looking at you <a href="http://emberjs.com/">Ember.js</a>) is exciting, but takes me back to my experience 4 years ago and the pains involved at the beginning of a learning curve.</p>

<p>I&rsquo;m excited about what&rsquo;s to come now that the technology isn&rsquo;t the most challenging element on my plate.</p>

<p>Have you had similar experiences with a change in focus after becoming more technically capable?</p>
]]></content>
  </entry>
  
</feed>
