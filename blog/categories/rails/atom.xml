<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-02-18T07:28:43-05:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Update]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-book-update/"/>
    <updated>2014-02-15T08:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-book-update</id>
    <content type="html"><![CDATA[<p><strong>This past weekend I added ~ 6,000 words</strong> to the existing content. I&rsquo;m really excited to be nearing the end of the road. I&rsquo;ve gotten some great feedback since I started and wanted to gather a bit more to finalize the chapter list.</p>

<p>Here&rsquo;s the chapter list I&rsquo;m working with&nbsp;so far:</p>

<!--more-->


<ol>
<li>Introduction What is a gem? Why build a gem?)</li>
<li>File structure of a gem</li>
<li>Testing/debugging setup</li>
<li>Code implementation of of example gem</li>
<li>Versioning</li>
<li>Release (how to release? and when to release?)</li>
<li>Changelog (What is it? and what to include?)</li>
<li>Responsibility of a gem author</li>
<li>Loading additional libraries within a gem</li>
<li>Command-line utilities</li>
<li>Configuration patterns</li>
<li>Rails hooks</li>
<li>Rails view helpers</li>
<li>Rails controller includes</li>
<li>Rails Model Includes</li>
<li>Rails rake tasks</li>
<li>Rails engines (when/why to use?)</li>
<li>Open source management</li>
<li>Summary</li>
</ol>


<p>Phew! That&rsquo;s a lot&hellip;so with that in mind, <strong>have I covered everything?</strong></p>

<p>Please <strong>leave a comment</strong> if you&rsquo;re interested in reading about something I haven&rsquo;t mentioned.</p>

<p>One of the things I&rsquo;m most excited about is being able to use real-word examples for each chapter. I learn by reading and writing my own code and really appreciate when a book/post does the same. I&rsquo;ve tried to do that at every step of the way. Hopefully this will make the book more valuable to you.</p>

<p>I will be in touch in the <strong>next few weeks with a sample chapter</strong> or two, along with some feature blog posts.</p>

<p>If you&rsquo;re interested in receiving updates about the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary"><em>Build a Ruby Gem</em>
book</a>,
enter your email below:</p>

<p><div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: rails" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>

</p>

<p>Members of this list will also receive a <strong>20% discount coupon</strong> when the book
launches!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Page Specific Javascript in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/page-specific-javascript-in-rails/"/>
    <updated>2014-02-04T20:51:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/page-specific-javascript-in-rails</id>
    <content type="html"><![CDATA[<p>The asset pipeline has made including javascript in Rails applications a breeze. Without any additional changes, the code included in your app is executed on every page. However, with a combination of CSS class scopes and a jQuery plugin, you can isolate certain javascript code to only run on specific pages.</p>

<h2>The Problem</h2>

<p>Imagine you have 2 pages in your application (landing and contact) and need an alert box to show up on the contact page only. How would you do it?</p>

<!--more-->


<p>Traditionally, if it&rsquo;s something small, you might bite the bullet and just include it in the view template:</p>

<pre><code>&lt;% # app/views/page/contact.html.erb %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;

&lt;%= javascript_tag do %&gt;
  alert("My example alert box.");
&lt;% end %&gt;
</code></pre>

<p>To me, this always felt dirty. Mixing UI and javascript concerns in an HTML template is easy to forget. Imagine your app has matured and want to change the message of the alert box. Rather than find an associated javascript file (the logical path), you&rsquo;re forced to dig through HTML to find the alert box text.</p>

<p>Another solution is to insert our javascript in to its own file:</p>

<pre><code>// app/assets/javascripts/alert.js

alert("My example alert box.");
</code></pre>

<p>And including this file only in the view we want it to execute:</p>

<pre><code>&lt;%# app/views/page/contact.html.erb %&gt;

&lt;%= javascript_include_tag "alert" %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;
</code></pre>

<p>And don&rsquo;t forget to include your new file in the list of files to be compiled:</p>

<pre><code># config/environments/production.rb

config.assets.precompile += %w( alert.js )
</code></pre>

<p>Like the previous solution, it too, mixes the concerns of HTML and javascript, but introduces a new problem &ndash; this javascript file is included and download separately from the rest of the app&rsquo;s asset. This causes the browser to make another request to the server, thus increasing the page load time and in turn, causing bad bad user pain (Ok, maybe not that bad…). But it’s still not ideal.</p>

<h2>The Solution</h2>

<p>The solution I&rsquo;ve found the most elegant requires adding CSS classes to the layout&rsquo;s body tag and using the <a href="https://github.com/Verba/jquery-readyselector">jquery-readyselector plugin</a>.</p>

<p>First, in order to scope the pages through CSS selectors, let&rsquo;s add some classes to our layout:</p>

<pre><code>&lt;%# app/views/layouts/application.html.erb %&gt;

&lt;body class="&lt;%= controller_name %&gt; &lt;%= action_name %&gt;"&gt;
  &lt;%= yield %&gt;
&lt;/body&gt;
</code></pre>

<p>Assuming your <code>contact</code> page action was inside a controller named <code>PagesController</code>, the rendered result would be the following:</p>

<pre><code>&lt;body class="pages contact"&gt;
  ...
&lt;/body&gt;
</code></pre>

<p>Add <a href="https://raw.github.com/Verba/jquery-readyselector/master/jquery.readyselector.js">this small bit of javavascript code</a> to a new file: <code>vendor/assets/javascripts/jquery-readyselector.js</code>.</p>

<p>Include the new plugin in the <code>application.js</code> manifest file:</p>

<pre><code>...
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require jquery-readyselector
//= require_tree .
</code></pre>

<p>Like before, let&rsquo;s put the javascript code in an isolated asset file, but scope it to the page:</p>

<pre><code>// app/assets/javascripts/alert.js.coffee

$(".pages.contact").ready -&gt;
  alert "My example alert box."
</code></pre>

<p>Because this file is picked up with the <code>//= require_tree .</code> line in the <code>application.js</code> manifest, there’s no additional step to load the asset. And that&rsquo;s it! Your <em>fancy</em> alert box will now only run on your contact page.</p>

<p>Let me what you think of this solution and if you’ve come across this issue before. I&rsquo;d love to hear about other solutions!</p>

<p><em>Note: In order for this solution to work with Turbolinks in Rails 4, I had to drag in the <a href="https://github.com/kossnocorp/jquery.turbolinks">jquery.turbolinks plugin</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relative Timestamps in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/relative-timestamps-in-rails/"/>
    <updated>2014-01-13T07:01:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/relative-timestamps-in-rails</id>
    <content type="html"><![CDATA[<p>Facebook’s news feed popularized the relative timestamp format of &ldquo;X hours ago&rdquo;. For good reason too&hellip;why print an absolute timestamp so that people have to do the relative calculation in their head? It’s one less step for the user, and to be fair, pretty easy to implement.</p>

<h2>Rails helpers to the rescue</h2>

<p>Rails has a view helper aptly named <code>time_ago_in_words</code>. If you use the
<code>created_at</code> attribute from a record, you could easily reference a relative timestamp from a corresponding view:</p>

<pre><code># app/views/posts/show.html.erb

Posted: &lt;%= time_ago_in_words(post.created_at) %&gt; ago
</code></pre>

<p>That’s great! But not enough…what happens when a user stays on the page for 10 min. and the latest post was no longer posted &ldquo;1 minute ago”? Asking them to refresh the page every 10 minutes is no longer an acceptable answer.</p>

<!--more-->


<p>Additionally, Rails 4 encourages the use of <a href="http://edgeguides.rubyonrails.org/caching_with_rails.html">Russian doll caching</a>, so if you cached record and use <code>time_ago_in_words</code>, the relative time of the post would never change. No bueno!</p>

<p>Fortunately, we can do better…</p>

<h2>The Solution</h2>

<p><a href="http://timeago.yarp.com/">Timeago.js</a> is a <a href="http://jquery.com/">jQuery</a> plugin that converts timestamps to a relative format. They also boast the following on their website:</p>

<ul>
<li><p>Avoid timestamps dated &ldquo;1 minute ago&rdquo; even though the page was opened 10 minutes ago; timeago refreshes automatically</p></li>
<li><p>You can take full advantage of page caching in your web applications, because the timestamps aren&rsquo;t calculated on the server</p></li>
<li><p>You get to use microformats like the cool kids</p></li>
</ul>


<h2>The Implementation</h2>

<ol>
<li><p>Download the plugin and place it in <code>vendor/javascripts/timeago.jquery.js</code></p></li>
<li><p>Add the following line to your <code>application.js</code> manifest file, so it&rsquo;s picked up by the <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset pipeline</a>:</p>

<pre><code> //= require jquery.timeago
</code></pre></li>
<li><p>Create a helper that you can use from your views that will do the dirty work for you:</p>

<pre><code> # app/helpers/time.rb
 module TimeHelper
   def timeago(time, options = {})
     options[:class] ||= "timeago"
     content_tag(
       :time,
       time.to_s,
       options.merge(datetime: time.getutc.iso8601)
     ) if time
   end
 end
</code></pre></li>
<li><p>Reference the new helper method from your view &ndash; passing in the time attribute of the model:</p>

<pre><code> # app/views/posts/show.html.erb
 Posted: &lt;%= timeago(post.created_at) %&gt;
</code></pre>

<p> This generates the following HTML tag:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"&gt;&lt;/time&gt;
</code></pre>

<p> Now that <code>timeago.js</code> is loaded and you have the right HTML tags on the page, you need to invoke the plugin and let it do its thing.</p></li>
<li><p>Add the following to the bottom of your layout and reload the page:</p>

<pre><code> # app/views/layouts/application.html.erb
 &lt;body&gt;
   &lt;%= javascript_tag do %&gt;
     $(function() {
       $("time.timeago").timeago();
     });
   &lt;% end %&gt;
 &lt;/body&gt;
</code></pre>

<p> Once the <code>timeago()</code> function is called, the timestamp above will look like:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"
 title="2013-11-08 20:05:37 UTC"&gt;2 days ago&lt;/time&gt;
</code></pre></li>
</ol>


<p>And that&rsquo;s it&hellip;sit on the page long enough and watch the timestamps increment. You&rsquo;ve now got yourself a solution that is dynamic and allows you to cache the views until the cows come home!</p>

<h2>Summary</h2>

<p>Even though Rails has a simple mechanism for displaying relative timestamps in views, moving this functionality to the client side makes sense.</p>

<p>Another benefit you get is timezone interpretation. Even though we print the UTC time in the HTML tag, the plugin will detect the local timezone from the browser and adjust accordingly. In my experience, timezones are a huge pain and the more you can offload them to a solution like this, the better.</p>

<p>Happy time-stamping!</p>

<p><em>Note: Since writing this, I discovered the <a href="https://github.com/37signals/local_time">local_time gem</a> from 37Signals. They’ve been a big advocate of moving relative timestamp calculation to the client-side. Their gem uses <a href="http://momentjs.com/">moment.js</a> instead of timago.js and it includes <a href="https://github.com/37signals/local_time/blob/master/app/assets/javascripts/local_time.js.coffee#L157">code to update the timestamps if Turbolinks is being used</a>. It’s worth checking out if you do this on a regular basis or use the moment.js library for other reasons.</em></p>

<p>P.S. In my book, <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=relative-timestamps-post">Build a Ruby Gem</a>, I cover how to create a Rails engine gem with the above functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flexible Rails Environment Configuration]]></title>
    <link href="http://brandonhilkert.com/blog/flexible-rails-environment-configuration/"/>
    <updated>2013-12-19T18:44:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/flexible-rails-environment-configuration</id>
    <content type="html"><![CDATA[<p>It&rsquo;s hard to write a Rails app without interfacing with an external service or
API. In most cases, these services require a secret token or password. Since
checking passwords in to source control is generally a bad practice, we need a
good way to safely and reliably access these values in code.</p>

<p>I&rsquo;ve tried a few gems that attempt to make this process easier and ultimately
settled on a simpler solution &ndash; the combination of a few lines of code and
<a href="http://en.wikipedia.org/wiki/Environment_variable">ENV variables</a>, which are
accessible whether you manage your own infrastructure or use a
<a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PaaS</a> service like
<a href="https://www.heroku.com">Heroku</a>.</p>

<!--more-->


<h2>The Problem</h2>

<p>In a recent Rails app, I used <a href="http://pusher.com/">Pusher</a> and it requires the
unique URL to be setup in an initializer:</p>

<p>```</p>

<h1>config/initializers/pusher.rb</h1>

<p>Pusher.url = &ldquo;<a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a>&rdquo;
```</p>

<p>If I need to set this URL in multiple place &ndash; copying/pasting is not a great
solution because it sets me up for copy/paste errors. It&rsquo;s also a headache to
find all occurrences of the URL when it changes.</p>

<h2>The Solution</h2>

<p>Setup a <a href="http://en.wikipedia.org/wiki/YAML">yaml</a> file similar to this:</p>

<p>```</p>

<h1>config/application.yml</h1>

<p>defaults: &amp;defaults
  PUSHER_URL: <a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a></p>

<p>development:
  &lt;&lt;: *defaults</p>

<p>test:
  &lt;&lt;: *defaults
```</p>

<p>Add the following to <code>config/application.rb</code> before the Rails application class
is defined:</p>

<p>```
if File.exists?(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>))
  config = YAML.load(File.read(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>)))
  config.merge! config.fetch(Rails.env, {})
  config.each do |key, value|</p>

<pre><code>ENV[key] ||= value.to_s unless value.kind_of? Hash
</code></pre>

<p>  end
end
```</p>

<p>Resulting in a <code>config/application.rb</code> that looks something like this:</p>

<p>```</p>

<h1>config/application.rb</h1>

<p>require File.expand_path(&lsquo;../boot&rsquo;, <strong>FILE</strong>)</p>

<p>require &lsquo;rails/all&rsquo;</p>

<h1>Require the gems listed in Gemfile, including any gems</h1>

<h1>you&rsquo;ve limited to :test, :development, or :production.</h1>

<p>Bundler.require(:default, Rails.env)</p>

<p>if File.exists?(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>))
  config = YAML.load(File.read(File.expand_path(&lsquo;../application.yml&rsquo;, <strong>FILE</strong>)))
  config.merge! config.fetch(Rails.env, {})
  config.each do |key, value|</p>

<pre><code>ENV[key] ||= value.to_s unless value.kind_of? Hash
</code></pre>

<p>  end
end</p>

<p>module NewApp
  class Application &lt; Rails::Application</p>

<pre><code># ...
</code></pre>

<p>  end
end
```</p>

<p>The added code first looks for an <code>application.yml</code> file. If it finds one, it
reads in the values for that environment (development, test, production, etc.)
and merges them in to the existing Ruby ENV hash.</p>

<p><em>Note: Since <code>application.yml</code> will typically hold passwords and other secret
keys, it should be added to <code>.gitignore</code> so they don&rsquo;t end up in source
control.</em></p>

<p>Now, when the application is initialized, <code>PUSHER_URL</code> is
available in the ENV hash. This allows me to the update the pusher initializer to:</p>

<p>```</p>

<h1>config/initializers/pusher.rb</h1>

<p>Pusher.url = ENV[&ldquo;PUSHER_URL&rdquo;]
```</p>

<p>If I&rsquo;m deploying to Heroku, I need to set the config value using the following
command:</p>

<p><code>heroku config:set PUSHER_URL=http://asdfa@api.pusherapp.com</code></p>

<p>Or if I&rsquo;m deploying to Ubuntu, I can set the ENV variable for all users on the system:</p>

<p>```</p>

<h1>/etc/environment</h1>

<p>&hellip;
export PUSHER_URL=<a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a>
```</p>

<p><em>Note: If you choose not to set ENV variables on the host system, you can
easily mimic the development environment and drop the <code>config/application.yml</code>
file on to the system. This is no different than using a <code>database.yml</code> that
most Rails developers are used to.</em></p>

<p>That&rsquo;s it! So with 7 lines of code and a configuration file, you have yourself
an environment configuration setup that&rsquo;s flexible for most deployment
solutions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a Cloudfront CDN for Rails]]></title>
    <link href="http://brandonhilkert.com/blog/setting-up-a-cloudfront-cdn-for-rails/"/>
    <updated>2013-11-12T21:18:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/setting-up-a-cloudfront-cdn-for-rails</id>
    <content type="html"><![CDATA[<p><em>Update: I&rsquo;ve since added a post on <a href="/blog/serving-fonts-for-firefox-with-fastly/">serving fonts for Firefox with Fastly</a>.</em></p>

<p>Implementing a <a href="http://en.wikipedia.org/wiki/Content_delivery_network">CDN</a> to
serve compiled assets in Rails is one of the most significant performance
enhancements I&rsquo;ve seen. Having done so for 2 fairly large applications, it&rsquo;s
hard for me to imagine serving assets locally anymore.</p>

<h2>The Asset Pipeline</h2>

<p>The addition of the Rails <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset
pipeline</a> has reduced both
the number of assets served and the size of these files. Users on slow
connections have been the biggest beneficiary of these changes.</p>

<h2>The Problem</h2>

<p>Even with the asset pipeline, content is transmitted to the end user
over their, sometimes slow, connection. Distance plays a role in the speed at which
data can be delivered. Because of this, users further away from your servers get a
sluggish experience. This decreases both the users' patience and your ability to effectively
engage them.</p>

<!--more-->


<h2>The Solution</h2>

<p>CDNs are networks of servers that host your content so that when
you make a request, the request is served from a server closest
to you. This can often reduce transmission time by several
seconds (&hellip;think users in Asia requesting content that&rsquo;s
served from Virginia &ndash; this is the case if you deploy to Heroku).</p>

<p>The use of a CDN also reduces the number of requests to your
application servers. Most Ruby applications use
<a href="http://wiki.nginx.org/Main">Nginx</a> or <a href="http://httpd.apache.org/">Apache</a> in
front of the Ruby processes. These HTTP servers are really good at serving
static content, but no one will deny &ndash; the fewer requests, the better.</p>

<h2>Option 1: <em>Push</em> your assets to the CDN during deployment</h2>

<p>Depending on your method of deployment, pushing assets to a CDN isn&rsquo;t always
trivial. The <a href="https://github.com/rumblelabs/asset_sync">asset_sync</a> gem has
made this relatively straight forward if you choose to host your assets from
<a href="http://aws.amazon.com/s3/">Amazon S3</a>. Out of the 2 options, this is the most
efficient because all requests for assets will be diverted away from your
application, leaving its precious processing power to serve more important
application requests.</p>

<h2>Option 2: Assets are <em>pulled</em> to the CDN on first request</h2>

<p>This option won&rsquo;t change deployment and is simple to
setup. The only downside is that upon first request to an asset, the CDN will
pull it from your web server and cache it (it&rsquo;s hardly a downside if you&rsquo;re
currently serving <em>all</em> your assets from your web server). All subsequent
requests to that asset will be served straight from the CDN. The simplicity of
this option generally makes it my preferred option.</p>

<p>So let&rsquo;s get to it&hellip;</p>

<h2>Amazon Cloudfront</h2>

<p>Log in to your Amazon EC2 account and click &ldquo;Cloudfront&rdquo;:</p>

<p><img class="center" src="/images/cdn/cloudfront.png" title="&ldquo;Click Cloudfront in the AWS web console&rdquo;" ></p>

<p>Click &ldquo;Create Distribution&rdquo;:</p>

<p><img class="center" src="/images/cdn/create.png" title="&ldquo;Create a Cloudfront distribution endpoint&rdquo;" ></p>

<p>Enter the domain where your assets currently live (ignore Origin ID &ndash; it&rsquo;ll be filled in for you):</p>

<p><img class="center" src="/images/cdn/settings.png" title="&ldquo;Settings for a typical CDN&rdquo;" ></p>

<p>Make note of the Cloudfront distribution URL</p>

<p><img class="center" src="/images/cdn/domain.png" title="&ldquo;Cloudfront distribution URL&rdquo;" ></p>

<h2>Rails</h2>

<p>Rails provides and easy way to change the host URL of the assets (images,
stylesheets, javascripts, fonts&hellip;). Enter the Cloudfront
distribution URL from above as the Rails <code>asset_host</code>.</p>

<p>```</p>

<h1>config/environments/production.rb</h1>

<p>config.action_controller.asset_host = &ldquo;d24xjtg100euk4.cloudfront.net&rdquo;
```</p>

<p>At this point, the domain of all Rails asset helpers <code>image_tag</code>, <code>stylesheet_link_tag</code>, and <code>javascript_include_tag</code>
will be prefaced with the asset host URL that you configured above.</p>

<p>For example:</p>

<p>```
image_tag(&ldquo;shark_teeth.png&rdquo;)</p>

<h1><a href="http://d24xjtg100euk4.cloudfront.net/assets/images/shark_teeth.png">http://d24xjtg100euk4.cloudfront.net/assets/images/shark_teeth.png</a></h1>

<p>```</p>

<p><em>Note: if you only change <code>config/environments/production.rb</code>, you won&rsquo;t see
any changes in your <code>development</code> environment.</em></p>

<p>And that&rsquo;s it!</p>

<h2>In Summary</h2>

<p>This is the ultimate low-hanging fruit optimization. If you haven&rsquo;t served your
assets from a CDN before, I&rsquo;d suggest giving it a try. The <a href="http://aws.amazon.com/cloudfront/pricing/">cost of
Cloudfront</a> is minimal, and in my
mind, worth 10x that.</p>

<p>I&rsquo;ve recently been trying out a service called
<a href="http://www.fastly.com/">Fastly</a>, which is an alternative to Cloudfront. It&rsquo;s
slightly more expensive, but seems to have better and more consistent
performance.</p>
]]></content>
  </entry>
  
</feed>
