<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-03-20T12:56:25-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Gem Configuration Patterns]]></title>
    <link href="http://brandonhilkert.com/blog/ruby-gem-configuration-patterns/"/>
    <updated>2014-03-17T20:26:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/ruby-gem-configuration-patterns</id>
    <content type="html"><![CDATA[<p>_This is one of 3 posts leading up the the launch of my
[__Build a Ruby Gem book__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=sucker-punch)
on __Thursday, March 27__! Sign up below to receive a **20% discount coupon** when the book launches._

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: rails" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>




</p>

<p>The world isn’t black and white (as much as we’d like to believe it is). Just because our gem’s functionality may work for us, doesn’t mean it’ll work for everyone.</p>

<p>Fortunately, we can give users the ability to add custom configuration data, allowing them to adapt our code to their own use. In this post, we&rsquo;ll adapt the <a href="https://github.com/brandonhilkert/mega_lotto"><code>mega_lotto</code> gem</a> to take a configuration block that modifies the number of integers returned from the <code>#draw</code> method output.</p>

<!--more-->


<h2>Use Case</h2>

<p>Our <code>mega_lotto</code> gem provides the functionality to randomly draw 6 numbers. However, let’s assume that someone else has taken interest in the code for our gem, but needs the code to generate 10 random numbers within the same range.</p>

<p>One option would be for them to fork the code and modify the gem to fit their needs. However, now there’s a randomly forked gem with the same name and it’s unclear why one should be used over the other, especially if no changes to the <code>README</code> were made.</p>

<p>Rather than go down that path, we can make our existing <code>mega_lotto</code> gem more flexible by returning 6 integers by default, while also providing an interface to customize this value for those with the need.</p>

<p>Our goal is to adapt our gem to take a configuration block like this:</p>

<p><code>ruby
MegaLotto.configure do |config|
  config.drawing_count = 10
end
</code></p>

<h2>Implementation</h2>

<p>Let’s first write some specs for the desired functionality. Because the <code>.configure</code> method above is off the main <code>MegaLotto</code> namespace, we’ll create the spec file <code>spec/mega_lotto_spec.rb</code>. With this spec, we’ll assert that after running the configuration block above, the <code>#drawing</code> method returns an array (like before), but this time with 10 integers instead:</p>

<p>```ruby
require &ldquo;spec_helper&rdquo;</p>

<p>describe MegaLotto do
  describe &ldquo;#configure&rdquo; do</p>

<pre><code>before do
  MegaLotto.configure do |config|
    config.drawing_count = 10
  end
end

it "returns an array with 10 elements" do
  draw = MegaLotto::Drawing.new.draw

  expect(draw).to be_a(Array)
  expect(draw.size).to eq(10)
end
</code></pre>

<p>  end
end
```</p>

<p>This spec serves as higher level integration spec because it’s accessing the public API of our gem. Because of this, we can be sure that once this spec passes, our implementation is complete. As expected, when we run this spec, it fails:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto#config returns an array with 10 elements</p>

<pre><code> Failure/Error: MegaLotto.configure do |config|
 NoMethodError:
   undefined method `configure` for MegaLotto:Module
 # ./spec/mega_lotto_spec.rb:6
</code></pre>

<p>Finished in 0.00131 seconds
1 example, 1 failure
```</p>

<p>Now that we have a spec to work against, let’s continue our implementation.</p>

<p>The failure above complained that there was no <code>MegaLotto.configure</code> method, so let’s add it:</p>

<p><code>ruby
module MegaLotto
  def self.configure
  end
end
</code></p>

<p>Re-running our specs gives us a different failure message this time:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto#configure returns an array with 10 elements</p>

<pre><code> Failure/Error: expect(draw.size).to eq(10)

   expected: 10
        got: 6

   (compared using ==)
 # ./spec/mega_lotto_spec.rb:15
</code></pre>

<p>Finished in 0.00246 seconds
1 example, 1 failure
```</p>

<p>The output now shows that the code still returned 6 integers, which we expected because our <code>.configure</code> method hasn’t done anything yet.</p>

<p>Because we’re using a object-oriented language like Ruby, we can create a <code>Configuration</code> class whose responsibility will be…(drumroll)….configuration!</p>

<p>Let’s start with some specs:</p>

<p>```ruby</p>

<h1>spec/mega_lotto/configuration_spec.rb</h1>

<p>require &ldquo;spec_helper&rdquo;</p>

<p>module MegaLotto
  describe Configuration do</p>

<pre><code>describe "#drawing_count" do
  it "default value is 6" do
    Configuration.new.drawing_count = 6
  end
end

describe "#drawing_count=" do
  it "can set value" do
    config = Configuration.new
    config.drawing_count = 7
    expect(config.drawing_count).to eq(7)
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Running the configuration specs produces:</p>

<p><code>bash
/Users/bhilkert/Dropbox/code/mega_lotto/spec/
mega_lotto/configuration_spec.rb:4:in `&lt;module:MegaLotto&gt;`:
uninitialized constant MegaLotto::Configuration (NameError)
</code></p>

<p>Let’s add the <code>Configuration</code> class:</p>

<p>```ruby</p>

<h1>lib/mega_lotto/configuration.rb</h1>

<p>module MegaLotto
  class Configuration
  end
end
```</p>

<p>Let’s try again:</p>

<p><code>bash
/Users/bhilkert/Dropbox/code/mega_lotto/spec/
mega_lotto/configuration_spec.rb:4:in `&lt;module:MegaLotto&gt;`:
uninitialized constant MegaLotto::Configuration (NameError)
</code></p>

<p>What??? Same message…Even though we added the <code>Configuration</code> class above, our gem doesn’t load it. So we can dive in to the entry file <code>lib/mega_lotto.rb</code> and add the appropriate require statement:</p>

<p>```ruby
require &ldquo;mega_lotto/version&rdquo;
require &ldquo;mega_lotto/configuration&rdquo;
require &ldquo;mega_lotto/drawing&rdquo;</p>

<p>begin
  require &ldquo;pry&rdquo;
rescue LoadError
end</p>

<p>module MegaLotto
  def self.configure
  end
end
```</p>

<p>Now with the <code>Configuration</code> class properly loaded, let’s run our specs again:</p>

<p>```bash
MegaLotto::Configuration
  #drawing_count</p>

<pre><code>default value is 6 (FAILED - 1)
</code></pre>

<p>  #drawing_count=</p>

<pre><code>can set value (FAILED - 2)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto::Configuration#drawing_count default value is 6</p>

<pre><code> Failure/Error: expect(config.drawing_count).to eq(6)
 NoMethodError:
   undefined method `drawing_count` for #&lt;MegaLotto::Configuration&gt;
 # ./spec/mega_lotto/configuration_spec.rb:8
</code></pre>

<p>  2) MegaLotto::Configuration#drawing_count= can set value</p>

<pre><code> Failure/Error: config.drawing_count = 7
 NoMethodError:
   undefined method `drawing_count=` for #&lt;MegaLotto::Configuration&gt;
 # ./spec/mega_lotto/configuration_spec.rb:15
</code></pre>

<p>Finished in 0.00175 seconds
2 examples, 2 failures
```</p>

<p>Even though we still have failures, we’re making progress. The failures above relate to the lack of a <code>#drawing_count=</code> method, so let’s add an accessor for it:</p>

<p>```ruby
module MegaLotto
  class Configuration</p>

<pre><code>attr_accessor :drawing_count
</code></pre>

<p>  end
end
```</p>

<p><em>Note: We could’ve just added an <code>attr_writer</code> to satisfy the spec. However, I know I’m going to need a getter down the road, so I chose to do it at the same time.</em></p>

<p>With our accessor in place, let’s check the specs again:</p>

<p>```bash
MegaLotto::Configuration
  #drawing_count=</p>

<pre><code>can set value
</code></pre>

<p>  #drawing_count</p>

<pre><code>default value is 6 (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto::Configuration#drawing_count default value is 6</p>

<pre><code> Failure/Error: expect(config.drawing_count).to eq(6)

   expected: 6
        got: nil

   (compared using ==)
 # ./spec/mega_lotto/configuration_spec.rb:8
</code></pre>

<p>Finished in 0.00239 seconds
2 examples, 1 failure
```</p>

<p>Still a failure, but we’re slowly making more progress. The default value isn’t getting set so we’ll change that in the implementation:</p>

<p>```ruby
module MegaLotto
  class Configuration</p>

<pre><code>attr_accessor :drawing_count

def initialize
  @drawing_count = 6
end
</code></pre>

<p>  end
end
```</p>

<p>Running the specs one more time for the <code>Configuration</code> class shows that we’re good:</p>

<p>```bash
MegaLotto::Configuration
  #drawing_count</p>

<pre><code>default value is 6
</code></pre>

<p>  #drawing_count=</p>

<pre><code>can set value
</code></pre>

<p>Finished in 0.00172 seconds
2 examples, 0 failures
```</p>

<p>Running the specs for the main <code>spec/mega_lotto.rb</code> class again:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto#configure returns an array with 10 elements</p>

<pre><code> Failure/Error: expect(draw.size).to eq(10)

   expected: 10
        got: 6

   (compared using ==)
 # ./spec/mega_lotto_spec.rb:15:in `block (3 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 0.00168 seconds
1 example, 1 failure
```</p>

<p>We still have the same failures from before, but it’s because we didn’t change the <code>MegaLotto::Drawing</code> to actually <em>use</em> the new configuration class. Since we have this awesome new class, let’s make use of it in <code>MegaLotto::Drawing</code>:</p>

<p>```ruby
module MegaLotto
  class Drawing</p>

<pre><code>def draw
  MegaLotto.configuration.drawing_count.times.map { single_draw }
end

private

def single_draw
  rand(0...60)
end
</code></pre>

<p>  end
end
```</p>

<p>Running the specs for the drawing class gives us the following output:</p>

<p>```bash
MegaLotto::Drawing
  #draw</p>

<pre><code>each element is less than 60 (FAILED - 1)
each element is an integer (FAILED - 2)
returns an array (FAILED - 3)
using the default drawing count
  returns an array with 6 elements (FAILED - 4)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto::Drawing#draw each element is less than 60</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `configuration` for MegaLotto:Module
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:19
</code></pre>

<p>  2) MegaLotto::Drawing#draw each element is an integer</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `configuration` for MegaLotto:Module
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:13
</code></pre>

<p>  3) MegaLotto::Drawing#draw returns an array</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `configuration` for MegaLotto:Module
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:9
</code></pre>

<p>  4) MegaLotto::Drawing#draw using the default</p>

<pre><code>  drawing count returns an array with 6 elements
 Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `configuration` for MegaLotto:Module
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:26
</code></pre>

<p>Finished in 0.00219 seconds
4 examples, 4 failures
```</p>

<p>Well…I guess it’s clear that it doesn’t have a <code>configuration</code> accessor, huh? Let’s add it to <code>lib/mega_lotto.rb</code>:</p>

<p>```ruby
module MegaLotto
  class &lt;&lt; self</p>

<pre><code>attr_accessor :configuration
</code></pre>

<p>  end</p>

<p>  def self.configure
  end
end</p>

<p>```</p>

<p>and our specs:</p>

<p>```bash
MegaLotto::Drawing
  #draw</p>

<pre><code>each element is less than 60 (FAILED - 1)
each element is an integer (FAILED - 2)
returns an array (FAILED - 3)
using the default drawing count
  returns an array with 6 elements (FAILED - 4)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto::Drawing#draw each element is less than 60</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `drawing_count` for nil:NilClass
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:19
</code></pre>

<p>  2) MegaLotto::Drawing#draw each element is an integer</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `drawing_count` for nil:NilClass
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:13
</code></pre>

<p>  3) MegaLotto::Drawing#draw returns an array</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `drawing_count` for nil:NilClass
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:9
</code></pre>

<p>  4) MegaLotto::Drawing#draw using the default</p>

<pre><code>  drawing count returns an array with 6 elements
 Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `drawing_count` for nil:NilClass
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:26
</code></pre>

<p>Finished in 0.00146 seconds
4 examples, 4 failures</p>

<p>```</p>

<p>A different message this time, related to the fact that the configuration accessor has no <code>#drawing_count</code> method. This makes sense because we don’t actually return anything from <code>#configuration</code>. Let’s instantiate a new <code>Configuration</code> object and see where that gets us:</p>

<p>```ruby
module MegaLotto
  class &lt;&lt; self</p>

<pre><code>attr_writer :configuration
</code></pre>

<p>  end</p>

<p>  def self.configuration</p>

<pre><code>Configuration.new
</code></pre>

<p>  end</p>

<p>  def self.configure
  end
end
```</p>

<p>Now, the <code>Drawing</code> class specs are passing:</p>

<p>```bash
MegaLotto::Drawing
  #draw</p>

<pre><code>each element is an integer
each element is less than 60
returns an array
using the default drawing count
  returns an array with 6 elements
</code></pre>

<p>Finished in 0.01007 seconds
4 examples, 0 failures
```</p>

<p>Let’s flip back to the spec file <code>spec/mega_lotto_spec.rb</code> and see where we are:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto#configure returns an array with 10 elements</p>

<pre><code> Failure/Error: expect(draw.size).to eq(10)

   expected: 10
        got: 6

   (compared using ==)
 # ./spec/mega_lotto_spec.rb:15
</code></pre>

<p>Finished in 0.00167 seconds
1 example, 1 failure
```</p>

<p>Still failing, but at least we have what seems like the pieces setup to implement the global configuration. The <code>.configure</code> methods needs to yield the configuration block to a new instance of the <code>Configuration</code> class. However, we’ll need to memoize the configuration instance, so when the <code>Drawing</code> class accesses <code>#drawing_count</code>, it returns the initial  configuration value:</p>

<p>```ruby
module MegaLotto
  class &lt;&lt; self</p>

<pre><code>attr_writer :configuration
</code></pre>

<p>  end</p>

<p>  def self.configuration</p>

<pre><code>@configuration ||= Configuration.new
</code></pre>

<p>  end</p>

<p>  def self.configure</p>

<pre><code>yield(configuration)
</code></pre>

<p>  end
end
```</p>

<p><em>Note: it’s important to return the class instance variable from <code>.configuration</code> and check if that is set rather than the reader method, otherwise it’d get stuck in a loop and never return.</em></p>

<p>Running our specs again, we see that we’re green:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements
</code></pre>

<p>Finished in 0.00168 seconds
1 example, 0 failures
```</p>

<p>For the sake of sanity, let’s run the whole suite to make sure everything is covered:</p>

<p>```bash
$ rake
&hellip;&hellip;.</p>

<p>Finished in 0.00688 seconds
7 examples, 0 failures
```</p>

<p>…and we’re good! Except, if we run our entire suite a few times in a row, we’ll eventually see a failure:</p>

<p>```bash
Failures:</p>

<p>  1) MegaLotto::Drawing#draw returns an Array with 6 elements</p>

<pre><code> Failure/Error: expect(drawing.size).to eq(6)

   expected: 6
        got: 10

   (compared using ==)
 # ./spec/mega_lotto/drawing_spec.rb:13
</code></pre>

<p>Finished in 0.00893 seconds
7 examples, 1 failure
```</p>

<p>What’s going on???</p>

<p>In the setup of the spec for <code>MegaLotto.configure</code>, we added the following before block:</p>

<p>```ruby</p>

<pre><code>before :each do
  MegaLotto.configure do |config|
    config.drawing_count = 10
  end
end
</code></pre>

<p>```</p>

<p>Because this configuration is global, if this spec is run before the others in our suite, the remaining specs will use it. So when the specs for <code>MegaLotto::Drawing</code> run, 10 elements are return instead of the 6, the default, and we see the failure.</p>

<p>For global values like this, it’s best to clean up after each spec to ensure the system is back to a default state. In our case, we can implement a <code>.reset</code> method on <code>MegaLotto</code> and set the configuration back to a new instance of the <code>Configuration</code> class. Let’s start with a spec for this in <code>spec/mega_lotto_spec.rb</code>:</p>

<p>```ruby
  describe &ldquo;.reset&rdquo; do</p>

<pre><code>before :each do
  MegaLotto.configure do |config|
    config.drawing_count = 10
  end
end

it "resets the configuration" do
  MegaLotto.reset

  config = MegaLotto.configuration

  expect(config.drawing_count).to eq(6)
end
</code></pre>

<p>  end
```</p>

<p>As expected, we see failure because we have yet to implement the <code>.reset</code> method:</p>

<p>```bash
Failures:</p>

<p>  1) MegaLotto.reset resets the configuration</p>

<pre><code> Failure/Error: MegaLotto.reset
 NoMethodError:
   undefined method `reset` for MegaLotto:Module
 # ./spec/mega_lotto_spec.rb:28
</code></pre>

<p>Finished in 0.00762 seconds
8 examples, 1 failure
```</p>

<p>Let’s do that now:</p>

<p>```ruby
module MegaLotto
  class &lt;&lt; self</p>

<pre><code>attr_writer :configuration
</code></pre>

<p>  end</p>

<p>  def self.configuration</p>

<pre><code>@configuration ||= Configuration.new
</code></pre>

<p>  end</p>

<p>  def self.reset</p>

<pre><code>@configuration = Configuration.new
</code></pre>

<p>  end</p>

<p>  def self.configure</p>

<pre><code>yield(configuration)
</code></pre>

<p>  end
end
```</p>

<p>Our specs for the <code>.reset</code> method pass, so now we need to make use of it to clean up after our <code>.configure</code> spec:</p>

<p>```ruby
describe &ldquo;#configure&rdquo; do</p>

<p>  before :each do</p>

<pre><code>MegaLotto.configure do |config|
  config.drawing_count = 10
end
</code></pre>

<p>  end</p>

<p>  it &ldquo;returns an array with 10 elements&rdquo; do</p>

<pre><code>draw = MegaLotto::Drawing.new.draw

expect(draw).to be_a(Array)
expect(draw.size).to eq(10)
</code></pre>

<p>  end</p>

<p>  after :each do</p>

<pre><code>MegaLotto.reset
</code></pre>

<p>  end
end
```</p>

<p>Now we can be sure that our specs pass no matter the order of execution.</p>

<h2>Local Configuration</h2>

<p>The configuration approach above implements a global configuration object. The downside is that we can’t have multiple instances of our code running with different configurations. To avoid this, we could isolate the configuration class and only pass it to those objects that need it. By doing this, we’d avoid needing the <code>MegaLotto.configure</code> method entirely.</p>

<p>With this in mind, <code>Drawing</code> might look like:</p>

<p>```ruby
module MegaLotto
  class Drawing</p>

<pre><code>attr_accessor :config

def initialize(config = Configuration.new)
  @config = config
end

def draw
  config.drawing_count.times.map { single_draw }
end

private

def single_draw
  rand(0...60)
end
</code></pre>

<p>  end
end
```</p>

<p>We can supply our own configuration object during instantiation if the defaults aren’t appropriate. In this case, as long as the object responds to <code>drawing_count</code>, everything will work.</p>

<p>```ruby
require &lsquo;ostruct&rsquo;
config = OpenStruct.new(drawing_count: 10)</p>

<p>MegaLotto::Drawing.new(config).draw #=> [23, 4, 21, 33, 48, 12, 43, 13, 2, 5]
```</p>

<p>Both approaches are certainly valid, so I’ll leave it to you to decide which approach is best for your gem.</p>

<h2>Implementations in the Wild</h2>

<p>The <a href="https://github.com/carrierwaveuploader/carrierwave#configuring-carrierwave">CarrierWave gem</a> is a popular choice to support avatar uploading. The author(s) realized that not everyone would want to store upload assets on the local system, so they offered the functionality to support Amazon S3 and other similar block storage services. In order to set this value, you’d use a <a href="https://github.com/carrierwaveuploader/carrierwave#configuring-carrierwave">configure block almost identical to the one we wrote above</a>.</p>

<p>Thoughtbot wrote a <a href="http://robots.thoughtbot.com/mygem-configure-block">great article about the configuration implementation</a> in their <a href="https://github.com/thoughtbot/clearance">Clearance gem</a>. It’s worth reading even if you don’t plan to use Clearance.</p>

<h2>Summary</h2>

<p>Keeping gems configurable means balancing your use case with the use cases of others. The more flexibility you offer to users of your gem, the more users will find value in your work. However, there’s a point when offering too much configuration can make the internals of a gem unnecessarily complicated. As you probably know, Ruby is a language full of conventions and it’s best to provide reasonable defaults and only adapt if the need arises.</p>

<p>One approach to balance complexity is to create a system where users can write their own middleware to modify the behavior of the default system. Mike Perham created a <a href="https://github.com/mperham/sidekiq/wiki/Middleware">middleware system for Sidekiq</a> allowing users to add functionality as they wish. Doing so doesn’t require the gem to change at all when unique use cases arise. The implementation of such system is beyond the scope of this book. However, if you want to learn more, <a href="https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/middleware/chain.rb">Sidekiq’s implementation</a> is a great place to start.</p>

<p>_This is one of 3 posts leading up the the launch of my
[__Build a Ruby Gem book__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=sucker-punch)
on __Thursday, March 27__! Sign up below to receive a **20% discount coupon** when the book launches._

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: rails" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>




</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Wrote the Sucker Punch Gem]]></title>
    <link href="http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem/"/>
    <updated>2014-03-13T13:56:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem</id>
    <content type="html"><![CDATA[<p>_This is one of 3 posts leading up the the launch of my
[__Build a Ruby Gem book__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=sucker-punch)
on __Thursday, March 27__! Sign up below to receive a **20% discount coupon** when the book launches._

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: rails" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>




</p>

<p>One of the simplest and most common application of background processing is sending emails outside of a web
request. And while background processing is pretty common, most existing Ruby background processing libraries require an additional process to execute these jobs, resulting in increased infrastructure costs.</p>

<p>At the time, I was working on an application hosted on Heroku, and the cost of an additional dyno ($35/month) wasn’t justified. The background jobs did very little more than send emails out of band. To me, the traditional solutions seemed like overkill. And with this, the idea of <a href="https://github.com/brandonhilkert/sucker_punch">sucker_punch</a> was born&hellip;</p>

<!--more-->


<h2>Ruby Background Processing Libraries</h2>

<p>Until I had heard of <a href="http://sidekiq.org/">Sidekiq</a>, <a href="https://github.com/collectiveidea/delayed_job/tree/master">delayed_job</a> and <a href="https://github.com/resque/resque">Resque</a> were the standard options for processing background jobs in Ruby. I&rsquo;ve used both and believe each has a great use case.</p>

<p>In my experience, it&rsquo;s easiest to start with delayed_job if you need background processing in your application. If and when the DB becomes your bottleneck, it&rsquo;s time to move on. Redis is a dependency of both Resque and Sidekiq, which increases the complexity and infrastructure maintenance, however, with <a href="https://addons.heroku.com/?q=redis">Heroku&rsquo;s hosted Redis
Add-ons</a>, this dependency is much less of a pain.</p>

<h2>My work on Sidekiq</h2>

<p>I previously wrote about my my <a href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/">open source contributions</a> and how I got started. I had spent the previous several
months contributing to Sidekiq and learning more about concurrency patterns in Ruby.</p>

<p>Sidekiq is multi-threaded, which is the reason a single Sidekiq process is <a href="https://github.com/mperham/sidekiq/wiki/Testimonials">more
efficient</a> than a library like Resque. Although, nothing in life is free &ndash; care must be taken to ensure your jobs are thread-safe. A helpful <a href="https://github.com/mperham/sidekiq/wiki/Best-Practices">guide to writing thread-safe code</a> can be found on the Sidekiq wiki.</p>

<h2>Use Case</h2>

<p>I was working on <a href="http://defriendnotifierapp.com/">Defriend Notifier</a> and needed to notify users via email when their Facebook friend list changed. Using Sidekiq or any of the alternatives mentioned above certainly would’ve worked. In fact, the application originally used Sidekiq and functioned perfectly. However, as time went on, I decided the extra cost of the worker wasn’t justified, especially given that the application didn’t produce any revenue outside of advertising (very little…).</p>

<p>At the time, the only background processing library that didn’t require an additional background process was
<a href="https://github.com/mperham/girl_friday">girl_friday</a>, also written by <a href="https://twitter.com/mperham">Mike
Perham</a>, author of Sidekiq. While this solution worked for awhile, I found the syntax to be slightly non-intuitive and it felt a little dirty to pass around a global variable within the application
to manage a single job queue. I also experienced some memory leaks on Heroku as a result of switching to
girl_friday, but to be fair, I didn&rsquo;t spend much time determining the root cause. <em>Disclaimer: It very likely could’ve been due to code that I wrote</em>.</p>

<h2>Enter Celluloid</h2>

<p><a href="https://github.com/celluloid/celluloid">Celluloid</a> describes itself as an actor-based concurrent object
framework for Ruby. Celluloid is the guts behind Sidekiq and the reason why the multi-threaded Sidekiq code is so readable. Celluloid abstracts away the details of concurrency so your code doesn&rsquo;t have to worry about manually managing thread synchronization and object message queuing.</p>

<h2>Sucker Punch is born</h2>

<p>girl_friday was written several years ago — before Celluloid was created. Realizing the power of Celluloid,
I figured there was an opportunity for a new library that behaved like girl_friday, but utilized
Celluloid&rsquo;s more reliable multi-threading capabilities. And because Celluloid handles so much of the complexity, the gem itself would be relatively simple — really a DSL around enqueuing jobs to a <a href="https://github.com/celluloid/celluloid/wiki/Pools">Celluloid Pool</a>.</p>

<p>I <a href="https://twitter.com/brandonhilkert/status/292630123981729793">posed the question to Mike Perham</a> and he confirmed my suspicions.</p>

<p><img class="center" src="/images/sucker-punch-tweet.png" title="&ldquo;Sucker Punch Tweet&rdquo;" ></p>

<p>Fortunately, Celluloid had all of the functionality needed for background queues already built-in. While the
functionality was there, the usage syntax was awkward.</p>

<p>I spent the next few days creating a DSL around the Celluloid internals, thus making it feel more specific to
background queues.</p>

<p>Here’s the result of a typical job class:</p>

<pre><code>class LogJob
  include SuckerPunch::Job

  def perform(event)
    # do some other stuff to
    # record the event in the background
    puts "#{event} just happened"
  end
end
</code></pre>

<p>I deployed my sucker_punch-converted application code to production and gave it a week or so before I declared it a success. Once I realized sucker_punch was going to be a maintainable method for processing background jobs in a single web process, I added additional niceties like logging and queue configuration details that may be valuable for other use cases.</p>

<p>Have you tried <a href="https://github.com/brandonhilkert/sucker_punch">sucker_punch</a> yet? If so, I&rsquo;d love to know how it went and what you used it for&hellip;</p>

<p>_This is one of 3 posts leading up the the launch of my
[__Build a Ruby Gem book__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=sucker-punch)
on __Thursday, March 27__! Sign up below to receive a **20% discount coupon** when the book launches._

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: rails" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>




</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Technical Review]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-technical-review/"/>
    <updated>2014-03-04T17:43:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-technical-review</id>
    <content type="html"><![CDATA[<p>Greetings from a now less snowy Eastern USA!</p>

<p>The past few weeks have seemed like one big snow storm. We haven’t had many days above freezing and spent very little time outside (voluntarily at least). I’m sure those living in colder climates are probably saying “cry me a river…” right now. On the bright side, our extended home stays have given me more time to write.</p>

<!--more-->


<p><img class="center" src="/images/snow.jpg" title="&ldquo;West Chester Snow&rdquo;" ></p>

<p>Since the last time, I made some serious progress…</p>

<ol>
<li><p><strong>The chapter list is finalized</strong> &ndash; I’m thankful for all the feedback you provided about the chapter list. It really helped me determine the more important topics and make sure they were well covered.</p></li>
<li><p><strong>Content is done</strong> &ndash; Snow days inside will do that. I made a big push to strengthen the weaker areas where there was overwhelming interest.</p></li>
<li><p><strong>Grammatical editing is done</strong> &ndash; I’m lucky to be surrounded by really supportive people that have both the skill and interest to help edit. They pitched in and we knocked it out!</p>

<p> <img class="center" src="/images/editing.jpg" title="&ldquo;Build a Ruby Gem Editing&rdquo;" ></p></li>
<li><p><strong>Technical review is underway</strong> &ndash; Again, I can’t stress how lucky I feel that people I respect and look up to in the Ruby community volunteered their free time to review the book. I suspect it’ll be another week or 2 before the final changes are sorted out, but never the less, technical review is well underway.</p></li>
<li><p><strong><a href="http://www.mikeperham.com/">Mike Perham</a> is writing a foreword</strong> &ndash; Mike is someone I greatly respect and helped me navigate the open source eco-system when I first started contributing to his <a href="http://sidekiq.org/">Sidekiq</a> project. He’s been contributing to OSS far longer than Sidekiq and the Ruby community is lucky to have him. He’s written a beautifully succinct opening for the book as it relates to developing open source software. If reading his foreword doesn’t motivate to start contributing, I don’t now what will.</p></li>
</ol>


<p>Specifics about the launch date haven’t been determined, but <strong>the book will definitely launch in late March</strong>. I plan to be in touch with a <strong>sample chapter and coupon code</strong>, as promised, when the time gets closer.</p>

<p>Looking back on the items mentioned above, I’m really excited to be nearing the home stretch and finally get it in to your hands.</p>

<p>Hope you had a great past couple of weeks. Talk to you soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding the RAILS_CACHE_ID Environment Variable]]></title>
    <link href="http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable/"/>
    <updated>2014-02-19T07:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable</id>
    <content type="html"><![CDATA[<p>Last week, I was looking through my Twitter stream and came across a tweet that referenced <code>ENV[“RAILS_CACHE_ID”]</code>. I was unfamiliar with this environment variable and made a note to learn more.</p>

<p>Rails 4 has made a discernible effort to improve view rendering performance by what they’re calling <a href="http://signalvnoise.com/posts/3690-the-performance-impact-of-russian-doll-caching">russian doll caching</a>. Prior to this, view caching was simple in syntax, but realistically more complicated when cached partials needed busting on subsequent releases.</p>

<!--more-->


<p>I didn’t know if this environmental variable had anything to do with Rails 4 caching, so I went digging…</p>

<p>The first thing I did was <code>git clone</code> the Rails source code and look for that variable. Outside of the documentation and tests, it showed up in one place, <code>activesupport/lib/active_support/cache.rb</code>:</p>

<pre><code># Expands out the +key+ argument into a key that can be used for the
# cache store. Optionally accepts a namespace, and all keys will be
# scoped within that namespace.
#
# If the +key+ argument provided is an array, or responds to +to_a+, then
# each of elements in the array will be turned into parameters/keys and
# concatenated into a single key. For example:
#
#   expand_cache_key([:foo, :bar])               # =&gt; "foo/bar"
#   expand_cache_key([:foo, :bar], "namespace")  # =&gt; "namespace/foo/bar"
#
# The +key+ argument can also respond to +cache_key+ or +to_param+.

def expand_cache_key(key, namespace = nil)
  expanded_cache_key = namespace ? "#{namespace}/" : ""

  if prefix = ENV["RAILS_CACHE_ID"] || ENV["RAILS_APP_VERSION"]
    expanded_cache_key &lt;&lt; "#{prefix}/"
  end

  expanded_cache_key &lt;&lt; retrieve_cache_key(key)
  expanded_cache_key
end
</code></pre>

<p>The comments preceding the method do a good job telling the whole story. The <code>expanded_cache_key</code> variable is an array built up from the <code>key</code> argument. The <code>RAILS_CACHE_ID</code> environment variable is prefaced to this array, operating similar to a namespace.</p>

<p>With these assumptions in mind, let’s see if we prove for sure. I’ll generate a new Rails 4 app:</p>

<pre><code>$ rails new cache_test
</code></pre>

<p>We’ll be inspecting model objects, so let’s generate a fake blog model:</p>

<pre><code>$ rails g scaffold post title content:text
</code></pre>

<p>Migrate the database to get current:</p>

<pre><code>$ bin/rake db:migrate
</code></pre>

<p>I’ll create a new <code>Post</code> and take a look at the default <code>cache_key</code>:</p>

<pre><code>$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Let’s set the <code>RAILS_CACHE_ID</code> and look at the <code>cache_key</code> of this record again:</p>

<pre><code>$ export RAILS_CACHE_ID=octopus
$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Hmmm…same thing. Referring back to the Rails course code above, it turns out that not all cache writes use the <code>expand_cache_key</code> method. Searching around the Rails code for <code>expand_cache_key</code>, we find the following results:</p>

<pre><code>ActionController::Caching::Fragments#fragment_cache_key
ActionDispatch::Http::Cache::Response#etag=
</code></pre>

<p>From the looks of it, it only applies to fragment caching and manually setting ETAG headers for HTTP responses, so let’s dig in to those.</p>

<h2>Fragment Caching</h2>

<p>I can cache the post fragment by wrapping it in a <code>cache</code> block:</p>

<pre><code>&lt;% app/views/posts/show.html.erb %&gt;
&lt;%= cache(@post) do %&gt;
  &lt;p&gt;
    &lt;strong&gt;Title:&lt;/strong&gt;
    &lt;%= @post.title %&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Content:&lt;/strong&gt;
    &lt;%= @post.content %&gt;
  &lt;/p&gt;
&lt;% end %&gt;
</code></pre>

<p>Run the server and make a request to <code>http://localhost:3000/posts/1</code>.</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:16:04 -0500
  ActiveRecord::SchemaMigration Load (0.2ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.2ms)
Write fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.6ms)
  Rendered posts/show.html.erb within layouts/application (11.0ms)
</code></pre>

<p><em>Note: Make sure <code>config.action_controller.perform_caching</code> is set to <code>true</code> in <code>config/environments/development.rb</code> (it’s <code>false</code> by default), otherwise caching is disabled.</em></p>

<p>There it is! It wrote out the key <code>views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code>. Let’s change the environmental variable and see if it adjusts accordingly:</p>

<pre><code>$ export RAILS_CACHE_ID=shark
</code></pre>

<p>Restart the Rails server and again, request <code>http://localhost:3000/posts/1</code>:</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:35:33 -0500
  ActiveRecord::SchemaMigration Load (0.1ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.3ms)
Write fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.5ms)
  Rendered posts/show.html.erb within layouts/application (11.1ms)
Completed 200 OK in 82ms (Views: 62.7ms | ActiveRecord: 0.5ms)
</code></pre>

<p>Sure enough…the key <code>views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code> was used this time.</p>

<h2>Etags</h2>

<p>Etags are a value added to the HTTP headers that allow a browser to determine whether the content for a particular piece of content should be refreshed or not. If not, the server returns a <code>304</code> HTTP code and the browser uses the cached response from a previous request.</p>

<p>Rails provides two controller helper methods to help determine whether the content should be refreshed: <code>fresh_when</code> and <code>stale?</code>. The <a href="http://guides.rubyonrails.org/caching_with_rails.html#conditional-get-support">Rails guides</a> provide a decent explanation of these methods and when to use them.</p>

<p>Jumping in to the <code>PostsController</code>, let’s use the <code>fresh_when</code> method in the <code>show</code> action:</p>

<pre><code>class PostsController &lt; ApplicationController

  def show
    @post = Post.find(params[:id])
    fresh_when(@post)
  end

end
</code></pre>

<p>Now, when we request the <code>show</code> page for that post, we get an Etag back in the header response of <code>9c754ae292618570ec43cae8e03a0b13</code>. That doesn’t look very familiar, huh?</p>

<p>It turns out that the Etag is generated using the following method:</p>

<pre><code>Digest::MD5.hexadigest(key)
</code></pre>

<p>But the key is more than just the <code>cache_key</code> of the <code>@post</code>. If we refer back to where the <code>expand_cache_key</code> method was used, we see that when the <code>etag</code> attribute is set on the response, the key is expanded using the <code>ActiveSupport::Cache#expand_cache_key</code> method we looked at above:</p>

<pre><code> def etag=(etag)
   key = ActiveSupport::Cache.expand_cache_key(etag)
   @etag = self[ETAG] = %("#{Digest::MD5.hexdigest(key)}")
 end
</code></pre>

<p>Let’s stop the server and reset the <code>ENV[“RAILS_CACHE_ID”]</code>:</p>

<pre><code>$ export RAILS_CACHE_ID=whale
</code></pre>

<p>Running the same request, we get an Etag of <code>b389da68ca1b25986edecf349fcf63e6</code>. So as you can see, by updating <code>ENV[“RAILS_CACHE_ID”]</code> alone, we get a different Etag in the response without changing the <code>post</code> object itself, which means we can invalidate our browser cache by updating this environmental variable.</p>

<p>I, personally, deploy to Heroku most of the time and it’d be nice to be able take advantage of browser caching in this manner, but also know when a new deploy is released. <a href="http://ninjasandrobots.com/rails-caching-a-problem-with-etags-and-a-solution">This article</a> describes a solution that integrates Heroku’s numbered releases.</p>

<p>However, we know that Heroku uses git to get the source code of the appellation to the application container, so why not leverage git commit IDs for <code>ENV[“RAILS_CACHE_ID”]</code>.</p>

<p><code>git log</code> is a command to look at….well, git logs!. With a few additional options, we can get a shortened version of the commit SHA:</p>

<pre><code>$ git log --pretty=format:%h -n1
40ad584
</code></pre>

<p><strong>Combining the git commit SHA gives us the perfect opportunity to invalidate browser cache</strong>. If the Etag is different because a different git commit SHA is the most recent on the server, we know there’s a potential the HTML rendered and cached in the browser could be outdated. We can implement this by setting the ENV variable in <code>config/application.rb</code>:</p>

<pre><code>ENV['RAILS_CACHE_ID'] = `git log --pretty=format:%h -n1`.strip
</code></pre>

<p>Now, when a request is made we get an Etag of <code>6d80b6397347f8de1b8718e7fd9f90e1</code>. And if we add an empty commit and re-request the post, we get an Etag of <code>6dcc66ddf83613dd0c46406a1e983b38</code>.</p>

<p>Hooray! <strong>A browser caching strategy for HTML content that’s dependent on the git release</strong>.</p>

<h2>Summary</h2>

<p>Before Rails 4, it was common to use a version number in the view <code>cache</code> method so that when you changed a encompassed view template, the cache would bust and the changes would be shown. However, now that <code>cache_digests</code> are part of Rails 4, the contents of the template block is evaluated and an MD5 string is created from the contents (the latter part of the cache key &ndash; <code>c39e6bde261c006ffe9ddf27fb9d5318</code> in the last example). This ensures that whenever the contents of the view template are changed, the cache is busted and the new template is properly stored and rendered.</p>

<p>Given the <code>cache_key</code> of fragment caching is dependent on the contents of the template, I have trouble finding value in setting the <code>RAILS_CACHE_ID</code> environmental variable for fragment caching alone.</p>

<p>Alternatively, the use case for using <code>ENV[“RAILS_CACHE_ID”]</code> to control browser caching can be a tremendous asset when the content of the body response is not considered. Caching strategies can be difficult to reason about and hopefully this gives you another tool in the toolbox to make parts of your Rails applications more performant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Update]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-book-update/"/>
    <updated>2014-02-15T08:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-book-update</id>
    <content type="html"><![CDATA[<p><strong>This past weekend I added ~ 6,000 words</strong> to the existing content. I&rsquo;m really excited to be nearing the end of the road. I&rsquo;ve gotten some great feedback since I started and wanted to gather a bit more to finalize the chapter list.</p>

<p>Here&rsquo;s the chapter list I&rsquo;m working with&nbsp;so far:</p>

<!--more-->


<ol>
<li>Introduction What is a gem? Why build a gem?)</li>
<li>File structure of a gem</li>
<li>Testing/debugging setup</li>
<li>Code implementation of of example gem</li>
<li>Versioning</li>
<li>Release (how to release? and when to release?)</li>
<li>Changelog (What is it? and what to include?)</li>
<li>Responsibility of a gem author</li>
<li>Loading additional libraries within a gem</li>
<li>Command-line utilities</li>
<li>Configuration patterns</li>
<li>Rails hooks</li>
<li>Rails view helpers</li>
<li>Rails controller includes</li>
<li>Rails Model Includes</li>
<li>Rails rake tasks</li>
<li>Rails engines (when/why to use?)</li>
<li>Open source management</li>
<li>Summary</li>
</ol>


<p>Phew! That&rsquo;s a lot&hellip;so with that in mind, <strong>have I covered everything?</strong></p>

<p>Please <strong>leave a comment</strong> if you&rsquo;re interested in reading about something I haven&rsquo;t mentioned.</p>

<p>One of the things I&rsquo;m most excited about is being able to use real-word examples for each chapter. I learn by reading and writing my own code and really appreciate when a book/post does the same. I&rsquo;ve tried to do that at every step of the way. Hopefully this will make the book more valuable to you.</p>

<p>I will be in touch in the <strong>next few weeks with a sample chapter</strong> or two, along with some feature blog posts.</p>

<p>If you&rsquo;re interested in receiving updates about the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary"><em>Build a Ruby Gem</em>
book</a>,
enter your email below:</p>

<p><div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: rails" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>

</p>

<p>Members of this list will also receive a <strong>20% discount coupon</strong> when the book
launches!</p>
]]></content>
  </entry>
  
</feed>
