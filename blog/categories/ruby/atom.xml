<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2013-10-18T19:46:06-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3 Ways To Get Started Contributing To Open Source]]></title>
    <link href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/"/>
    <updated>2013-10-15T16:30:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source</id>
    <content type="html"><![CDATA[<p>Towards the end of 2012, I began feeling like a had a good grip on the Ruby
language. As mentioned in a <a href="/blog/the-technology-hump/">previous
post</a>, I felt confident enough in my skills that
I could make a positive contribution to the open source community.</p>

<p>I learned a lot by watching certain projects and getting involved with others
and hope that my notes are helpful for you and your endeavors.</p>

<h3>1. Fix a bug in an existing gem because it affects you</h3>

<p>My experience with <a href="/about">Meeteor</a> and <a href="/about">Spokely</a> caused me to move
FAST and break a lot of things along the way. Because of the pace, when I did
find a bug, I wasn&rsquo;t great at contributing code back to the source repository.
In many cases, my fixes were brute force <a href="http://en.wikipedia.org/wiki/Monkey_patch">monkey
patches</a> or something else that I
would probably be pretty embarassed about today.</p>

<!--more-->


<p>Some of the more extreme cases caused me to <a href="https://github.com/brandonhilkert/jquery-tokeninput">fork a
gem</a> and <a href="https://github.com/brandonhilkert/jquery-tokeninput/commits/master">commit
changes</a> to
my version of the repo and reference my version of them gem in the application.
Thinking back on this now, doing so probably did more harm than good. The
downside is that it creates yet another fork of the gem and it also suffers
from lack of future updates by the original author. Unless, of course, you&rsquo;re
diligent about merging in changes from master, but let&rsquo;s admit, this never
happens.</p>

<p>In hindsight, I should have spent the extra 30 minutes to write organized and
tested code in order to contribute back to the original project. If I
experienced the bug, it&rsquo;s likely that others would too, if they hadn&rsquo;t already.</p>

<p><em>Be sure to review the Github issues for other reports of the bug.
It&rsquo;s possible there may already be an open pull request, thus
saving you the effort of preparing the fix.</em></p>

<h3>2. Improve an existing gem to learn more about the subject</h3>

<p>It&rsquo;s best to head towards projects that you either have passion for or use
heavily.  If you&rsquo;re unsure of the level of effort required for an issue or
feature, ask the gem&rsquo;s author. Also, before you prepare that killer feature
that&rsquo;s going to take you 2 weeks to prepare, make sure it&rsquo;s known and approved
by the auther. It&rsquo;s a bummer to put in all that work only to learn that it&rsquo;s
not something the author is interested in adding and supporting. They&rsquo;ll likely
be happy for the extra help and point you in the right direction.</p>

<p>For me, this was <a href="http://sidekiq.org/">Sidekiq</a>. I had been a long time user of
<a href="https://github.com/collectiveidea/delayed_job">Delayed Job</a> and
<a href="https://github.com/resque/resque">Resque</a>. When I first tried Sidekiq, I was
dumbfounded at how much faster it was because of its multi-threading
capabilities. I was also really surprised how easy it was to get started.
Sidekiq&rsquo;s author, <a href="https://twitter.com/mperham">Mike Perham</a>, has done a great job at
keeping the API similar to that of Resque, thus minimizing the pain of
switching.</p>

<p>Often, a popular gem will have a list of pending features to be written for
upcoming versions. If you can&rsquo;t find this list documented in the source code,
again, ask the gem&rsquo;s contributors. They&rsquo;ll likely have thought through upcoming
features and can make recommendations on how to get started.</p>

<p>There&rsquo;s no better way to learn than reading code. Sidekiq uses
Celluloid to handle the concurrency and for me, concurrency was an
afterthought. I realized this and figured by contributing, it would force me to
better understand the fundamental patterns of concurrency in Ruby.</p>

<p>I can hear the next question&hellip;how can you contribute to a codebase you want to
learn about but know nothing about?  At the time, Sidekiq&rsquo;s Web UI wasn&rsquo;t
great. Web applications are what I&rsquo;m good at, so I took it as an opportunity to
improve the Sidekiq Web UI, while I became more familiar with Sidekiq&rsquo;s
internals. I spent a few weeks <a href="https://github.com/mperham/sidekiq/contributors">playing with graphs and improving Sidekiq&rsquo;s
internal API</a> and was able to
make the Web UI significantly better than it was before I started.</p>

<p>That was the start of my contribution to Sidekiq and since then have learned
quite a bit more about what makes the system tick. It&rsquo;s by no means a straight
forward gem and probably one I wouldn&rsquo;t urge you to cut your teeth on, but
certainly a challenge and very well maintained.</p>

<h3>3. Create a new gem by extracting code that you commonly use</h3>

<p>Greenfielding Rails apps is exciting. It starts out as <code>rails new
my-awesome-new-app</code>. You boot the server only to be greeted by the default
index page. The next steps are a series of copying and pasting from previous
applications or blog posts on the subject of configuring a Rails app. Whichever
<a href="http://words.steveklabnik.com/rails-has-two-default-stacks">stack</a> you prefer,
there&rsquo;s generally a number of changes/additions that need to be made to kickstart the productivity.</p>

<p>Rather than paste in the same old code to handle &ldquo;______&rdquo; (insert your
favoritie super important feature), what better than to simply include a gem
that does it all for you. And what better person to create this gem than YOU!</p>

<p>On a previous project, I found myself calling the same view helper methods over
and over again, so I pulled it out into a
<a href="https://github.com/brandonhilkert/so_meta">gem</a> so I didn&rsquo;t have to worry
about copying the code across projects. It&rsquo;s a trivial example, but one that
can save you a lot of time and headache.</p>

<p>The ease of creating a gem is both a blessing and a curse for the community.
Ruby advocates writing code in a way that&rsquo;s modular, which tends to make
extracting that code to a gem pretty easy when done correctly. With a little
<a href="https://www.google.com/search?q=how+to+make+a+ruby+gem&amp;oq=how+to+make+a+ruby+gem">Google'ing</a>,
you can pretty quickly extract a feature that&rsquo;s already written and have it up
on RubyGems for the world to consume in no time.</p>

<h3>In summary</h3>

<p>I spent a fair amount of time trying to plot my entrace in to the Open Source
community. <a href="http://github.com">Github</a> has made it tremendously easy to not
only collaborate, but scour other products in search of code that might be
interesting to both learn and contribute to.</p>

<p>For those that write Ruby, I would urge you to avoid starting by contributing
to gems like Rails or other large codebases. Despite having plenty of work to
do, they&rsquo;re often hard to navigate and have quite a few idosyncrasies due to
their long and complex histories. It&rsquo;s also hard to know whether other people
are working on the same issue you might think is relatively trivial. There&rsquo;s
not much worse than putting in a few hard hours on a bug, only to have a pull
request fixing the same buy show up a few minutes before.</p>

<p>Start with a smaller project and figure out the path that works best for you.
Everyone is different, but that&rsquo;s what makes you so valuable to the open source
community. Work on things you love and make open source software better than
when you started.</p>

<p>What will your next open source project be?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Technology Hump]]></title>
    <link href="http://brandonhilkert.com/blog/the-technology-hump/"/>
    <updated>2013-09-23T20:16:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/the-technology-hump</id>
    <content type="html"><![CDATA[<p>For the past few years, I&rsquo;ve spent most of my waking moments either reading about or writing code. For me, it&rsquo;s about the constant pursuit of learning and getting better at my craft. In hindsight, I can say that that mentality has helped me have a leg up on the competition (for reasons I will detail in future posts).</p>

<h3>Rewind 4 years</h3>

<p>Four years ago I was writing PHP on the side for startups and just getting into software products as both a profession and hobby (more on this too&hellip;). I had reached a level of comfort with PHP where I knew I could solve just about any business problem thrown at me. This feeling was not only comforting, but empowering. Shortly after, I helped create <a href="/about">Meeteor</a>, which was written in <a href="http://rubyonrails.org/">Rails</a> and my world took turn for the better.</p>

<!--more-->


<p>Not only was I thrown into a ring of unknown, but I was handed an application that was written by contractors overseas. I won&rsquo;t go in to my feelings about outsourcing here now, but suffice it to say, this experience was less than pleasant.</p>

<p>I spent the next 2-3 weeks learning both <a href="http://www.ruby-lang.org/">Ruby</a> and Rails and largely banging my head against the wall. For me, one of the most frustrating feelings is knowing how to do something in another language/framework, but can&rsquo;t in the one your currently working with. I felt like I was moving backwards, but stuck with it because it felt like the Rails knowledge would be a big pay off going forward.</p>

<p>The next 2 years that followed were largely a blur in what seemed like crash course in creating a product and a business. I&rsquo;m grateful for this experience and believe it has better positioned me for the things I want to accomplish going forward.</p>

<h3>Where I am today</h3>

<p>Today, I&rsquo;m back at that position I was 4 years ago with PHP, but now with Ruby. I&rsquo;m confident I can solve just about anything thrown at me with the tools that I&rsquo;m now most familiar with. Rather than entrench myself with Ruby and Rails books, I&rsquo;m finding articles about retention, conversion, and idea validation more interesting.</p>

<p>I&rsquo;m by no means suggesting that I&rsquo;ve solved every problem on the internet and development is a breeze. In fact, it&rsquo;s quite the opposite. But I now feel more confident in my ability to creativity solve a problem rather than find the answer hidden behind a random <a href="http://stackoverflow.com/">Stack Overflow</a> post. Don&rsquo;t get me wrong, I still encounter challenges I&rsquo;ve never seen before, but that&rsquo;s what not only brought me to development in the first place, but one of the reasons I continue to love what I do.</p>

<p>The technology world changes at a rapid pace. There&rsquo;s a certain amount of dedication involved in staying current on your craft if you want to continue being relevant. But I no longer feel the pressure to spend every waking moment with my head in a Ruby book. Seeing other languages and frameworks emerge (here&rsquo;s looking at you <a href="http://emberjs.com/">Ember.js</a>) is exciting, but takes me back to my experience 4 years ago and the pains involved at the beginning of a learning curve.</p>

<p>I&rsquo;m excited about what&rsquo;s to come now that the technology isn&rsquo;t the most challenging element on my plate.</p>

<p>Have you had similar experiences with a change in focus after becoming more technically capable?</p>
]]></content>
  </entry>
  
</feed>
