<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-11-21T09:25:04-05:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating Rails Active Record Validation Contexts with Inheritance]]></title>
    <link href="http://brandonhilkert.com/blog/creating-rails-active-record-validation-contexts-with-inheritance/"/>
    <updated>2014-11-18T17:20:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/creating-rails-active-record-validation-contexts-with-inheritance</id>
    <content type="html"><![CDATA[<p>If you’ve used <code>validates</code> in a Rails Active Record model, you know they work great -- at least until the first bit of complexity arises. At that point, they can quickly morph in to a ball of conditional spaghetti convoluting the initial reason the validation was added in the first place.</p>




<p>I recently had an experience using <code>has_secure_password</code> where I wanted control the length of the user-supplied password. Adding a length validation to the password accessor invalidated existing records, so I was in a bit of a bind. In the end, I sub-classed the Active Record model to create a unique model made specifically for that context. This allowed me to inherit the core functionality from the model and sprinkle on existing validations for specific use cases. This was a new tactic for me and I’m still now sure how I feel about it. I like the fact that it removed complexity from the <code>User</code> model. This, in hopes, will keep the minimize the likelihood of it becoming a God object.</p>




<!--more-->




<h2>The Problem</h2>




<p>Using <code>has_secure_password</code> is a relatively easy way to add authentication to a Rails app. In order to disguise the plain text passwords, an <a href="https://github.com/rails/rails/blob/3bdf7b80a11dcb67b18553ff1fe0da82b0cffc20/activemodel/lib/active_model/secure_password.rb#L106">accessor for the plain <code>password</code></a> is added that encrypts it before saving.</p>




<p>The only true Active Record validation <code>has_secure_password</code> adds is a <a href="https://github.com/rails/rails/blob/3bdf7b80a11dcb67b18553ff1fe0da82b0cffc20/activemodel/lib/active_model/secure_password.rb#L68">confirmation of the password</a> — and only when the password is present. This allows us to create a user object without supplying a password, or maybe saving straight to the <code>password_digest</code> field, which is used to store the encrypted password in the database.</p>




<p>I wanted to enforce a minimum password length, because what good is a 1 character password (or 0 for that matter) ?!?!</p>




<p>The first thing I did was add this to the <code>User</code> model:</p>




<pre><code>validates :password, length: { minimum: 8 }
</code></pre>




<p>This works for new users, but not for those with a <code>password_digest</code> already. Attempting to updated an existing user produces the following error:</p>




<pre><code>ActiveRecord::RecordInvalid: Validation failed: Password is too short (minimum is 8 characters)
</code></pre>




<p>The next step was to conditionalize only on create:</p>




<pre><code>validates :password, length: { minimum: 8 }, on: :create
</code></pre>




<p>Except, that wasn’t right either because I’d definitely want to allow users to update their password, in which case, the length validation wouldn’t be enforced.</p>




<p>I found another <a href="http://quickleft.com/blog/rails-tip-validating-users-with-has_secure_password">post suggesting to allow <code>nil</code></a> using:</p>




<pre><code>validates :password, length: { minimum: 8 }, allow_nil: true
</code></pre>




<p>But, again, that felt weird and doesn’t read particularly well when you’re looking through the source trying to understand what condition would generate a <code>nil</code> password.</p>




<p>Other solutions included <a href="http://stackoverflow.com/a/6486345/2261909">mixing conditionals and checking model dirty state</a> and <a href="http://urgetopunt.com/rails/2012/11/12/validate-password-presence-has-secure-password.html">some combination of all of the above</a>.</p>




<p>I’m guessing some combination of the above would’ve worked, but something didn’t feel quite right. A quick glance over any of those solutions left me wanting something cleaner and more approachable. Because it’s a complex and tremendously important part of the app, I wanted to feel comfortable with the solution.</p>




<h2>The Solution</h2>




<p>I recently read <a href="https://leanpub.com/growing-rails"><em>Growing Rails Application in Practice</em></a>. The most interesting takeaway for me was the idea of sub-classing an Active Record object to exactly the problem described above.</p>




<p>Consider this…we have our <code>User</code> model with <code>has_secure_password</code>:</p>




<pre><code>class User &lt; ActiveRecord::Base
  has_secure_password
end
</code></pre>




<p>As we saw above, the variety of validation contexts made the standard ActiveModel validation awkward. What if we sub-class <code>User</code> and add the validation contexts for a specific use case? In our case, minimum length:</p>




<pre><code>class User::AsSignUp &lt; User
  validates :password, length: { minimum: 8 }
end
</code></pre>




<p>In this case, we’re create a separate model, for the purpose of signing up, and perhaps other user-related attribute management (profile, password reset, etc.).</p>




<p>Now, instead of passing the <code>User</code> model to the view from the controller, we pass an instantiated version of the new context-specific model class:</p>




<pre><code>def create
  @user = User::AsSignUp.find(current_user.id)
  …
end
</code></pre>




<p>Lastly, because the sub-class name is inferred within the form, we have to do one more thing to make the params are accessible on the <code>create</code> action using <code>params[:user]</code>. We’ll change the form from:</p>




<pre><code>&lt;%= form_for @user, url: user_confirm_path(@user.invitation_token) do |f| %&gt;
</code></pre>




<p>to:</p>




<pre><code>&lt;%= form_for @user, as: :user, url: user_confirm_path(@user.invitation_token) do |f| %&gt;
</code></pre>




<p>Because the remainder of the app operates fine without any need for the password validation, the <code>User</code> can be used where necessary and without worry of it becoming invalid because the password accessor isn’t present.</p>




<h2>Summary</h2>




<p>While sub-classing models in Rails is generally frowned upon, this use case is one of the few that felt reasonable. It feels relatively low cost and stays in isolation. I’d love to hear how you might have solved this problem. I looked and explored a handful of solutions. While others worked, none seems as expressive as the one above.</p>


<p>A form object using
<a href="http://api.rubyonrails.org/classes/ActiveModel/Model.html">ActiveModel</a> or
similar could&rsquo;ve been an alternative option. I didn&rsquo;t explore it for this
particular use case, mostly because I wanted to give this one a shot. However,
I have no doubt it would&rsquo;ve at least worked equally as well.</p>

<p>I should also point out that I&rsquo;m familiar with the built-in <a href="https://github.com/rails/rails/blob/master/activemodel/lib/active_model/validations.rb#L73">validation
contexts in ActiveModel</a>.
And for whatever reason, I&rsquo;ve not used them before. I&rsquo;ll probably give it a
shot on another occasion for comparison.</p>

<p>What are your thoughts on this technique?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Absolutes as an AntiPattern]]></title>
    <link href="http://brandonhilkert.com/blog/absolutes-as-an-antipattern/"/>
    <updated>2014-09-28T22:35:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/absolutes-as-an-antipattern</id>
    <content type="html"><![CDATA[<p>It’s been awhile since my last post — almost 2 months to be specific. A trip to Portugal, getting sick and a minor run-in with a table saw made it challenging to post anything for the last couple weeks. But I’d be lying if I said I was itching to write.</p>

<p>During that time, I didn’t have anything screaming to be talked about. I have a long list of “decent post” topics, but none of them got me particularly excited. Until today…</p>

<!--more-->


<p>I stumbled on a blog post related to Rails’s upcoming <a href="http://edgeguides.rubyonrails.org/active_job_basics.html">Active Job feature</a>. While demonstrating the syntax for specifying the adapter, there was comment in the code snippet that said <em>“inline and other worse options”</em>. This caught me by surprise and bummed me out at the same time. Not only because I’m the author of <a href="https://github.com/brandonhilkert/sucker_punch">one of them</a>, but because there are a handful of background processing libraries in Ruby that are really good.</p>

<p>So, naturally, I pinged the author and mentioned the comment might be sending the wrong message. He responded with “I consider sidekiq to be the best background processing tool available for Ruby.” And then later, <em>“sidekiq is significantly better that delayed_job and resque. You’re welcome to disagree”</em>.</p>

<p><em>Note: The responses above illustrate a general sentiment. By no means is this post focused on the individual that said them.</em></p>

<p>The thing is, I don’t completely disagree. As you probably already know, I’m a huge fan of of <a href="http://sidekiq.org/">Sidekiq</a>. I’ve contributed to the project and believe Sidekiq’s author, <a href="https://www.mikeperham.com/">Mike Perham</a> is not only a great leader in the Ruby community, but a great example of how to manage and lead open source projects well.</p>

<p>However, those responses reminded me how damaging absolutes can be. You’ve probably heard it before:</p>

<blockquote><p>“we can <strong>ABSOLUTELY NOT</strong> do x, y and z”</p></blockquote>

<p><em>Why not? Will the world end? How do I know?</em></p>

<p>or, what about:</p>

<blockquote><p>“this feature needs to go out tomorrow, no excuses”</p></blockquote>

<p><em>What if there is an excuse? What if it’s not ready? Will I be fired? Will our company go under?</em></p>

<p>There are trade-offs to every decision made. While some options may not be ideal, they may still work, perhaps just not as well.</p>

<p>Absolutes beg the toddler question, <em>”why?”</em>. <em>Why won’t that language X work?</em> <em>Why can’t we use Y?</em>. If you don’t know the answer to those questions, you’re doing yourself a disservice by not asking. Maybe the person has thoroughly researched the topic to come up with those conclusions. But, maybe, they haven’t.</p>

<p>I’ve noticed those who do exhaustive research on a topic tend to present the information in a different manner. They’re confident the facts they found will prove their case and seem to present their findings less defensively. No, <em>”it has to be done like this”</em>. More like, <em>“I found a few ways to fix the problem and here’s why I think option 1 might be the best solution. What do you think?”</em>.</p>

<p>Whether you follow agile or any other methodology, predictions and absolutes have no place in conversations. There are plenty of examples of failed software projects. I’m pretty sure all of them featured people promising the work would be done in time and under budget. Buuuuuuut, it wasn’t.</p>

<h2>Background Jobs for the Big Boys</h2>

<p>Delayed Job was the first Ruby background processing library I used. I remember feeling badass that I was doing all this complicated stuff in the background. But at some point, there we so many jobs and so much activity that pushing and pulling jobs out of the primary data store wasn’t efficient. Reads from the web UI would slow down (and ultimately stop) and users would bail. Unfortunately, I couldn’t pop up a message and say, <em>”hey, hope you don’t mind, but I’m doing some pretty crucial shit in the background here, so you’re experience is gonna be sucky for a bit! sorry :(”</em>.</p>

<p>So, at the time, Resque was the next logical transition. I migrated the previously written jobs from Delayed Job to Resque and experienced a new level of <em>bad ass</em>. Fast forward 4 years — I still work on projects using Resque. Needless to say, it’s a pretty awesome piece of open source software.</p>

<p>A few years ago, Sidekiq came along. While I didn’t know much about multi-threading code in Ruby, I tried it on a side project and was floored at the results. Those 6 Heroku workers that I’d been paying for could be compacted in to 1?!?! And on top of that, I only needed 1 worker that had 25 workers working against the queue?!?!</p>

<p>But then one day, I dropped it in to a project that was using MongoDB and MongoMapper as ORM and things didn’t go so well. In the end, MongoMapper wasn’t thread-safe, which is a requirement of Sidekiq worker code. So in that case, was Sidekiq the best tool for the job? While I would’ve loved to use Sidekiq on that project, it certainly (like the absolute there…) wasn’t the right tool for <em>that</em> job.</p>

<p>And what about when I first started with Delayed Job…we were a small startup with limited cash. While it seems silly to balk over an extra $35 Heorku dyno, it was $35 that could’ve gone towards something else. Not to mention the extra Redis instance, along with the expertise to make sure the thing didn’t fall over and die. Was Sidekiq (or Resque for that matter) the best tool for that job? Nope!</p>

<p>Fast forward a few years, I had the need for an in-process background processing library, so <a href="http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem/">I wrote one</a>. That need was driven off the motivation above — needing to minimize cost and complexity. Would Sidekiq have worked for that project? Of course! In fact, it was using Sidekiq for a year or so before I transitioned the jobs to use Sucker Punch.</p>

<h2>Use Cases</h2>

<p>At this point, you should be noticing a trend, right? The examples above were unique use cases with a unique set of requirements and limitations. Sure, if every project I worked on had unlimited resources (both time and money), Sidekiq would be probably be my go-to the majority of time (even when writing that sentence I hesitated and almost wrote “all the time”).</p>

<p>But I hesitate now. Because I remember learning about the new cool things and thinking, <em>”This is the best! There’s no way I’ll never not use it”</em>. And when I would talk to other developers, I would rave about how <em>X</em> is the best for <em>Y</em>. And now I realize I was a dummy for doing that. There’s no way I could’ve made that judgement for someone else and their work. What I really should’ve said was, <em>”I tried [insert fancy new gem/technique] for the first time the other day. It worked really well for doing X in my project that does Y”</em>. That definitely doesn’t sound as exciting, but it was the truth.</p>

<p>I feel fortunate to get to write Ruby everyday. It’s incredibly expressive, which is why the debate over the countless ways to do something is great. Does the code express the right intent? For your method, it might. But for mine, it might express the complete opposite. The good news is, that’s OK. Both versions will work and the fact that we can have conversations like that is a praise for the language itself. I prefer to have the opportunity to have that conversation about style, rather than a language more black and white. Maybe it’s the creative in me, but it seems like no 2 Ruby solutions will be identical and that’s one of the things I love most about writing Ruby.</p>

<p>We often joke about the stack overflow post that starts with <em>“I’m thinking about learning Rails…is it better than PHP?”</em>. Or even more relevant today, <em>”Which javascript framework should I use?”</em>.</p>

<p>And then there’s the guy who comes along and is all like, <em>”Let’s back up, what are you doing and why do you absolutely need a FRAMEWORK????”</em>. While I used to ignore those types of comments, they’re the kind that I think about now and find myself typing. And that has me wondering…why the change?</p>

<h2>Experience, Experience, Experience</h2>

<p>I got to thinking about how I felt when I was first learning to program. When I started to feel comfortable with Rails, my confidence was through the roof. But at the same time, my naivety was at an all time high. I had had minimal experiences with software systems that were either critical or heavily-loaded. But having found Resque, I felt like I could solve the world’s problems. This is somewhat of an exaggeration, but not too far off. I realized that, as it relates to my technical career, my naivety is doing this related to time:</p>

<p><img class="center" src="/images/absolutes/naivety-graph.png" title="&ldquo;Graph of Naivety over Time&rdquo;" ></p>

<p>The less naivety, the more options and, naturally, certainty takes a nose dive:</p>

<p><img class="center" src="/images/absolutes/certainty-graph.png" title="&ldquo;Graph of Certainty over Time&rdquo;" ></p>

<p>The more I learn about programming in general, the more questions I have. Fortunately, experiences have brought me to a point where I can fairly weigh the use of Sucker Punch or Delayed Job for a particular use case. I’m not sure projecting absolutes from up high does anyone any good. Beginners will take it as the word and spread the message to others they come across.</p>

<p>Use cases are real. And the less we force our own biases on people, the faster they’ll realize experience is key and the random guy behind the cat avatar on Stack Overflow might actually be asking the right questions — even if they are convoluted.</p>

<p>Next time you hear an absolute, ask <em>”Why?”</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Logic from a Rails View]]></title>
    <link href="http://brandonhilkert.com/blog/refactoring-logic-from-a-rails-view/"/>
    <updated>2014-07-30T06:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/refactoring-logic-from-a-rails-view</id>
    <content type="html"><![CDATA[<p>It’s generally known that leaving any kind of logic in a Rails view is bad news, both for debugging and your own sanity. Rails views can be cumbersome to test and leave a lot to be desired when it comes to debugging.</p>

<!--more-->


<p>I recently went through the process of refactoring a Rails view that included logic. The end result was an isolated <a href="http://blog.jayfields.com/2007/10/ruby-poro.html">PORO</a> that was easily integrated with the controller/view.</p>

<h2>Background</h2>

<p>The app I’m currently working on is a greenfield app with vague specs, at best. I don’t mention this to fault anyone, but more to illustrate a point. Not all greenfield projects have well-defined specs.</p>

<p>In this particular case, the stakeholders were somewhat unsure of what the interface should look like. Together, we tossed around a number of ideas, ultimately leading to a few options. Only once an iteration of the UI was available, would we have a clear picture of whether it <em>felt right</em>.</p>

<h2>The Problem</h2>

<p>I implemented the first option in the most crude way I could think of. Unfortunately, that way involved putting logic in the view. I know, I know — I can hear it now, <em>”C’mon Brandon, everyone knows you shouldn’t do this!”</em>. Here’s the thing — I knew it too.</p>

<p>Here’s what I ended up with:</p>

<p>```</p>

<h1>controller</h1>

<p>def people
  @week_of = params[:week_of] || Checkin::Week.recent(current_company).first.beginning
  @people = current_user.reports
end</p>

<h1>view</h1>

<p>&lt;% @people.each do |person| %>
  &lt;% checkin = person.checkin_for(@week_of) %>
  <tr></p>

<pre><code>&lt;td&gt;
  &lt;%= profile_picture person %&gt;
  &lt;%= person %&gt;
&lt;/td&gt;

&lt;td&gt;
  &lt;%= checkin_status(checkin) %&gt;
&lt;/td&gt;
</code></pre>

<p>  </tr>
&lt;% end %>
```</p>

<p>For each iteration of <code>@people</code>, I looked up the check-in for that particular week from the model:</p>

<p><code>
def checkin_for(week_of)
  Checkin.find_by(user_id: id, week_of: week_of)
end
</code></p>

<p>This crosses concerns, blurs responsibility — all the things that bad Rails app are made of. But I was doing this knowing it would either be entirely ripped out (we’d change the UI altogether), or refactored to something better.</p>

<p><em>Note: I could’ve just saved myself one step and never made the method in the model. For some reason, that made me feel better about it at the time. *shrugs*</em></p>

<p>So I added a Github issue and went on my way…</p>

<p><img class="center" src="/images/view-refactor/gh-issue.png" title="&ldquo;Github issue to refactor Rails view&rdquo;" ></p>

<h2>The Solution</h2>

<p>With a few minor tweaks, this implementation of the functionality and UI was adequate. So as time allowed, I jumped back in to untangling the mess I created.</p>

<p>The biggest variable in the display of a <code>Checkin</code> was the week (a date field corresponding to the beginning of that particular week). Once the date was known, I could look for a <code>Checkin</code> for each user in my visibility, see if it existed, and if not, return a stand-in object to represent a non-completed check-in.</p>

<p>I removed the model method:</p>

<p><code>
def checkin_for(week_of)
  Checkin.find_by(user_id: id, week_of: week_of)
end
</code></p>

<p>and the line in the view largely responsible for the mess:</p>

<p><code>
&lt;% checkin = person.checkin_for(@week_of) %&gt;
</code></p>

<p>I went back to the controller and initialized a new object that would allow me to iterate over a list of check-ins:</p>

<p><code>
def people
  @week_of = params[:week_of] || Checkin::Week.recent(current_company).first.beginning
  @reports = Checkin::Reports.new(current_user, @week_of)
end
</code></p>

<p>Let’s dig in to the new <code>Checkin::Reports</code> class…</p>

<p>```
class Checkin
  class Reports</p>

<pre><code>def initialize(user, week_of)
  @user, @week_of = user, week_of
end

def checkins
  reports.map { |person|
    Checkin.find_or_initialize_by(user_id: person.id, week_of: week_of)
  }
end

private

attr_reader :user, :week_of

def reports
  user.reports
end
</code></pre>

<p>  end
end
```</p>

<p>I instantiate with the user and week, similar to what the <code>checkin_for</code> model method did above.</p>

<p>The only relatively interesting part of this class is that it’s using <code>find_or_intialize_by</code>. It turns out that the view didn’t care if the object was <code>nil</code>, or just a non-persisted <code>Checkin</code> object. All it did was interrogate certain attributes of the object, and guard against the argument being <code>nil</code>. From that perspective, we’ve improved our code even more because now instead of supplying nil to the helper, we are actually supplying it with a newly instantiated <code>Checkin</code> with some default attributes.</p>

<p>This means that our <code>checkin_status</code> helper, went from:</p>

<p>```
def checkin_status(checkin)
  if checkin &amp;&amp; checkin.completed_at?</p>

<pre><code>fa_icon("check-square-o", class: "green") + " Submitted #{local_time checkin.completed_at, format: :short_month_day }".html_safe
</code></pre>

<p>  else</p>

<pre><code>fa_icon("warning", class: "yellow") + " Not completed"
</code></pre>

<p>  end
end
```</p>

<p>to:</p>

<p>```
def checkin_status(checkin)
  if checkin.completed_at?</p>

<pre><code>fa_icon("check-square-o", class: "green") + " Submitted #{local_time checkin.completed_at, format: :short_month_day }".html_safe
</code></pre>

<p>  else</p>

<pre><code>fa_icon("warning", class: "yellow") + " Not completed"
</code></pre>

<p>  end
end
```</p>

<p>It’s a subtle change (removing the check <code>if checkin</code> from the first conditional), but one that’s less susceptible to bizarre edge cases. And clearer — It’s reasonable to expect that by calling the first argument <code>checkin</code>, <strong>the variable should be a <code>Checkin</code></strong>, and not sometimes <code>nil</code>.</p>

<p>Returning back to the view…using the new <code>@reports</code> variable, we no longer have to query during each iteration:</p>

<p>```
&lt;% @reports.checkins.each do |checkin| %>
  <tr></p>

<pre><code>&lt;td&gt;
  &lt;%= profile_picture checkin.user %&gt;
  &lt;%= checkin.user %&gt;
&lt;/td&gt;

&lt;td&gt;
  &lt;%= checkin_status(checkin) %&gt;
&lt;/td&gt;
</code></pre>

<p>  </tr>
&lt;% end %>
```</p>

<p>Tests pass, and we’re in a much better place than we were before.</p>

<h2>Summary</h2>

<p>I’ve seen a lot of people make notes for themselves to improve areas of their application and either never get the opportunity to go back and do so, or get so far removed from the mess, they forget about how bad it was in the first place. The approach I took above by making a note for myself worked because <strong>I knew</strong> I would go back to it. It’s possible this may not work for everyone.</p>

<p>If it takes more than just making a Github issue for your and your team, find what works. The important part is that the refactor takes place, in whatever way convenient for you.</p>

<p>The idea of not putting logic in a Rails view is well regarded as a best practice. Don’t think that just because I did it above, I’m advocating that it’s ok. To me, it’s only acceptable if you go back at a later time (soonish…) and clean it up.</p>

<p>Leaving little bits of bad practice sprinkled all of your app is heading of for a bad time. As <a href="http://sandimetz.com/">Sandi Metz</a> says, <a href="http://www.confreaks.com/presenters/211-sandi-metz">“go ahead, make a mess”</a>. Just be sure to come back and clean it up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem - Ruby Heroes]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-ruby-heroes/"/>
    <updated>2014-07-09T06:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-ruby-heroes</id>
    <content type="html"><![CDATA[<p>It’s been 3 months since the release of <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes"><em>Build a Ruby Gem</em></a> and I’ve gotten tremendous feedback since the launch.</p>

<p>I’ve love to share some news and an opportunity to win a <strong>FREE</strong> copy of the book. If you’ve already purchased the book, don’t worry, we’ll find a way to make it worth it for you.</p>

<!--more-->


<h2>Feedback</h2>

<p>The two questions I’ve heard the most since the release of the <a href="http://brandonhilkert.com/courses/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">email course</a> and <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">book</a> are:</p>

<ol>
<li><p>Why should I get involved with open source software?</p></li>
<li><p>How do I get started contributing to an open source project?</p></li>
</ol>


<h2>Benefits of Getting Involved</h2>

<p>Participating in open source projects is an enlightening experience. The benefits are widespread and different for each developer. Speaking personally, I’ve learned a ton from the codebases I’ve gotten involved with. Learning was the primary reason I got involved in the first place.</p>

<p>Going beyond the learning aspect, my open source contributions have resulted in several <strong>jobs offers</strong>, among other things. It’s easy to think that getting involved is only just about doing good for the community — but it’s <strong>bigger than that</strong>.</p>

<p>I could go on and on, but it’s likely you’ve already heard me talk about this through my post on <a href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">ways to get started contributing to open source</a> or the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">open source chapter in <em>Build a Ruby Gem</em></a>.</p>

<h2>Hear It From Others in the Community</h2>

<p>Hearing other people’s stories has always had a profound effect on my comfort-level when approaching things I’m unfamiliar with. So with that being said, I want you to hear the answers to the questions above from those YOU look up to in the Ruby community.</p>

<p>This person could be the author of your favorite gem or Matz himself (disclaimer: I may or may not be able to make this one happen…). Either way, I’ll do my best to have live interview chats with your favorite Rubyists and dig through their experience and thoughts on the community and software in general.</p>

<p><em>Entries have closed for the giveaway.</em></p>

<p>Submissions will be open until <strong>5:00pm EDT on Friday, July 11</strong>. I’ll announcement the winner shortly thereafter.</p>

<p>Even if you don’t win, I’ll send everyone that submits a response a <strong>20% discount code</strong> for any package of <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes"><em>Build a Ruby Gem</em></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minitest Helper Includes and Rails Fixtures]]></title>
    <link href="http://brandonhilkert.com/blog/managing-login-passwords-for-capybara-with-minitest-and-rails-fixtures/"/>
    <updated>2014-06-25T06:10:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/managing-login-passwords-for-capybara-with-minitest-and-rails-fixtures</id>
    <content type="html"><![CDATA[<p>Contuining my <a href="/blog/7-reasons-why-im-sticking-with-minitest-and-fixtures-in-rails/">love affair with Minitest and fixtures</a>, I wanted to dive in to something deeper this time. Switching tools takes time to get used to and managing passwords was one of the bigger headaches I encountered.</p>

<!--more-->


<h2>The Problem</h2>

<p>I wanted to use <a href="https://github.com/jnicklas/capybara">Capybara</a> for integration testing. The application uses the standard email/password combo to authenticate users via <a href="http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password"><code>has_secure_password</code></a>.</p>

<p>Because plain text passwords are not stored in the database, but rather a <a href="https://github.com/rails/rails/blob/3bdf7b80a11dcb67b18553ff1fe0da82b0cffc20/activemodel/lib/active_model/secure_password.rb#L112"><code>password_digest</code></a>, I didn’t have a good way to fill in the login forms using Capybara to test against pages that require authentication.</p>

<h2>The Solution</h2>

<p>I started with a simple <code>users.yml</code> fixture that looked like this:</p>

<p><code>
fred:
  first_name: Fred
  last_name: Flintstone
  email: fred@flintstone.com
  title: CEO
  company: flintstone
  admin: true
</code></p>

<h3>Bcrypt</h3>

<p>As mentioned above, <code>has_secure_password</code> uses <code>Bcrypt</code> to encrypt the plain text passwords provided. The specific implementation to create the password digest is:</p>

<p><code>
BCrypt::Password.create("password", cost: 4)
</code></p>

<p>This method takes the plain text password (“password”) and encrypts it with what it calls the “cost”. It’s not terribly important for this article, but to save some speed, I’ve specified a cost of 4 — <a href="https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/engine.rb#L7">the minimum cost support by the <code>Bcrypt</code> algorithm</a>. The default is 10, which will make your production applications safer. However, for testing, we don’t care.</p>

<p>The result of the method above looks like this:</p>

<p><code>
irb(main):001:0&gt; require "bcrypt"
=&gt; true
irb(main):002:0&gt; BCrypt::Password.create("password", cost: 4)
=&gt; "$2a$04$gw09FM67MDnzduXmlK46BOsdVTtzWKaSIkAdmnF/sJSLgcQhJBAUe"
</code></p>

<p>That output value is what’s being stored in our database when a user inputs and saves a password. From the application’s standpoint, we could print a value like this in to our fixtures, but what’s the fun in that?!?!</p>

<h3>ERB in Fixtures</h3>

<p>Since fixtures allow us to use ERB in them, we could provide the <code>Bcrypt</code> method above to produce the password digest like so:</p>

<p><code>
fred:
  first_name: Fred
  last_name: Flintstone
  email: fred@flintstone.com
  password_digest: &lt;%= BCrypt::Password.create("password", cost: 4) %&gt;
  title: CEO
  company: flintstone
  admin: true
</code></p>

<p>The downside is that the actual password (“password”) is here in plain text. To fill in our login form using Capybara, we don’t have a variable to access to the get the password — we literally have to type “password”. So this isn’t the most DRY thing in the world. While it would certainly work, I think we can do better…</p>

<h3>Capybara</h3>

<p>Let’s say I have a test that looks like this:</p>

<p><code>
visit signin_path
fill_in "email", with: user.email
fill_in "password", with: "password"
click_on "Sign in"
</code></p>

<h3>Extract a Module</h3>

<p>Our goal was to not sprinkle these plan text passwords all over the place. So let’s extract a module call <code>TestPasswordHelper</code> and put the plain text password in there:</p>

<p>```
require &ldquo;bcrypt&rdquo;</p>

<p>module TestPasswordHelper
  def default_password_digest</p>

<pre><code>BCrypt::Password.create(default_password, cost: 4)
</code></pre>

<p>  end</p>

<p>  def default_password</p>

<pre><code>"password"
</code></pre>

<p>  end
end
```</p>

<p>We’ll have our default password accessible via a method named…get this, <code>default_password</code>! The module also contains a method (<code>default_password_digest</code>) that will allow us to send the password digest to the fixture using the Bcrypt algorithm we explored above.</p>

<p>Now that we have a helper module ready all set up, we add the following to our <code>test/test_helper.rb</code> to make these methods accessible in our tests:</p>

<p>```
require &ldquo;support/test_password_helper&rdquo;</p>

<p>class ActiveSupport::TestCase
  include TestPasswordHelper
end
```</p>

<p>With these methods mixed in, we can update our Capybara test to use the <code>default_password</code> method:</p>

<p><code>
visit signin_path
fill_in "email", with: user.email
fill_in "password", with: default_password
click_on "Sign in"
</code></p>

<h3>Helpers in Fixtures</h3>

<p>Unfortunately, those helpers aren’t available in the fixtures.</p>

<p><code>ActiveRecord::FixtureSet</code> is the class that gives our fixtures life. We can use Ruby to include functionality from our test helper, that will give us access to to the <code>default_password_digest</code> method, which reads our <code>default_password</code> so we don’t have to type it out.</p>

<p>The <a href="http://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html#method-c-context_class">Rails API guide for fixtures</a> states that helper methods should be added to <code>ActiveRecord::FixtureSet.context_class</code>.</p>

<p>So back in our <code>test_helper.rb</code>, we can mix in our test helpers methods like so:</p>

<p><code>
ActiveRecord::FixtureSet.context_class.send :include, TestPasswordHelper
</code></p>

<p>Now, back in our <code>users.yml</code> fixture, we can use the new <code>default_password_digest</code> method:</p>

<p><code>
fred:
  first_name: Fred
  last_name: Flintstone
  email: fred@flintstone.com
  password_digest: &lt;%= default_password_digest %&gt;
  title: CEO
  company: flintstone
  admin: true
</code></p>

<p>We can now run our tests and verify the fixtures properly insert the digest using the default password and the Capybara tests reference that same default password.</p>

<p>Now, if in the future we wanted use a different password for some reason, we’d only have one place to change it, and the rest of the system would follow along.</p>

<h2>Summary</h2>

<p>One of the things I’m constantly reminding myself during this process is whenever I have a problem, to step back and think about ways the Ruby language can help solve it rather than looking for some special sauce or gem to get me through the turmoil. Minitest is just Ruby — as most other gems are. Minitest generally provides enough utility to get us through the bigger use cases, but when it comes to special cases, it’s not there to hold our hand. That’s when we put our big boy pants on and make use of the language we’ve all come to know and love — Ruby!</p>
]]></content>
  </entry>
  
</feed>
