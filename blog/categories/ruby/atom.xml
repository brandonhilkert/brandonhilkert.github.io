<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2015-03-18T20:38:31-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding Functionality to Ruby Classes with Decorators]]></title>
    <link href="http://brandonhilkert.com/blog/adding-functionality-to-ruby-classes-with-decorators/"/>
    <updated>2015-03-09T15:37:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/adding-functionality-to-ruby-classes-with-decorators</id>
    <content type="html"><![CDATA[<p>In my <a href="http://brandonhilkert.com/blog/using-the-sucker-punch-ruby-gem-to-cache-stripe-data-in-rails/">last article</a>, I presented some code that wrapped up accessing a customer&rsquo;s Stripe data and added a caching layer on top. I wanted to take some time to dig in to that code and see how we can make it better.</p>

<p>Decorators give us a tool to add additional functionality to a class while still keeping the public API consistent. From the perspective of the client, this is a win-win! Not only do they get the added behavior, but they don&rsquo;t need to call different methods to do so.</p>

<!--more-->


<h2>The Problem</h2>

<p>Our original class accessed data from Stripe <strong>AND</strong> cached the response for some time period. I accentuated &ldquo;AND&rdquo; because it&rsquo;s generally the word to be on alert for when considering whether functionality can be teased apart in to separate responsibilities.</p>

<p>The question becomes, can we make one class that accesses Stripe data, and another that&rsquo;s only responsible for caching it?</p>

<p>Of course we can!</p>

<h2>The Solution</h2>

<p>Let&rsquo;s start with the most basic form of accessing our Stripe customer data with the <a href="https://github.com/stripe/stripe-ruby">Stripe gem</a>:</p>

<p>```
class AccountsController &lt; ApplicationController
  before_action :require_authentication</p>

<p>  def show</p>

<pre><code>@customer = Stripe::Customer.retrieve(current_user.stripe_id)
@invoices = @customer.invoices
@upcoming_invoice = @customer.upcoming_invoice
</code></pre>

<p>  end
end
```</p>

<h2>Extract an Adapter</h2>

<p>Because we&rsquo;re interfacing with a third-party system (Stripe), it makes sense for to create a local adapter to access the Stripe methods. It&rsquo;s probably not likely we&rsquo;re going to switch out the official Stripe gem for another one that access the same data, but a better argument might be that we could switch billing systems entirely in the future. And if we make a more generic adapter to our third-party billing system, we would only need to update our adapter when that time comes.</p>

<p>While the adapter optimization may seem like overkill here, we&rsquo;ll see how that generic adapter helps us implement our caching layer shortly.</p>

<p>Let&rsquo;s start by removing the notion that it&rsquo;s Stripe and all and call it <code>Billing</code>. Here we can expose the methods needed from the  <code>AccountsController</code> above:</p>

<p>```
class Billing
  attr_reader :billing_id</p>

<p>  def initialize(billing_id)</p>

<pre><code>@billing_id = billing_id
</code></pre>

<p>  end</p>

<p>  def customer</p>

<pre><code>Stripe::Customer.retrieve(billing_id)
</code></pre>

<p>  end</p>

<p>  def invoices</p>

<pre><code>customer.invoices
</code></pre>

<p>  end</p>

<p>  def upcoming_invoice</p>

<pre><code>customer.upcoming_invoice
</code></pre>

<p>  end
end
```</p>

<p>There we have it. A simple <code>Billing</code> class that wraps the methods that we used in the first place &mdash; no change in functionality. But certainly more organized and isolated.</p>

<p>Let&rsquo;s now use this new class in the accounts controller from earlier:</p>

<p>```
class AccountsController &lt; ApplicationController
  before_action :require_authentication</p>

<p>  def show</p>

<pre><code>billing = Billing.new(current_user.stripe_id)

@customer = billing.customer
@invoices = billing.invoices
@upcoming_invoice = billing.upcoming_invoice
</code></pre>

<p>  end
end
```</p>

<p>Not too bad! At this point we&rsquo;ve provide the exact same functionality we had before, but we have a class that sits in the middle between the controller and Stripe gem &ndash; an adapter if you will.</p>

<h2>Create a Decorator</h2>

<p>Now that we have our adapter set up, let&rsquo;s look at how we can add caching behavior to improve the performance of our accounts page.</p>

<p>The most of basic form of a decorator is to pass in the object we&rsquo;re decorating (<code>Billing</code>), and define the same methods of the billing, but add the additional functionality on top of them.</p>

<p>Let&rsquo;s create a base form of  <code>BillingWithCache</code> that <strong>does nothing more</strong> than call the host methods:</p>

<p>```
class BillingWithCache
  def initialize(billing_service)</p>

<pre><code>@billing_service = billing_service
</code></pre>

<p>  end</p>

<p>  def customer</p>

<pre><code>billing_service.customer
</code></pre>

<p>  end</p>

<p>  def invoices</p>

<pre><code>customer.invoices
</code></pre>

<p>  end</p>

<p>  def upcoming_invoice</p>

<pre><code>customer.upcoming_invoice
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  attr_reader :billing_service
end
```</p>

<p>So while we haven&rsquo;t added any additional functionality, we have created the ability for this class to be used in place of our existing <code>Billing</code> class because it responds to the same API (<code>#customer</code>, <code>#invoices</code>, <code>#upcoming_invoice</code>).</p>

<p>Integrating this new class with <code>AccountsController</code> looks like:</p>

<p>```
class AccountsController &lt; ApplicationController
  before_action :require_authentication</p>

<p>  def show</p>

<pre><code>billing = BillingWithCache.new(Billing.new(current_user.stripe_id))

@customer = billing.customer
@invoices = billing.invoices
@upcoming_invoice = billing.upcoming_invoice
</code></pre>

<p>  end
end
```</p>

<p>As you can see, we only had to change one line &mdash; the line where we decorated the original billing class:</p>

<p><code>
BillingWithCache.new(Billing.new(current_user.stripe_id))
</code></p>

<p>I know what you&rsquo;re thinking, &ldquo;But it doesn&rsquo;t actually cache anything!&rdquo;. You&rsquo;re right! Let&rsquo;s dig in to the <code>BillingWithCache</code> class and add that.</p>

<h2>Adding Caching Functionality</h2>

<p>In order to cache data using <code>Rails.cache</code>, we&rsquo;re going to need a cache key of some kind. Fortunately, the original <code>Billing</code> class provides a reader for <code>billing_id</code> that will allow us to make this unique to that user.</p>

<p><code>
def cache_key(item)
  "user/#{billing_id}/billing/#{item}"
end
</code></p>

<p>In this case, <code>item</code> can refer to things like <code>"customer"</code>, <code>"invoices"</code>, or <code>"upcoming_invoice"</code>. This gives us a method we can use internally with <code>BillingWithCache</code> to provide a cache key unique to the both the user and the type of data we&rsquo;re caching.</p>

<p>Adding in the calls to actually cache the data:</p>

<p>```
class BillingWithCache
  def initialize(billing_service)</p>

<pre><code>@billing_service = billing_service
</code></pre>

<p>  end</p>

<p>  def customer</p>

<pre><code>key = cache_key("customer")

Rails.cache.fetch(key, expires: 15.minutes) do
  billing_service.customer
end
</code></pre>

<p>  end</p>

<p>  def invoices</p>

<pre><code>key = cache_key("invoices")

Rails.cache.fetch(key, expires: 15.minutes) do
  customer.invoices
end
</code></pre>

<p>  end</p>

<p>  def upcoming_invoice</p>

<pre><code>key = cache_key("upcoming_invoice")

Rails.cache.fetch(key, expires: 15.minutes) do
  customer.upcoming_invoice
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  attr_reader :billing_service</p>

<p>  def cache_key(item)</p>

<pre><code>"user/#{billing_service.billing_id}/billing/#{item}"
</code></pre>

<p>  end
end
```</p>

<p>The code above caches the call to each of these methods for 15 minutes. We could go further and move that to an argument with a default value, but I&rsquo;ll leave as an exercise for another time.</p>

<h2>Summary</h2>

<p>Separating your application and third-party services helps keeps your applications flexible &mdash; offering the freedom to switch to another service when one no longer fits the bill.</p>

<p>Another benefit of an adapter is you have the freedom to name the class and methods whatever you like. The base gem for a service might not have the best names, or it may be that the names don&rsquo;t make sense when dragged in to your application&rsquo;s domain. This is a small but important point as applications get larger and its code more complex. The more variable/method names you need to think about when you poke around the code, the harder it&rsquo;ll be to remember what was going on. Not to mention the pain new developers will have if they acquire the code. Whether it&rsquo;s you or the next developer, the time you invest in creating great names will be greatly appreciated.</p>

<p>Using decorators in this way makes it easier for clients of the code to avoid change, but keep your applications flexible. The <code>Billing</code> class above was relatively simple &mdash; intentionally so. If the class being decorated has more than a few methods, it might be worth incorporating <code>SimpleDelegator</code> to ensure the methods that don&rsquo;t need additional functionality still continue to respond appropriately.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Sucker Punch Ruby Gem to Cache Stripe Data in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/using-the-sucker-punch-ruby-gem-to-cache-stripe-data-in-rails/"/>
    <updated>2015-02-26T20:46:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/using-the-sucker-punch-ruby-gem-to-cache-stripe-data-in-rails</id>
    <content type="html"><![CDATA[<p>With so many services available these days, it&rsquo;s almost impossible to find or build an application that doesn&rsquo;t rely on a third-party service. Most developers that have dealt with billing systems within the past few years have likely heard of <a href="https://stripe.com/">Stripe</a>. Stripe is, by far, the most developer-friendly billing service I&rsquo;ve implemented.</p>

<p>While Stripe does provide a number of features and plugins that make updating a credit card or signing up for a service simple, there are occasions when data needs to be fetched from Stripe in real-time. For these cases, it&rsquo;s great to be able to fetch and cache this data before-hand, and only expire if you know there&rsquo;s been a change.</p>

<!--more-->


<p>Combining <a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> with Rails cache allows you to cache Stripe customer data so that billing pages are just as snappy as the rest of the application.</p>

<h2>The Pain</h2>

<p>Even though Stripe is generally pretty fast, retrieving customer data on the fly can be expensive. In order to optimize page load times, we can look to cache this data before it&rsquo;s actually used.</p>

<p>If you&rsquo;re familiary with the Stripe gem, you&rsquo;ve probably seen something like this:</p>

<p><code>
customer = Stripe::Customer.retrieve(user.stripe_id)
</code></p>

<p>With the response of <code>customer</code>, we can further query customer data with the following methods:</p>

<p><code>
invoices = customer.invoices
upcoming_invoices = customer.upcoming_invoices
</code></p>

<p>If we make all 3 of these method calls on page load, we&rsquo;d have 3 separate lookups from Stripe. This is pretty common for the typical billing page where you might want to show the customer&rsquo;s current credit card on file, their past invoices, and charges they can expect for the next invoice.</p>

<p>Three lookups like this could potentially add another second or so to page load, which is not ideal.</p>

<p>So how can we improve this?</p>

<h2>The Solution</h2>

<p>First, we can move the code to fetch the relevant stripe data in to a class of it&rsquo;s own, which wraps the notion of caching around the data retrieval.</p>

<p>```
class StripeCache
  def initialize(user)</p>

<pre><code>@user = user
</code></pre>

<p>  end</p>

<p>  def refresh</p>

<pre><code>purge_all
cache_all
self
</code></pre>

<p>  end</p>

<p>  def customer</p>

<pre><code>return @customer if @customer

@customer = Rails.cache.fetch(cache_key("customer"), expires: 15.minutes) do
  Stripe::Customer.retrieve(user.stripe_id)
end
</code></pre>

<p>  end</p>

<p>  def invoices</p>

<pre><code>Rails.cache.fetch(cache_key("invoices"), expires: 15.minutes) do
  customer.invoices
end
</code></pre>

<p>  end</p>

<p>  def upcoming_invoice</p>

<pre><code>Rails.cache.fetch(cache_key("upcoming_invoice"), expires: 15.minutes) do
  customer.upcoming_invoice
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  attr_reader :user</p>

<p>  def cache_all</p>

<pre><code>customer
invoices
upcoming_invoice
</code></pre>

<p>  end</p>

<p>  def purge_all</p>

<pre><code>Rails.cache.delete_matched("#{user.id}/stripe")
</code></pre>

<p>  end</p>

<p>  def cache_key(item)</p>

<pre><code>"user/#{user.id}/stripe/#{item}"
</code></pre>

<p>  end
end
```</p>

<p>To use this on a billing page, we could do:</p>

<p><code>
stripe = StripeCache.new(current_user).refresh
</code></p>

<p>And from the response of that class, we could access the <code>customer</code>, <code>invoices</code>, and <code>upcoming_invoice</code> respectively:</p>

<p><code>
@customer = stripe.customer
@invoices = stripe.invoices
@upcoming_invoice = stripe.invoices
</code></p>

<p>This is great! All future calls to this customer&rsquo;s Stripe data will be fast &mdash; for 15 minutes, of course.</p>

<p>However, the first time the page is load, the user is still burdened with the initial fetch of the data. So the method above works for every request to the billing page after the first.</p>

<p>But let&rsquo;s be honest, what users are going to the billing page multiple times during a session? Probably not many. So we still need to fix the initial load somehow.</p>

<p>This is where <a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> comes in. Like other Ruby background processing libraries, Sucker Punch allows you to move the processing of code to the background. However, unlike the others, Sucker Punch doesn&rsquo;t require additional infrastructure like Redis, and doesn&rsquo;t require a separate worker process to monitor and execute enqueued jobs. Because of this, the time it takes to extract code to a Sucker Punch job and have it incorporated with your application code is much lower.</p>

<p>In this case, rather than send a transactional email or perform some database calculation, we can write a job thats only responsibility is to run the Stripe caching code.</p>

<p>```
class StripeCacheJob
  include SuckerPunch::Job</p>

<p>  def perform(user)</p>

<pre><code>StripeCache.new(user).refresh
</code></pre>

<p>  end
end
```</p>

<p>The next question is, when do you run this?</p>

<p>Well, I chose to run it on user login, but you could run it anywhere you think would give you a head start if the user were about to go to the billing page. In my case, on login meant that if they didn&rsquo;t go to the billing page at all, after 15 minutes the data would be exhausted from the cache anyway, so no hard done.</p>

<p>But if the user did navigate to the billing page during that session, they would have up the latest Stripe customer and invoice data to see &mdash; all without a request to stripe on page load.</p>

<p>One other thing to keep in mind is there may be times when we&rsquo;d want invalidate the Rails cache data. One example would be when the user&rsquo;s card information is updated. In that case, we can slip in another call to the Stripe cache job, which would invalidate the previous cache and re-request the customer&rsquo;s billing information:</p>

<p>```
module Accounts
  class CardsController &lt; ApplicationController</p>

<pre><code>before_action :require_authentication

def create
  cust = StripeCache.new(current_user).customer
  cust.save(card: params[:stripeToken])

  StripeCacheJob.new.async.perform(current_user)

  redirect_to account_path, notice: t("card.update.success")
end
</code></pre>

<p>  end
end
```</p>

<h2>Summary</h2>

<p>Using Sucker Punch in combination with Rails cache feels like a great way make optimizations to third-party data requests. This article focused on using it to fetch Stripe data, but it could be used with another service just as easily.</p>

<p>The beauty of Sucker Punch is that it doesn&rsquo;t require a separate worker process to be running in the background. On a platform like Heroku, this saves the cost of an additional dyno.</p>

<p>Sucker Punch excels at background jobs that are relatively fast and if missed,
wouldn&rsquo;t be critical to the operation. In this case, if a cache job is lost,
it&rsquo;s not the end of the world. At worst, the user&rsquo;s Stripe data would be requested on the fly and the page would be slower than usual. But the majority of the time, the request is fast because the data&rsquo;s been cached beforehand.</p>

<p>What other jobs have you used Sucker Punch for?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Rails Fixtures To Seed a Database]]></title>
    <link href="http://brandonhilkert.com/blog/using-rails-fixtures-to-seed-a-database/"/>
    <updated>2015-02-04T06:13:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/using-rails-fixtures-to-seed-a-database</id>
    <content type="html"><![CDATA[<p>It’s no mystery that <a href="/blog/7-reasons-why-im-sticking-with-minitest-and-fixtures-in-rails/">I’ve grown to love Rails fixtures</a>. And I tend to mostly use relational databases in my applications, <a href="/blog/rails-gemfile-teardown-2014/">specifically PostgreSQL</a>.</p>

<p>Most applications have ancillary data that’s required to support the main function of the application — think drop-downs with states for shipping or credit card type.</p>

<!--more-->


<p>This data is almost always never interesting, but completely necessary for the application to work as expected. So when it comes to time send your little baby to production, only to find your users can’t pay because they can’t pick their credit card type, your world comes crashing down.</p>

<p>If you have those credit card types in fixtures from the start, loading them in to your development of production database is just a <code>rake</code> task away.</p>

<h2>The Problem</h2>

<p>Let’s assume our application requires us have a list of supported credit card types, and the user is required to pick from the list to pay for the awesome stuff we sell. A sample fixture might look like:</p>

<p>```
visa:
  name: Visa</p>

<p>mastercard:
  name: Mastercard</p>

<p>amex:
  name: American Express
```</p>

<p>This is a somewhat trivial example because the <code>name</code> matches what one might expect in a potential transaction record if we had a <code>credit_card_type</code> field or something similar if we denormalized.</p>

<p>Perhaps we have a field <code>credit_card_type_id</code> in a <code>transactions</code> table that references the foreign key of the related <code>CreditCardType</code> record.</p>

<p>So how do we get these records in to our development and production databases?</p>

<h2>The Solution</h2>

<p>Fortunately, Rails has our backs. The following rake test is available from a default Rails application:</p>

<p><code>
$ bin/rake -T
...
rake db:fixtures:load # Load fixtures into the current environment's database
</code></p>

<p>The <code>db:fixtures:load</code> task is an interesting start, but quickly we realize it might be a little heavy-handed. If this application has users, we probably wouldn&rsquo;t want to copy them to production. They might, however, be a great starting pointing for development.</p>

<p>So how do we handle getting trivial model data in to production for only specific models?</p>

<p>It turns out that we can specify <strong>ONLY</strong> the models we want to load by using the <code>FIXTURES</code> environment variable:</p>

<p><code>
rake db:fixtures:load FIXTURES=credit_card_types
</code></p>

<p><em>Note: The name of the fixture file (usually the database table name) should be used as the value for <code>FIXTURES</code>, not the model name.</em></p>

<p>With that single command, any environment we specify will immediately get the data for our 3 credit card types.</p>

<p>A word of warning, if we run this command multiple times, it will seed the table multiple times. It&rsquo;s not idempotent.</p>

<p>Additionally, if we wanted to load more than just a single fixture, we can specify the names of the files separated by commas:</p>

<p><code>
rake db:fixtures:load FIXTURES=credit_card_types,states,cities
</code></p>

<p>Let&rsquo;s take a quick look at how Rails implements this functionality, specifically the determination of single models:</p>

<p>```
fixtures_dir = if ENV[&lsquo;FIXTURES_DIR&rsquo;]</p>

<pre><code>             File.join base_dir, ENV['FIXTURES_DIR']
           else
             base_dir
           end
</code></pre>

<p>fixture_files = if ENV[&lsquo;FIXTURES&rsquo;]</p>

<pre><code>              ENV['FIXTURES'].split(',')
            else
              # The use of String#[] here is to support namespaced fixtures
              Dir["#{fixtures_dir}/**/*.yml"].map {|f| f[(fixtures_dir.size + 1)..-5] }
            end
</code></pre>

<p>ActiveRecord::FixtureSet.create_fixtures(fixtures_dir, fixture_files)
```</p>

<p>If the <code>FIXTURES</code> variable is present, code teases appart the model names and looks in the fixtures directory and loads the YAML fixture file for that table name.</p>

<p>An interesting side note, it&rsquo;s possible to specify alternate directories for fixture using the <code>FIXTURES_DIR</code> variable. I personally haven taken advantage of this, but could be useful if you want to keep specific fixture files for production that might be different than those that reside in <code>test/fixtures/*</code>.</p>

<p>I wouldn&rsquo;t suggesting using this approach for anything that needs to reference other foreign keys. When you&rsquo;re transferring to a different database, foreign keys will not match and your application will likely not work as expected.</p>

<h2>Summary</h2>

<p>This approach has saved me quite a bit of time in my last few applications. Build it once, use it everywhere. As mentioned above, using this approach to seed database records  with a foreign key should be avoided.</p>

<p>Most applications have a number of tasks needed for a developer to get up and running. Combining fixture data with additional seed data placed in <code>db/seeds.rb</code> can give you the best of both worlds, while still ensuring you have robust data to test against.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 In Review]]></title>
    <link href="http://brandonhilkert.com/blog/2014-in-review/"/>
    <updated>2014-12-29T14:57:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/2014-in-review</id>
    <content type="html"><![CDATA[<p>For the past 2 years, I’ve committed myself to <a href="http://brandonhilkert.com/blog/be-ambitious/">specific
goals</a> for the year to come. Most
people call them New Year’s Resolutions. Heck, I probably even referred to them
as “resolutions” too. But the more I thought about it, the more it dawned on me
that a “resolution” felt more like a fix for something — something that didn&rsquo;t
go well in the previous year. Think weight loss (everyone makes this resolution at least once in their life) or a dedication to be more focused.</p>

<!--more-->


<p>Mine have been more of the bucket list variety. The first was <a href="http://brandonhilkert.com/blog/loyalty/">completing an Ironman</a>. The second, <a href="http://brandonhilkert.com/blog/be-ambitious/">writing a book</a>.</p>

<p>Both felt almost too big initially, but ultimately led to opportunities and
lifestyle changes I would’ve never expected once finished. So naturally, with
2014 winding down, the question becomes <strong>&ldquo;what’s the goal for 2015?&rdquo;</strong>.</p>

<p>And the answer is&hellip;<em>I don’t know</em>.</p>

<p>It doesn’t mean I’m not going to do anything. In fact, it probably means the
opposite. I’m just not going to set out with a specific goal in mind. If
halfway through something, I want to stop and do something else, so be it.</p>

<p>I remember during my training for the Ironman (9 months total), I constantly thought about what I would do with my free time when it was over. Every time my alarm went off at 5am, I thought about what it would feel like to get another 2 hours of sleep. It was endless. Nine months was a long time to have those thoughts and, perhaps, why I was so well positioned to write and launch the book (I had 9 months to think about what was next and how to accomplish it).</p>

<p>Always having your sights set on the future can wear on you though.</p>

<p>Without those feelings now, I’m going to let 2015 take me wherever it does. I don’t have any expectations financially or professionally. I’m going to do my best to make the most out of every moment and appreciate more of the small things. It’s so easy to skip over the small things and in many cases, the small things are actually the best things. And we don’t realize it until they’re gone.</p>

<p>2014 was a great year in all. Here are a few of the events that stand out the most:</p>

<ul>
<li>my wife and I <a href="http://brandonhilkert.com/about/">welcomed our son, Cruz</a></li>
<li>my wife and I celebrated our 4 year anniversary</li>
<li>wrote a book, <a href="http://brandonhilkert.com/books/build-a-ruby-gem/">Build a Ruby Gem</a></li>
<li>provided a <a href="http://brandonhilkert.com/courses/build-a-ruby-gem/">free email course on building a Ruby gem</a> to 1,218 people</li>
<li>connected with 2,645 people through my <a href="http://brandonhilkert.com/newsletter/">newsletter</a></li>
<li>built a <a href="https://funneloptimizer.herokuapp.com/">funnel optimization service for bloggers selling
  products</a></li>
<li>published 24 <a href="http://brandonhilkert.com/blog/archives/">articles</a></li>
<li>saw <a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> <a href="https://rubygems.org/gems/sucker_punch">downloaded over 225k times</a></li>
<li>celebrated <a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> being <a href="http://guides.rubyonrails.org/active_job_basics.html">integrated in to Rails</a></li>
<li>made my <a href="https://github.com/rails/rails/pull/16898">first commit to Rails</a> (even if it was small!)</li>
<li>traveled to Jackson Hole, WY</li>
<li>built a <a href="https://vuier.com/">pay-to-view video platform</a> with a few friends</li>
<li>built a <a href="https://perform.io/">performance management system</a></li>
<li>renovated my
  <a href="http://brandonhilkert.com/images/2014/bathroom-before.jpg">kids'</a>
  <a href="http://brandonhilkert.com/images/2014/bathroom-after.jpg">bathroom</a></li>
<li>built a deployment system for <a href="https://www.pipelinedeals.com/">PipelineDeals</a> and supporting services that I’m very proud of</li>
<li>built a staging server management application</li>
<li>built <a href="https://chrome.google.com/webstore/detail/how-to-win-friends-and-in/cbmeigkjdnilgodhnhagokhoehbpkdcc?hl=en-US">3</a> <a href="https://chrome.google.com/webstore/detail/pipelinedeals-crm-contact/ieaafnaonfabpgpkkeglkeodkpiijjdd?hl=en-US">chrome</a> <a href="https://chrome.google.com/webstore/detail/pipelinedeals-gmail/fdfifknmbmalmgdjmnhkcfholdgacikl?hl=en-US">extensions</a>, the latter being my first <a href="http://facebook.github.io/react/">React</a> app</li>
<li>started a <a href="http://walnutstlabs.com/event/walnut-st-labs-night-owls/">weekly tech gathering</a> at a <a href="http://walnutstlabs.com">local co-working space</a></li>
<li>stopped push email notifications on all my devices (strongly recommended)</li>
<li>saw <a href="http://defriendnotifierapp.com/">Defriend Notifier</a> be used by 30,128 people</li>
<li>started exploring other programming languages, specifically <a href="https://golang.org/">Go</a> and <a href="http://elixir-lang.org/">Elixir</a></li>
</ul>


<p>I’m excited for 2015!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Ruby Refactor: Dependency Injection Options]]></title>
    <link href="http://brandonhilkert.com/blog/a-ruby-refactor-exploring-dependency-injection-options/"/>
    <updated>2014-12-17T07:07:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/a-ruby-refactor-exploring-dependency-injection-options</id>
    <content type="html"><![CDATA[<p>I recently wrote some code to interface with Stripe’s webhooks. After looking at the code and tests, I decided I needed to do something to make it easier to test <em>all</em> pricing tiers— something I wasn’t able to easily do from the start.</p>

<p><a href="http://en.m.wikipedia.org/wiki/Dependency_injection">Dependency injection</a> was a necessary piece of that puzzle. I’ve always been curious about the various forms of dependency injection and the effects each would have on the code. Below I explore 2 options (constructor injection and setter injection).</p>

<!--more-->


<p>In the end, setter injection felt for more natural for this case and it didn’t interfere with the classes argument list and felt ancillary to the responsibility of the code. While the change in code was small, it has a huge impact on my confidence in the code and associated tests.</p>

<h2>The Code</h2>

<p>The class below is responsible for handling Stripe’s <code>invoice.created</code> webhook. Prior to a customer being billed monthly subscription, Stripe will ping your application (if configured) — giving you the opportunity to add additional line items (think metered billing…). It could be additional services, or perhaps the entire bill itself (this use case). Nevertheless, the responsibility of the class is to create an invoice item based on the customer’s usage during the previous period.</p>

<p>```
module StripeEvent
  class InvoiceCreated</p>

<pre><code>attr_reader :payload

def initialize(payload)
  @payload = payload
end

def perform
  Stripe::InvoiceItem.create(
    customer: user.stripe_id,
    amount: additional_charges_in_cents,
    currency: "usd",
    description: "Usage charges"
  )
end

private

def additional_charges_in_cents
  Billing::Tier.new(usage).additional_charges_in_cents
end

def usage
  Billing::Usage.new(user).last_30_days
end

def user
  @user ||= User.find_by(stripe_id: payload["data"]["object"]["customer"])
end
</code></pre>

<p>  end
end
```</p>

<p>I wrote this code pretty quickly and felt pretty good about it. The responsibility of determining the pricing tier had been broken out in to a separate class, as well as determining the customer’s actual usage. At least I thought they were…</p>

<p>So what about the tests?</p>

<p>```
require &lsquo;test_helper&rsquo;</p>

<p>class InvoiceCreatedTest &lt; ActiveSupport::TestCase
  def setup</p>

<pre><code>@payload = {
  "data" =&gt; {
    "object" =&gt; {
      "customer" =&gt; "stripe_brandon"
    }
  }
}
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds invoice item based on usage&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 1900,
  currency: "usd",
  description: "Usage charges"
).returns(true)
StripeEvent::InvoiceCreated.new(@payload).perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds next level charge for usage&rsquo; do</p>

<pre><code>Stat.create!(user: users(:brandon), step: steps(:nav_one), impressions: 3_000, date: 5.days.ago)

Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 4900,
  currency: "usd",
  description: "Usage charges"
).returns(true)
StripeEvent::InvoiceCreated.new(@payload).perform
</code></pre>

<p>  end
end
```</p>

<p>The first thing I noticed with this setup was the detailed usage of <code>Stripe::InvoiceItem.expects</code>. I wasn’t sure if this was necessarily a bad thing because it was a third-party service and it seemed like reasonable boundary of the application.</p>

<p>Aside from the mock, another thing that bothered me was the difficulty simulating different pricing tiers and customer usage. You probably noticed the <code>Stat.create!…</code> in the last test. I could’ve duplicated <code>Stat</code> entries until I reached some arbitrary level of usage that bumped this user to the next pricing tier. But that felt risky and very dependent on knowing the actual value of the subsequent tier.</p>

<p>What if I wanted to change the ceiling of that tier next month? I’d have to come in here and adjust the stats being created until it totaled something above the adjustment. It just felt weird…</p>

<p>What if we had a way to easily swap in implementations of the <code>Billing::Usage</code>? It would then allow me to concoct any combination of usage and mock the expected values sent to Stripe.</p>

<h2>Setter Injection</h2>

<p>In a few other articles, I’ve heard this termed “accessors as collaborators”. Whatever the name, it was surprising how such a little a change could produce so much flexibility in my tests. And with that additional flexibility came confidence because it allowed me to test the edge cases with minimal overhead.</p>

<p>```
module StripeEvent
  class InvoiceCreated</p>

<pre><code>attr_writer :usage_service
attr_reader :payload

def initialize(payload)
  @payload = payload
end

def perform
  if user.created_at &lt; 14.days.ago
    Stripe::InvoiceItem.create(
      customer: user.stripe_id,
      amount: additional_charges_in_cents,
      currency: "usd",
      description: "Usage charges"
    )
  end
end

private

def additional_charges_in_cents
  Billing::Tier.new(usage).additional_charges_in_cents
end

def usage
  usage_service.last_30_days
end

def usage_service
  @usage_service ||= Billing::Usage.new(user)
end

def user
  @user ||= User.find_by(stripe_id: payload["data"]["object"]["customer"])
end
</code></pre>

<p>  end
end
```</p>

<p>A couple things changed:</p>

<ol>
<li><p><code>usage_service</code> was created to extract the code to calculate customer usage</p></li>
<li><p>The <code>usage</code> method now calls the <code>last_30_days</code> method on <code>usage_service</code></p>

<p> This is interesting because you’ll notice now that the only important idea about <code>usage_service</code> is the   fact that is has a <code>last_30_days</code> method. We can now take comfort in the idea that <code>usage_service</code> could    be anything really, as long as it implements the <code>last_30_days</code> method.</p></li>
<li><p><code>attr_writer :usage_service</code> was added to allow for other implementations of the usage class</p></li>
</ol>


<p>This allows us to inject other forms of the <code>usage_service</code> to simulate more or less customer usage:</p>

<p>```
require &lsquo;test_helper&rsquo;</p>

<p>class InvoiceCreatedTest &lt; ActiveSupport::TestCase
  def setup</p>

<pre><code>@payload = {
  "data" =&gt; {
    "object" =&gt; {
      "customer" =&gt; "stripe_brandon"
    }
  }
}
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds invoice item based on usage&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 1900,
  currency: "usd",
  description: "Usage charges"
)
StripeEvent::InvoiceCreated.new(@payload).perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds next level charge for usage&rsquo; do</p>

<pre><code>Stat.create!(user: users(:brandon), step: steps(:nav_one), impressions: 3_000, date: 5.days.ago)

Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 4900,
  currency: "usd",
  description: "Usage charges"
)
StripeEvent::InvoiceCreated.new(@payload).perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds highest tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 49900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload)
inv.usage_service = Level5Usage.new
inv.perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds 2nd highest tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 24900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload)
inv.usage_service = Level4Usage.new
inv.perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds middle tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 12900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload)
inv.usage_service = Level3Usage.new
inv.perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds 2nd tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 4900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload)
inv.usage_service = Level2Usage.new
inv.perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds 1st tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 1900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload)
inv.usage_service = Level1Usage.new
inv.perform
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  Level5Usage = Class.new { def last_30_days; 2_000_000; end }
  Level4Usage = Class.new { def last_30_days; 900_000; end }
  Level3Usage = Class.new { def last_30_days; 190_000; end }
  Level2Usage = Class.new { def last_30_days; 19_000; end }
  Level1Usage = Class.new { def last_30_days; 1_900; end }
```</p>

<p>I’ve created classes for each usage tier that implement the <code>last_30_days</code> method. In real life, this usage service is more complex, but we can test the complexity of it alone through unit tests. The responsibility of this class is to ensure invoice items are added to Stripe correctly, so removing the complexity of <code>Billing::Usage</code> form this test allows us to maximize this test’s value and keep us isolated from the implementation of <code>Billing::Usage</code> — assuming it implements the <code>last_30_days</code> method.</p>

<h2>Constructor Injection</h2>

<p>Most dependency injection posts focus on constructor injection. The idea being that an implementation can be supplied. If not, a reasonable default will be provided. How might that change this scenario?</p>

<p>```
module StripeEvent
  class InvoiceCreated</p>

<pre><code>attr_reader :payload

def initialize(payload, usage_service = Billing::Usage)
  @payload = payload
  @usage_service = usage_service
end

def perform
  if user.created_at &lt; 14.days.ago
    Stripe::InvoiceItem.create(
      customer: user.stripe_id,
      amount: additional_charges_in_cents,
      currency: "usd",
      description: "Usage charges"
    )
  end
end

private

def additional_charges_in_cents
  Billing::Tier.new(usage).additional_charges_in_cents
end

def usage
  @usage_service.new(user).last_30_days
end

def user
  @user ||= User.find_by(stripe_id: payload["data"]["object"]["customer"])
end
</code></pre>

<p>  end
end
```</p>

<p>Because the <code>usage</code> method requires instantiation from within the class, I had to update the fake test Usage classes to accept <code>user</code> as an argument during instantiation:</p>

<p>```
require &lsquo;test_helper&rsquo;</p>

<p>class InvoiceCreatedTest &lt; ActiveSupport::TestCase
  def setup</p>

<pre><code>@payload = {
  "data" =&gt; {
    "object" =&gt; {
      "customer" =&gt; "stripe_brandon"
    }
  }
}
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds invoice item based on usage&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 1900,
  currency: "usd",
  description: "Usage charges"
)
StripeEvent::InvoiceCreated.new(@payload).perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds next level charge for usage&rsquo; do</p>

<pre><code>Stat.create!(user: users(:brandon), step: steps(:nav_one), impressions: 3_000, date: 5.days.ago)

Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 4900,
  currency: "usd",
  description: "Usage charges"
)
StripeEvent::InvoiceCreated.new(@payload).perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds highest tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 49900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload, Level5Usage)
inv.perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds 2nd highest tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 24900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload, Level4Usage)
inv.perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds middle tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 12900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload, Level3Usage)
inv.perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds 2nd tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 4900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload, Level2Usage)
inv.perform
</code></pre>

<p>  end</p>

<p>  test &lsquo;adds 1st tier&rsquo; do</p>

<pre><code>Stripe::InvoiceItem.expects(:create).with(
  customer: "stripe_brandon",
  amount: 1900,
  currency: "usd",
  description: "Usage charges"
)
inv = StripeEvent::InvoiceCreated.new(@payload, Level1Usage)
inv.perform
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  Level5Usage = Struct.new(:user) { def last_30_days; 2_000_000; end }
  Level4Usage = Struct.new(:user) { def last_30_days; 900_000; end }
  Level3Usage = Struct.new(:user) { def last_30_days; 190_000; end }
  Level2Usage = Struct.new(:user) { def last_30_days; 19_000; end }
  Level1Usage = Struct.new(:user) { def last_30_days; 1_900; end }
```</p>

<p>The resulting test classes seem overly complex and sprinkled with details that aren’t particularly relevant to its responsibility. If we were to pass in an already instantiated usage class as an argument, it means we would have to already know the user before-hand, which means we’d have to parse <code>@user ||= User.find_by(stripe_id: payload["data"]["object"]["customer”])</code> outside of this class. I don’t love that solution — the parent that calls this <code>InvoiceCreated</code> class is pretty minimal and I wanted to keep it that way.</p>

<p>Another option would be to provide <code>user</code> as an argument to the to the <code>last_30_days</code> method:</p>

<p><code>
def usage
  @usage_service.new.last_30_days(user)
end
</code></p>

<p>We could then change our fake test usage classes back to:</p>

<p><code>
Level1Usage = Class.new { def last_30_days; 1_900; end }
</code></p>

<p>Notice the lack of <code>Struct</code> with an argument…</p>

<h2>Summary</h2>

<p>Of the two options, I prefer the setter injector in this case. There’s something about changing the signature of a class just for tests that didn’t feel natural.</p>

<p>An accessor (or writer…), in this case, provided the same flexibility without changing the signature. I like being able to quickly look at the argument list of <code>initialize</code> and clearly understand its roles and responsibilities within the system.</p>

<p>Which do you prefer?</p>
]]></content>
  </entry>
  
</feed>
