<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-06-12T20:32:31-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Rails 4.1 Secrets for Configuration]]></title>
    <link href="http://brandonhilkert.com/blog/using-rails-4-dot-1-secrets-for-configuration/"/>
    <updated>2014-06-10T20:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/using-rails-4-dot-1-secrets-for-configuration</id>
    <content type="html"><![CDATA[<p>I previously wrote about how I handle <a href="/blog/flexible-rails-environment-configuration/">environment configuration in Rails</a>. Along with solutions like the <a href="https://github.com/bkeepers/dotenv">dotenv gem</a>, it relies on entirely on environment variables.</p>

<p>One of the highlighted features of Rails 4.1 was the <a href="http://guides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml"><code>config/secrets.yml</code></a> file. By default, this file contains the <code>secret_key_base</code> and defers to the ENV variable of the same name in the production environment. Even though <code>secret_key_base</code> isn’t typically referenced explicitly in an application, I was curious if I could use the <code>config/secrets.yml</code> file in place of previously documented configuration solution.</p>

<!--more-->


<p>After a little digging, it turns out that it works perfectly. A valid question is whether the variables are better referenced through the <code>Rails.application</code> hash, but that’s probably more a preference and use-case dependent decision. Either way, we’ll explore the solution below.</p>

<h2>The Question</h2>

<p>Below is a default <code>config/secrets.yml</code> file generated from a Rails 4.1 app. As you can see, both the development and test environments rely on statically set values, where the production environment relies on environment variables being set on the system. The latter is perfect for platforms like <a href="https://www.heroku.com">Heroku</a>, and just as easy if you manage your own systems on EC2 or similar infrastructure.</p>

<p>```
development:
  secret_key_base: 9ac2d0ad8ebcc312090e99d745006d3cf8</p>

<p>test:
  secret_key_base: a1580ad61ccb6ac60f9f256948cf63d6e20</p>

<h1>Do not keep production secrets in the repository,</h1>

<h1>instead read values from the environment.</h1>

<p>production:
  secret_key_base: &lt;%= ENV[&ldquo;SECRET_KEY_BASE&rdquo;] %>
```</p>

<p>Notice how ERB is processed in the file. This gives us the opportunity to use Ruby to generate random strings, dates, or anything else that can be expressed through code.</p>

<p>So can we use it for other configuration values in the application?</p>

<h2>The Solution</h2>

<p>In order to figure out where the output of the parsed secrets file was stored, I pulled the latest Rails changes and went code diving.</p>

<p>The first thing I did was search “secrets”. The first group of results were mostly comments related to the processing of <code>secret_key_base</code> and where it could be found. After combing through a few more results, I came across the <code>Rails::Application</code> class.</p>

<p>A static array at the top of the file seemed to hold some values for the application as shown below:</p>

<p>```
INITIAL_VARIABLES = [:config, :railties, :routes_reloader, :reloaders,</p>

<pre><code>                    :routes, :helpers, :app_env_config, :secrets] # :nodoc:
</code></pre>

<p>```</p>

<p>Looks like we’re on the right track. Going further down the file leads us to the getter:</p>

<p>```
def secrets #:nodoc:
  @secrets ||= begin</p>

<pre><code>secrets = ActiveSupport::OrderedOptions.new
yaml = config.paths["config/secrets"].first

if File.exist?(yaml)
  require "erb"
  all_secrets = YAML.load(ERB.new(IO.read(yaml)).result) || {}
  env_secrets = all_secrets[Rails.env]
  secrets.merge!(env_secrets.symbolize_keys) if env_secrets
end

# Fallback to config.secret_key_base if secrets.secret_key_base isn't set
secrets.secret_key_base ||= config.secret_key_base

secrets
</code></pre>

<p>  end
end
```</p>

<p>As you can see, the file path <code>config/secrets</code> is referenced as the <code>yaml</code> source:</p>

<p><code>
yaml = config.paths["config/secrets"].first
</code></p>

<p>and the result of reading the file is sent through ERB and YAML:</p>

<p><code>
all_secrets = YAML.load(ERB.new(IO.read(yaml)).result) || {}
</code></p>

<p>The environment group is parsed:</p>

<p><code>
env_secrets = all_secrets[Rails.env]
</code></p>

<p>The result of the output is returned, leaving us with a hash of options based on the environment group. With a little luck we should be able to query the application from the console and get the configuration values.</p>

<p><code>
irb(main):001:0&gt; Rails.application.secrets.class
=&gt; ActiveSupport::OrderedOptions
irb(main):002:0&gt; Rails.application.secrets
=&gt; {:secret_key_base=&gt;"9ac2d0ad8ebcc312090e99d745006d3cf8"}
irb(main):003:0&gt; Rails.application.secrets.secret_key_base
=&gt; "a1580ad61ccb6ac60f9f256948cf63d6e20"
</code></p>

<p>That’s great news because it means we can put other values in this file and reference them throughout our application using the parent hash <code>Rails.application.secrets</code>.</p>

<p>For example, let’s assume we need to configuration Pusher URL again. We could add it to the <code>secrets.yml</code> file like so:</p>

<p>```
development:
  secret_key_base: 9ac2d0ad8ebcc312090e99d745006d3cf8
  pusher_url: <a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a></p>

<p>test:
  secret_key_base: a1580ad61ccb6ac60f9f256948cf63d6e20</p>

<h1>Do not keep production secrets in the repository,</h1>

<h1>instead read values from the environment.</h1>

<p>production:
  secret_key_base: &lt;%= ENV[&ldquo;SECRET_KEY_BASE&rdquo;] %>
  pusher_url: &lt;%= ENV[&ldquo;PUSHER_URL&rdquo;] %>
```</p>

<p>Now within our application we can set the Pusher URL within the initializer using the secret value:</p>

<p>```</p>

<h1>config/initializers/pusher.rb</h1>

<p>Pusher.url = Rails.application.secrets.pusher_url
```</p>

<h2>Summary</h2>

<p>I feel like my previous solution has the potential to be replaced with the secrets file. I plan to try it out in an upcoming application and see if it’s as easy to manage as it seems.</p>

<p>Note that by default, the <code>secrets.yml</code> file is NOT ignored by git. If you plan to include passwords or other sensitive data in the file, be sure to add it to your <code>.gitignore</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7 reasons why I'm sticking with Minitest and Fixtures in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/7-reasons-why-im-sticking-with-minitest-and-fixtures-in-rails/"/>
    <updated>2014-05-27T20:08:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/7-reasons-why-im-sticking-with-minitest-and-fixtures-in-rails</id>
    <content type="html"><![CDATA[<p>I’ve been fortunate to spend the last month as the sole developer of greenfield Rails 4.1 app. As someone who’s spent quite a bit of time maintaining existing code, the freedom to establish patterns and choose tools is a highly welcomed change. One of the choices I made was to use <a href="https://github.com/seattlerb/minitest">Minitest</a> and <a href="http://guides.rubyonrails.org/testing.html#the-low-down-on-fixtures">Rails fixtures</a>.</p>

<p>The short is…<strong>it’s been great</strong>! So great that I’m having trouble imagining myself using anything else going forward.</p>

<!--more-->


<h2>Background</h2>

<p>I got started with Rails in 2009. At the time, it felt like no one but the Rails-core team used <a href="http://test-unit.rubyforge.org/"><code>test_unit</code></a>. While I know this isn’t true, <a href="https://github.com/rspec/rspec">Rspec</a> felt like the overwhelmingly popular testing framework from my perspective. As someone who didn’t have experience with testing prior to learning Ruby/Rails, I was looking for as much educational material as possible to learn <strong>what to test</strong> and <strong>how to test</strong>.</p>

<p>At the time (…and even now), there weren’t many books focused on Ruby testing techniques and specifically what and how to test a Rails application. So when I came across <a href="http://pragprog.com/book/achbd/the-rspec-book"><em>The Rspec Book</em></a> I was excited there was finally some formal writing that would help me understand the best practices and concepts around testing with Ruby. Additionally, it seemed like the first steps of just about every Rails tutorial started with installing Rspec. Because I didn’t have an opinion about why or how, I went with the flow and forged ahead with Rspec at the center of my testing toolbox.</p>

<p>I admit, though, I never gave Test::Unit, or Minitest a fair shot. I immediately gravitated towards Rspec, for whatever reason, and didn’t consider doing otherwise until recently. Fortunately, it seems that more people are aware of Minitest and considering it a <a href="http://www.reddit.com/r/ruby/comments/23nxb2/starting_out_with__rspec_or_minitest_or/">worthy option when starting out</a>.</p>

<h2>My Previous Setup</h2>

<p>Here’s what a typical <code>Gemfile</code> looked like in one of my previous projects:</p>

<p><code>
group :test do
  gem "rspec-rails"
  gem "factory_girl_rails"
  gem "capybara"
  gem "selenium-webdriver"
  gem "database_cleaner"
  gem "shoulda-matchers"
end
</code></p>

<p>Aside from the additional gems, my <code>spec_helper.rb</code> had a number of settings like turning off transactions (in favor of <code>database_cleaner</code>) that went against the standard Rails testing conventions.</p>

<p>This setup can get so complicated, there’s even <a href="https://github.com/RailsApps/rails_apps_testing/">gems to manage the complication</a>. For a framework that has so many conventions, this never felt right to me.</p>

<p>Below are my observations (in no particular order) after having spent 1 month using Minitest and fixtures in a Rails 4.1 application:</p>

<h2>1. Fixtures force you to test against “real” data</h2>

<p>Fixture data isn’t real. It’s staged, however, you have control over what and how much you add. I’ve found that creating structures around common subjects like familiar TV shows or movies allows you to move faster inside the app as the characters involved already have a preconceived hierarchy in your head.</p>

<p>Below is a sample from my <code>users.yml</code> fixture:</p>

<pre><code>fred:
  first_name: Fred
  last_name: Flintstone
  email: fred@flintstone.com
  title: CEO
  password_digest: &lt;%= ActiveRecord::FixtureSet.default_password_digest %&gt;
  company: flintstone
  confirmed_at: &lt;%= Chronic.parse("1/1/2014") %&gt;
  invitation_token: &lt;%= SecureRandom.urlsafe_base64 %&gt;

wilma:
  first_name: Wilma
  last_name: Flintstone
  email: wilma@flintstone.com
  title: COO
  password_digest: &lt;%= ActiveRecord::FixtureSet.default_password_digest %&gt;
  company: flintstone
  supervisor: fred
  invitation_token: &lt;%= SecureRandom.urlsafe_base64 %&gt;
</code></pre>

<p>An interesting note is that while associations might have been painful in the past, notice how you can use <code>flintstone</code> as the company name and it will refer to the <code>company</code> fixture of the same name:</p>

<pre><code>flintstone:
  name: Flintstone Inc.
  phone: 888-555-1212
  updated_at: &lt;%= 6.months.ago %&gt;
  created_at: &lt;%= 6.months.ago %&gt;
</code></pre>

<p>At every point in the application, I have well-structured data to test against. Using Factory Girl is frustrating if you need to create any kind of complex data structure with associations and seed data. When ActiveRecord associations get complex, I’ve found it frustrating and time consuming to bootstrap the initial data — largely because it’s painful to do in the setup of each test. While there are ways around this using factories with pre-established associations, I believe it pushes you to reach for stubs sooner. I’ve seen this first hand where the stubbing was too closely tied to implementation and tests fails with a single change to query conditions — even though the query returns the same data. The recent <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">discussions about TDD</a> have generated more conversation about similar topics. Overall, I’ve felt more confident in my tests when using fewer mocks and stubs, and when using fixtures, I’ve felt that need less frequently. My data is predictable and I’m confident in my tests.</p>

<p>Lastly, when Factory Girl inserts data before each test, there’s a cost associated with communicating with the database. Multiply that cost by many thousands and you have a slower test suite. Fixtures are inserted before the test suite runs, so outside of any test-specific mutation, typically no additional inserts are necessary. While this many seem trivial at first, the benefits will multiply over time and you’ll be left with a more performant test suite — and higher likelihood to run the tests more frequently.</p>

<p><em>Note: I’m aware of methods like <code>build_model</code> and others that create AR objects without touching the database, but there are times when testing using data from the database is necessary (ie. scopes, mutation methods, etc.)</em></p>

<p>Not to mention, you use easily <a href="http://rtmatheson.com/2009/07/loading-a-single-fixture-in-rails/">load your fixture data in to your development environment</a>.</p>

<h2>2. Rspec provides more than one way to do something</h2>

<p>Rspec provides a number of ways to do the same thing. This leads to confusion around supposedly-simple topics like how to assert two things are equal. Do you I use <code>eq()</code> or <code>==</code>, or perhaps <code>eql()</code>? Who knows???</p>

<p>What about the fancy syntax around methods ending with &ldquo;?&rdquo;.</p>

<p><code>
post.should be_active
</code></p>

<p>Wait, so where’s the <code>be_active</code> method? Nope! Rspec parses the method due to the fact that <code>active?</code> is a legitimate method in the application under test. At first, I was enamored with the magic. However, later, I found thinking too much about how and what to write, when I should’ve just been typing out <code>active?</code> and asserting it’s <code>false</code> or <code>true</code> (which of course is an entirely other way to write it):</p>

<p><code>
post.active?.should be_true
</code></p>

<p>&hellip;or what about:</p>

<p><code>
post.active?.should == true
</code></p>

<p>Does that even work? I’ve learned to appreciate simplicity and knowing that there’s generally only one way to write an assertion:</p>

<p><code>
assert post.active?
</code></p>

<p>Aside from not floundering over the right assertion to make, I’ve found it leads to less syntax errors in my tests. Going through 2 or 3 iterations of test errors before the test actually gets to the application code is frustrating and a waste of time. Having fewer ways to do the same thing has led me to make fewer syntax errors when writing tests.</p>

<h2>3. Setting up Capybara is trivial</h2>

<p>If you’ve used Capybara in the past, you know that using it in conjunction with FactoryGirl is….<em>interesting</em>.</p>

<p><a href="http://devblog.avdi.org/2012/08/31/configuring-database_cleaner-with-rails-rspec-capybara-and-selenium/">Avdi’s post on configuring database_cleaner</a> has been my goto configuration:</p>

<p>```
RSpec.configure do |config|</p>

<p>  config.before(:suite) do</p>

<pre><code>DatabaseCleaner.clean_with(:truncation)
</code></pre>

<p>  end</p>

<p>  config.before(:each) do</p>

<pre><code>DatabaseCleaner.strategy = :transaction
</code></pre>

<p>  end</p>

<p>  config.before(:each, :js => true) do</p>

<pre><code>DatabaseCleaner.strategy = :truncation
</code></pre>

<p>  end</p>

<p>  config.before(:each) do</p>

<pre><code>DatabaseCleaner.start
</code></pre>

<p>  end</p>

<p>  config.after(:each) do</p>

<pre><code>DatabaseCleaner.clean
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>This is after you first disable transactions in the <code>spec_helper.rb</code>, of course:</p>

<p><code>
config.use_transactional_fixtures = false
</code></p>

<p><em>Why is all this necessary?</em></p>

<p>When you use Factory Girl and you insert data in to the database during a test, it’s done so in a transaction. At the end of the test, the transaction is rolled back so the data doesn’t persist and the next test begins with a clean slate. All is well right? Not entirely…</p>

<p>When you use a javascript-enabled driver like selenium to run integration tests, browser actions run in a different thread. This removes the ability to see data setup within another thread/transaction. Because of this, you have to resort to a truncation strategy instead. Hence the following config option shown above:</p>

<p><code>
config.before(:each, js: true) do
  DatabaseCleaner.strategy = :truncation
end
</code></p>

<p>This is complex and not obvious for newcomers. Not to mention the complexity that arises if you actually use <a href="https://github.com/brandonhilkert/sucker_punch#cleaning-test-data-transactions">multi-threaded code or gems</a>.</p>

<p>If you choose to use fixtures instead, the data is inserted at the beginning of each test run (not in an isolated transaction), so it’s available to any subsequent thread — browser action or not.</p>

<p>Using fixtures instead of factories removes the need for <code>database_cleaner</code> entirely under normal circumstances. Additionally, the only change that’s necessary to setup <code>Capybara</code> is the following addition to <code>test_helper.rb</code>:</p>

<p>```
require &ldquo;capybara/rails&rdquo;</p>

<p>class ActionDispatch::IntegrationTest
  include Capybara::DSL
end
```</p>

<p>That’s it&hellip;seriously…the crazy part to me is this configuration is largely commonplace in Rails test suites that use Capybara and Rspec. We’ve been largely spoiled by Rails in that the framework provides a solution for just about every common problem we encounter. The fact that a complex setup with database cleaner and deciding on truncating vs. transactions ever seemed reasonable seems counter-intuitive to the Rails experience. I’m, frankly, surprised that it’s seemed reasonable for so long.</p>

<p>Is it possible that practices/tools like Factory Girl are hurting the community more than they’re helping?</p>

<h2>4. Lack of complex stubbing/mocking constructs simplifies code</h2>

<p>Rspec makes it easy to drop in a stub or mock wherever/whenever (see #1 above). While there is some value in this, it makes it easy to abuse.</p>

<p>In fact, I’ve found that using fixtures has caused me to less frequently reach for stubs at all. When a customer comes to the application and has a good experience, the last thing they’re going to care about is whether boundary data was stubbed out. The fact that my tests are running against data the application will see on a daily basis gives me the confidence that all will be well when new code is sent to production.</p>

<p>Minitest does have a <a href="https://github.com/seattlerb/minitest/blob/master/lib/minitest/mock.rb">mocking library</a> that’s easy to use and read. It’s not as extensive as what you get from Rspec out of the box, but nothing is stopping you from including the <a href="http://gofreerange.com/mocha/docs/"><code>mocha</code> gem</a> or some other equivalent, if you need additional functionality (I haven’t had the need).</p>

<h2>5. Snippets can help the uncertainty about Minitest assertion order</h2>

<p>When I first approached Minitest, one of the long-standing questions in my head was the order in which the expected and actual value appear. At this point, I think it’s familiar enough to know without assistance, but why type more if you don’t have to.</p>

<p>I rely heavily on these <a href="https://github.com/honza/vim-snippets/blob/master/snippets/ruby.snippets">Ruby snippets for vim</a>, which takes away the pain of knowing the order of arguments.</p>

<p><img class="center" src="/images/syntax.gif" title="&ldquo;Minitest snippet completion&rdquo;" ></p>

<h2>6. Minitest is just Ruby</h2>

<p>To be fair, Rspec is just Ruby too. But generally Rspec seems to have magic ways to do just about everything &ndash; shared examples, test setup, configuration. All these things have an “Rspec way”.</p>

<p>Minitest deals with this by just using Ruby. If you need shared examples, why not <a href="http://ntl.ghost.io/how-i-use-test-unit-syntax/">include a module that includes the shared tests</a>?</p>

<p>I noticed during the first few days of my Minitest experience, I was looking for the “right” way to do something. With some urging from people I respect in the community, I realized it was just Ruby. That mindset allowed me to do just about anything I wanted using the language itself, rather than some magic from the Rspec DSL.</p>

<p>In some ways, I think too much magic gives us tunnel vision. After a few niceties are used (and abused), we start to believe that whatever tool we’re using will solve ALL our problems. Using Minitest has allowed me break out of this mindset and rely on the Ruby skills that I’ve developed to solve my testing challenges.</p>

<h2>7. Deviating from Rails defaults doesn’t always provide value</h2>

<p>Sure, not everything in Rails is ideal. In fact, it’s admirable to think about how many people actually get value from something so opinionated. After relying on the Rails default stack for the last month, I’ve realized how much simplicity I’ve been missing due to my choice of tools. I assumed that because the community was largely using Rspec and Factory Girl (what it seemed like from my perspective), it was a good idea. And while arguments can be made for either side, I wasn’t using Rspec because I was convinced it was better — I just didn’t know any better.</p>

<p>The ease at which I was able to get going with the Rails default stack using Minitest and fixtures has made me a convert. There was minimal setup and largely required very little additional configuration.</p>

<p>I have yet to feel the pains from using fixtures that some talk about. But I’ve been careful not to introduce large scale changes in the data without thinking through them before-hand.</p>

<p>Perhaps the app isn’t big enough yet? Maybe my data isn’t complicated enough? Or maybe I’m paying close enough attention to the effects that changes in data will have?</p>

<p>Whatever it is, it’s working for me right now. Part me feels like I’m going to have a moment where I say, “<em>OHHHHH! This is why everyone uses Rspec and Factory Girl.</em>” Although, it’s hard for me to imagine at this point. The default stack is working for me and staying out of the way, which is what I prefer.</p>

<h2>Summary</h2>

<p>I intentionally chose to leave out comments about performance of one framework vs the other. However, <a href="https://speakerdeck.com/ahawkins/bow-before-minitest">this deck provide great benchmarks</a> on the topic.</p>

<p>I’m excited to add Minitest and fixtures to my toolkit. With the benefits I’ve seen so far, it’s hard for me to imagine using anything else going forward — assuming I have the choice.</p>

<p>If you have beef over the default Minitest assertion syntax, you’ll be happy to know that Minitest comes with the option to use a <a href="http://bfts.rubyforge.org/minitest/MiniTest/Expectations.html">spec-style syntax</a>. While it’s not identical to the Rspec syntax, it gets you closer to the natural language syntax, if that’s important to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Rails 4.1 travel_to test helper]]></title>
    <link href="http://brandonhilkert.com/blog/rails-4-1-travel-to-test-helper/"/>
    <updated>2014-05-11T14:08:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/rails-4-1-travel-to-test-helper</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently had the good fortune of working on a greenfield Rails app. The app is heavily dependent on times and recurring events (weekly). Naturally, I dragged in the <a href="https://github.com/travisjeffery/timecop">timecop gem</a> to handle freezing time, so my I could properly assert that certain events took place in the tests.</p>

<p>With the release of Rails 4.1, the time stubbing method <code>travel_to</code> was added. This new helper method forces the current time to whatever you specify, allowing you to make asserts against a historical time, or week in my case.</p>

<!--more-->


<h2>The Test</h2>

<p><a href="https://github.com/travisjeffery/timecop">Timecop</a> performed valiantly and did more than I ever needed (I generally only used the <code>freeze</code> method). However, dragging in another gem was the last thing I wanted to do for something relatively simple.</p>

<p>Prior to utilizing the changes in Rails 4.1, one of my tests looked like:</p>

<p>```
test &ldquo;sends reminders on tuesday for those scheduled on wednesday&rdquo; do
  Timecop.freeze Chronic.parse(&ldquo;4/15/14&rdquo;) do</p>

<pre><code>Reminders::Checkin.new.email
assert_equal 3, ActionMailer::Base.deliveries.size
</code></pre>

<p>  end
end
```</p>

<p><em>Note: <a href="https://github.com/mojombo/chronic">Chronic</a> is a gem that helps create dates/times by using standard language.</em></p>

<h2>Rails 4.1</h2>

<p>I think I first heard about some additional testing methods from my friend <a href="http://iamericsteele.com/">Eric Steele</a>. He mentioned them in one of our various conversations about testing (he’s writing a book titled <em><a href="https://whatdoitest.com/?utm_source=brandonhilkert-com&amp;utm_medium=web&amp;%20utm_campaign=travel-to">What Do I Test?</a></em>).</p>

<p>Like many, I looked over the <a href="http://guides.rubyonrails.org/4_1_release_notes.html">release notes for Rails 4.1</a> and features like <a href="http://guides.rubyonrails.org/4_1_release_notes.html#spring-application-preloader">Spring</a>, <a href="http://guides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml">secrets</a>, <a href="http://guides.rubyonrails.org/4_1_release_notes.html#action-mailer-previews">ActionMailer previews</a>, and <a href="http://guides.rubyonrails.org/4_1_release_notes.html#active-record-enums">ActiveRecord enums</a> jumped out at me.</p>

<p>Towards the bottom, though, was a feature barely mentioned or written about:</p>

<p><img class="center" src="/images/rails-41-travel-to.png" title="&ldquo;Test helper addition in Rails 4.1&rdquo;" ></p>

<p><a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/testing/time_helpers.rb">The <code>TimeHelpers</code> test module</a> adds the <code>travel_to</code> and <code>travel_back</code> methods to assist in stubbing <code>Time.now</code> and <code>Date.today</code>.</p>

<h2>Updated Tests</h2>

<p>Using the <code>travel_to</code> method with the example above results in the following:</p>

<p>```
test &ldquo;sends reminders on tuesday for those scheduled on wednesday&rdquo; do
  travel_to Chronic.parse(&ldquo;4/15/14&rdquo;) do</p>

<pre><code>Reminders::Checkin.new.email
assert_equal 3, ActionMailer::Base.deliveries.size
</code></pre>

<p>  end
end
```</p>

<p>Because I&rsquo;m using the <code>travel_to</code> method with a block, there&rsquo;s no need to use the <code>travel_back</code> method to reset time back to the current time. Supply a block <a href="https://github.com/rafaelfranca/rails/blob/fa1f20e6549f962112948f5b3c27d09ab5e5faaf/activesupport/lib/active_support/testing/time_helpers.rb#L86">automatically calls <code>travel_back</code></a>.</p>

<p>While the change doesn&rsquo;t look significant, it removed my need for the <code>Timecop</code> gem entirely.</p>

<p>Additionally, the same test could be written as:</p>

<p><code>
test "sends reminders on tuesday for those scheduled on wednesday" do
  travel_to Chronic.parse("4/15/14")
  Reminders::Checkin.new.email
  assert_equal 3, ActionMailer::Base.deliveries.size
  travel_back
end
</code></p>

<p>or with <code>setup</code> and <code>teardown</code>:</p>

<p>```
def setup
  travel_to Chronic.parse(&ldquo;4/15/14&rdquo;)
end</p>

<p>test &ldquo;sends reminders on tuesday for those scheduled on wednesday&rdquo; do
  Reminders::Checkin.new.email
  assert_equal 3, ActionMailer::Base.deliveries.size
end</p>

<p>def teardown
  travel_back
end
```</p>

<h2>Summary</h2>

<p>Rails is well-known for conventions. <code>travel_to</code> is a great addition to the framework that would&rsquo;ve otherwise required dragging in additional dependencies.</p>

<p>Next time you look at the release notes for a project, don&rsquo;t skip over the less featured functionality. For all you know, it could be something that saves you time and frustration that commonly occurs in your projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Reloader: A Lesser Known Railtie Hook]]></title>
    <link href="http://brandonhilkert.com/blog/rails-reloader-a-lesser-known-railtie-hook/"/>
    <updated>2014-04-21T19:48:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/rails-reloader-a-lesser-known-railtie-hook</id>
    <content type="html"><![CDATA[<p>I recently wrote <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-come&amp;utm_medium=web&amp;utm_campaign=reloader">a book about integrating with Rails from a Ruby gem</a>, which specifically touched on using a <a href="http://api.rubyonrails.org/classes/Rails/Railtie.html">Railtie</a> to extend <code>ActiveRecord</code>, <code>ActionController</code> and <code>ActionView</code> . While these are the 3 more popular Rails libraries, there’s plenty others <a href="http://guides.rubyonrails.org/configuring.html">that are configurable</a>.</p>

<p>A <a href="https://github.com/brandonhilkert/sucker_punch/issues/49">recent issue</a> in <a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> caused me to go digging through the Rails source code. Ultimately, the <code>to_prepare</code> method on <code>ActionDispatch::Reloader</code> resolved the issue, but I surprised was to find very little documentation about it.</p>

<!--more-->


<h2>The Problem</h2>

<p><a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> lazily creates the <a href="http://celluloid.io/">Celluloid</a> pools used for background job queues. For the purpose of keeping track of the queues already initialized, Sucker Punch makes use of the <a href="https://github.com/celluloid/celluloid/wiki/Registry">Celluloid Registry</a>. Think of it as a class-level hash.</p>

<p>This works swimmingly in production, but not so much in development. Rails makes our lives easier by reloading code in between requests while in development, due to this setting in <code>config/environments/development.rb</code>:</p>

<p><code>
  config.cache_classes = false
</code></p>

<p>Without it, we’d be forced to restart the server after almost every request. If that sounds like a giant PITA to you, I whole heartedly agree!</p>

<p>So now you make your awesome job class, do some background work (send an email for example) and reload the page and boom:</p>

<p><code>``
Celluloid::PoolManager: async call</code>perform` aborted!
ArgumentError: A copy of SendInvitationJob has been removed from the module tree but is still active!</p>

<pre><code>    gems/activesupport-4.0.3/lib/active_support/dependencies.rb:446:in `load_missing_constant'
    gems/activesupport-4.0.3/lib/active_support/dependencies.rb:184:in `const_missing'
    my-app/app/jobs/send_invitation_job.rb:6:in `block in perform'
</code></pre>

<p>```</p>

<p>The Celluloid registry still has reference to a the original <code>SendInvitationJob</code> class when it was initialized, however, reloading the code has caused the original reference to disappear and all hell breaks loose when the queue key is fetched to send another job to the class.</p>

<p>In my head, it made sense for the queues to be cleared out upon every request in development. In general, because Sucker Punch doesn’t have persistent queues, the best use case is for quick one-off jobs that aren’t extremely important — email and logging come to mind. Since both of these examples are typically pretty speedy, it’s unlikely there will be a huge job backup upon subsequent requests.</p>

<p>I knew what I wanted, but didn’t know how to accomplish it.</p>

<h2>The Solution</h2>

<p>Knowing the issue was related to the setting <code>config.cache_classes = false</code> in the development environment, I broke open the Rails source code and searched for <code>cache_classes</code>. The first result was the <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/reloader.rb"><code>ActionDispatch</code> reloader middleware</a>. Fortunately, there’s a very descriptive comment at the top of the class:</p>

<p><code>
  # By default, ActionDispatch::Reloader is included in the middleware stack
  # only in the development environment; specifically, when +config.cache_classes+
  # is false. Callbacks may be registered even when it is not included in the
  # middleware stack, but are executed only when &lt;tt&gt;ActionDispatch::Reloader.prepare!&lt;/tt&gt;
  # or &lt;tt&gt;ActionDispatch::Reloader.cleanup!&lt;/tt&gt; are called manually.
</code></p>

<p>This functionality is exactly what I needed!. From here, I just needed to know what callbacks were valid. A few lines in to the class are the following methods:</p>

<p>```</p>

<pre><code># Add a prepare callback. Prepare callbacks are run before each request, prior
# to ActionDispatch::Callback's before callbacks.
def self.to_prepare(*args, &amp;block)
  unless block_given?
    warn "to_prepare without a block is deprecated. Please use a block"
  end
  set_callback(:prepare, *args, &amp;block)
end

# Add a cleanup callback. Cleanup callbacks are run after each request is
# complete (after #close is called on the response body).
def self.to_cleanup(*args, &amp;block)
  unless block_given?
    warn "to_cleanup without a block is deprecated. Please use a block"
  end
  set_callback(:cleanup, *args, &amp;block)
end
</code></pre>

<p>```</p>

<p><code>to_prepare</code> and <code>to_cleanup</code>…and like the comments say, they do exactly what you’d expect. Given that I wanted to clear our the Celluloid registry BEFORE each request, <code>on_prepare</code> is the golden ticket. Now I just needed to figure out how to clear the registry.</p>

<p>A quick glade over the <a href="http://rubydoc.info/gems/celluloid/Celluloid/Registry"><code>Celluloid::Registry</code> class documentation</a> shows some methods that might be of value. It turns out that these are instance methods for an instance of the <code>Celluloid::Registry</code> class. Unfortunately, when Celluloid boots, it instantiates a registry to use internally, so we need a way to get at that particular instance and clear it out. Sure enough, <a href="http://rubydoc.info/gems/celluloid/Celluloid/Actor#clear_registry-class_method">a class method to do just that in <code>Celluloid::Actor</code></a> is available.</p>

<p>Now that we all the pieces of the puzzle, it was time to put together a Railtie to trigger the behavior. Prior to needing this functionality, the Railtie in Sucker Punch was pretty simple:</p>

<p>```
module SuckerPunch
  class Railtie &lt; ::Rails::Railtie</p>

<pre><code>initializer "sucker_punch.logger" do
  SuckerPunch.logger = Rails.logger
end
</code></pre>

<p>  end
end
```</p>

<p>All it did was connect the logger to the existing Rails logger. Adding the callback to <code>ActionDispatch</code> looks like:</p>

<p>```
module SuckerPunch
  class Railtie &lt; ::Rails::Railtie</p>

<pre><code>initializer "sucker_punch.logger" do
  SuckerPunch.logger = Rails.logger
end

config.to_prepare do
  Celluloid::Actor.clear_registry
end
</code></pre>

<p>  end
end
```</p>

<p>Now when the Railtie is loaded, the <code>Celluloid::Actor.clear_registry</code> method is triggered before the reloading of code in the development environment, clearing out the Celluloid registry and allowing Sucker Punch to instantiate new job queues for each request.</p>

<h2>Summary</h2>

<p>I was unaware of any of these methods when the issue was submitted. Rather than throw my hands up and close the issue because it didn’t affect me, I thought through an approach that could work, and only then started to write code. And in fact, didn’t know what code to write!</p>

<p>Comments and well written code serve as great documentation. I probably wouldn’t have stumbled on <code>ActionDispatch::Reloader</code> without the detailed comments at the top of the class. Sure, I would’ve found the <code>cache_classes</code> line, but might not have given it more thought.</p>

<p>Next time you have a question about the syntax of a method or the order of its arguments, clone the repo (if it’s open source, of course) and do a search. I think you’ll be surprised at how quickly you can find what you’re looking for. My guess is you’ll also be pleasantly surprised at the other things you stumble upon in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem eBook is Live!]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-is-live/"/>
    <updated>2014-03-26T23:49:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-is-live</id>
    <content type="html"><![CDATA[<p>After several weeks of <strong>really</strong> early mornings, <a href="http://brandonhilkert.com/books/build-a-ruby-gem?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch"><em>Build a Ruby Gem</em></a> is finally live:</p>

<p><a href="http://brandonhilkert.com/books/build-a-ruby-gem?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch">http://brandonhilkert.com/books/build-a-ruby-gem/</a></p>

<p>Thanks again for all the support and encouragement. I had a great time working
on it and really look forward to hearing your feedback.</p>

<!--more-->

]]></content>
  </entry>
  
</feed>
