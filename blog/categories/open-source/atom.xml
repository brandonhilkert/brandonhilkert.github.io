<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: open source | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-02-19T07:28:53-05:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding the RAILS_CACHE_ID Environment Variable]]></title>
    <link href="http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable/"/>
    <updated>2014-02-19T07:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable</id>
    <content type="html"><![CDATA[<p>Last week, I was looking through my Twitter stream and came across a tweet that referenced <code>ENV[“RAILS_CACHE_ID”]</code>. I was unfamiliar with this environment variable and made a note to learn more.</p>

<p>Rails 4 has made a discernible effort to improve view rendering performance by what they’re calling <a href="http://signalvnoise.com/posts/3690-the-performance-impact-of-russian-doll-caching">russian doll caching</a>. Prior to this, view caching was simple in syntax, but realistically more complicated when cached partials needed busting on subsequent releases.</p>

<!--more-->


<p>I didn’t know if this environmental variable had anything to do with Rails 4 caching, so I went digging…</p>

<p>The first thing I did was <code>git clone</code> the Rails source code and look for that variable. Outside of the documentation and tests, it showed up in one place, <code>activesupport/lib/active_support/cache.rb</code>:</p>

<pre><code> # Expands out the +key+ argument into a key that can be used for the
 # cache store. Optionally accepts a namespace, and all keys will be
 # scoped within that namespace.
 #
 # If the +key+ argument provided is an array, or responds to +to_a+, then
 # each of elements in the array will be turned into parameters/keys and
 # concatenated into a single key. For example:
 #
 #   expand_cache_key([:foo, :bar])               # =&gt; "foo/bar"
 #   expand_cache_key([:foo, :bar], "namespace")  # =&gt; "namespace/foo/bar"
 #
 # The +key+ argument can also respond to +cache_key+ or +to_param+.

 def expand_cache_key(key, namespace = nil)
   expanded_cache_key = namespace ? "#{namespace}/" : ""

   if prefix = ENV["RAILS_CACHE_ID"] || ENV["RAILS_APP_VERSION"]
     expanded_cache_key &lt;&lt; "#{prefix}/"
   end

   expanded_cache_key &lt;&lt; retrieve_cache_key(key)
   expanded_cache_key
 end
</code></pre>

<p>The comments preceding the method do a good job telling the whole story. The <code>expanded_cache_key</code> variable is an array built up from the <code>key</code> argument. The <code>RAILS_CACHE_ID</code> environment variable is prefaced to this array, operating similar to a namespace.</p>

<p>With these assumptions in mind, let’s see if we prove for sure. I’ll generate a new Rails 4 app:</p>

<pre><code>$ rails new cache_test
</code></pre>

<p>We’ll be inspecting model objects, so let’s generate a fake blog model:</p>

<pre><code>$ rails g scaffold post title content:text
</code></pre>

<p>Migrate the database to get current:</p>

<pre><code>$ bin/rake db:migrate
</code></pre>

<p>I’ll create a new <code>Post</code> and take a look at the default <code>cache_key</code>:</p>

<pre><code>$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Let’s set the <code>RAILS_CACHE_ID</code> and look at the <code>cache_key</code> of this record again:</p>

<pre><code>$ export RAILS_CACHE_ID=octopus
$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Hmmm…same thing. Referring back to the Rails course code above, it turns out that not all cache writes use the <code>expand_cache_key</code> method. Searching around the Rails code for <code>expand_cache_key</code>, we find the following results:</p>

<pre><code>ActionController::Caching::Fragments#fragment_cache_key
ActionDispatch::Http::Cache::Response#etag=
</code></pre>

<p>From the looks of it, it only applies to fragment caching and manually setting ETAG headers for HTTP responses, so let’s dig in to those.</p>

<h2>Fragment Caching</h2>

<p>I can cache the post fragment by wrapping it in a <code>cache</code> block:</p>

<pre><code>&lt;% app/views/posts/show.html.erb %&gt;
&lt;%= cache(@post) do %&gt;
  &lt;p&gt;
    &lt;strong&gt;Title:&lt;/strong&gt;
    &lt;%= @post.title %&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Content:&lt;/strong&gt;
    &lt;%= @post.content %&gt;
  &lt;/p&gt;
&lt;% end %&gt;
</code></pre>

<p>Run the server and make a request to <code>http://localhost:3000/posts/1</code>.</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:16:04 -0500
  ActiveRecord::SchemaMigration Load (0.2ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.2ms)
Write fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.6ms)
  Rendered posts/show.html.erb within layouts/application (11.0ms)
</code></pre>

<p><em>Note: Make sure <code>config.action_controller.perform_caching</code> is set to <code>true</code> in <code>config/environments/development.rb</code> (it’s <code>false</code> by default), otherwise caching is disabled.</em></p>

<p>There it is! It wrote out the key <code>views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code>. Let’s change the environmental variable and see if it adjusts accordingly:</p>

<pre><code>$ export RAILS_CACHE_ID=shark
</code></pre>

<p>Restart the Rails server and again, request <code>http://localhost:3000/posts/1</code>:</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:35:33 -0500
  ActiveRecord::SchemaMigration Load (0.1ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.3ms)
Write fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.5ms)
  Rendered posts/show.html.erb within layouts/application (11.1ms)
Completed 200 OK in 82ms (Views: 62.7ms | ActiveRecord: 0.5ms)
</code></pre>

<p>Sure enough…the key <code>views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code> was used this time.</p>

<h2>Etags</h2>

<p>Etags are a value added to the HTTP headers that allow a browser to determine whether the content for a particular piece of content should be refreshed or not. If not, the server returns a <code>304</code> HTTP code and the browser uses the cached response from a previous request.</p>

<p>Rails provides two controller helper methods to help determine whether the content should be refreshed: <code>fresh_when</code> and <code>stale?</code>. The <a href="http://guides.rubyonrails.org/caching_with_rails.html#conditional-get-support">Rails guides</a> provide a decent explanation of these methods and when to use them.</p>

<p>Jumping in to the <code>PostsController</code>, let’s use the <code>fresh_when</code> method in the <code>show</code> action:</p>

<pre><code>class PostsController &lt; ApplicationController
  before_action :set_post, only: [:show, :edit, :update, :destroy]
  …
  def show
    fresh_when(@post)
  end
  …
end
</code></pre>

<p>Now, when we request the <code>show</code> page for that post, we get an Etag back in the header response of <code>9c754ae292618570ec43cae8e03a0b13</code>. That doesn’t look very familiar, huh?</p>

<p>It turns out that the Etag is generated using the following method:</p>

<p>Digest::MD5.hexadigest(key)</p>

<p>But the key is more than just the <code>cache_key</code> of the <code>@post</code>. If we refer back to where the <code>expand_cache_key</code> method was used, we see that when the <code>etag</code> attribute is set on the response, the key is expanded using the <code>ActiveSupport::Cache#expand_cache_key</code> method we looked at above:</p>

<pre><code> def etag=(etag)
   key = ActiveSupport::Cache.expand_cache_key(etag)
   @etag = self[ETAG] = %("#{Digest::MD5.hexdigest(key)}")
 end
</code></pre>

<p>Let’s stop the server and reset the <code>ENV[“RAILS_CACHE_ID”]</code>:</p>

<pre><code>$ export RAILS_CACHE_ID=whale
</code></pre>

<p>Running the same request, we get an Etag of <code>b389da68ca1b25986edecf349fcf63e6</code>. So as you can see, by updating <code>ENV[“RAILS_CACHE_ID”]</code> alone, we get a different Etag in the response without changing the <code>post</code> object itself, which means we can invalidate our browser cache by updating this environmental variable.</p>

<p>I, personally, deploy to Heroku most of the time and it’d be nice to be able take advantage of browser caching in this manner, but also know when a new deploy is released. <a href="http://ninjasandrobots.com/rails-caching-a-problem-with-etags-and-a-solution">This article</a> describes a solution that integrates Heroku’s numbered releases.</p>

<p>However, we know that Heroku uses git to get the source code of the appellation to the application container, so why not leverage git commit IDs for <code>ENV[“RAILS_CACHE_ID”]</code>.</p>

<p><code>git log</code> is a command to look at….well, git logs!. With a few additional options, we can get a shortened version of the commit SHA:</p>

<pre><code>$ git log --pretty=format:%h -n1
40ad584
</code></pre>

<p><strong>Combining the git commit SHA gives us the perfect opportunity to invalidate browser cache</strong>. If the Etag is different because a different git commit SHA is the most recent on the server, we know there’s a potential the HTML rendered and cached in the browser could be outdated. We can implement this by setting the ENV variable in <code>config/environments</code>:</p>

<pre><code>ENV['RAILS_CACHE_ID'] = `git log --pretty=format:%h -n1`.strip
</code></pre>

<p>Now, when a request is made we get an Etag of <code>6d80b6397347f8de1b8718e7fd9f90e1</code>. And if we add an empty commit and re-request the post, we get an Etag of <code>6dcc66ddf83613dd0c46406a1e983b38</code>.</p>

<p>Hooray! <strong>A browser caching strategy for HTML content that’s dependent on the git release</strong>.</p>

<h2>Summary</h2>

<p>Before Rails 4, it was common to use a version number in the view <code>cache</code> method so that when you changed a encompassed view template, the cache would bust and the changes would be shown. However, now that <code>cache_digests</code> are part of Rails 4, the contents of the template block is evaluated and an MD5 string is created from the contents (the latter part of the cache key &ndash; <code>c39e6bde261c006ffe9ddf27fb9d5318</code> in the last example). This ensures that whenever the contents of the view template are changed, the cache is busted and the new template is properly stored and rendered.</p>

<p>Given the <code>cache_key</code> of fragment caching is dependent on the contents of the template, I have trouble finding value in setting the <code>RAILS_CACHE_ID</code> environmental variable for fragment caching alone.</p>

<p>Alternatively, the use case for using <code>ENV[“RAILS_CACHE_ID”]</code> to control browser caching can be a tremendous asset when the content of the body response is not considered. Caching strategies can be difficult to reason about and hopefully this gives you another tool in the toolbox to make parts of your Rails applications more performant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Update]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-book-update/"/>
    <updated>2014-02-15T08:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-book-update</id>
    <content type="html"><![CDATA[<p><strong>This past weekend I added ~ 6,000 words</strong> to the existing content. I&rsquo;m really excited to be nearing the end of the road. I&rsquo;ve gotten some great feedback since I started and wanted to gather a bit more to finalize the chapter list.</p>

<p>Here&rsquo;s the chapter list I&rsquo;m working with&nbsp;so far:</p>

<!--more-->


<ol>
<li>Introduction What is a gem? Why build a gem?)</li>
<li>File structure of a gem</li>
<li>Testing/debugging setup</li>
<li>Code implementation of of example gem</li>
<li>Versioning</li>
<li>Release (how to release? and when to release?)</li>
<li>Changelog (What is it? and what to include?)</li>
<li>Responsibility of a gem author</li>
<li>Loading additional libraries within a gem</li>
<li>Command-line utilities</li>
<li>Configuration patterns</li>
<li>Rails hooks</li>
<li>Rails view helpers</li>
<li>Rails controller includes</li>
<li>Rails Model Includes</li>
<li>Rails rake tasks</li>
<li>Rails engines (when/why to use?)</li>
<li>Open source management</li>
<li>Summary</li>
</ol>


<p>Phew! That&rsquo;s a lot&hellip;so with that in mind, <strong>have I covered everything?</strong></p>

<p>Please <strong>leave a comment</strong> if you&rsquo;re interested in reading about something I haven&rsquo;t mentioned.</p>

<p>One of the things I&rsquo;m most excited about is being able to use real-word examples for each chapter. I learn by reading and writing my own code and really appreciate when a book/post does the same. I&rsquo;ve tried to do that at every step of the way. Hopefully this will make the book more valuable to you.</p>

<p>I will be in touch in the <strong>next few weeks with a sample chapter</strong> or two, along with some feature blog posts.</p>

<p>If you&rsquo;re interested in receiving updates about the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary"><em>Build a Ruby Gem</em>
book</a>,
enter your email below:</p>

<p><div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: open source" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>

</p>

<p>Members of this list will also receive a <strong>20% discount coupon</strong> when the book
launches!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Launched an Email Course to 500+ People]]></title>
    <link href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/"/>
    <updated>2014-01-06T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/how-i-launched-an-email-course</id>
    <content type="html"><![CDATA[<p>About a month ago, I joined <a href="http://jfdi.bz/">JFDI.bz</a> &ndash; a community for
solo-founders launching their own thing. Once a month, the group engages in a
<em>Week of Hustle</em> &ndash; a week long sprint to launch something.
I chose to launch an email course on the topic of <a href="http://brandonhilkert.com/courses/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary">building a Ruby
gem</a>.</p>

<!--more-->


<h2>Why <em>Build a Ruby Gem</em>?</h2>

<p>A few years ago, I was building my first Ruby gem and I was left pretty
confused with the process and conventions. After working through my
frustrations, I thought the information I learned could be useful to others.</p>

<p>Honestly, I thought to write an eBook at first, however, the last thing I
wanted was to invest a month or two of my time only to find out people
weren&rsquo;t interested.</p>

<p>An email course was a good medium &ndash; I could cover the basics well enough to get
people through their hangups, while also validating the need for an eBook. I
figured if I got <strong>100-200</strong> people to sign up for the course, I would move
forward with the book.</p>

<h2>Results</h2>

<p>It turns out my marketing efforts were more successful than I anticipated.</p>

<h3>Today, almost 600 people have taken the Build a Ruby Gem email course!</h3>

<h2>Email is King&hellip;still</h2>

<p>Prior to launching this email course, I&rsquo;d read about the value of building an
email list from people like <a href="http://nathanbarry.com/">Nathan Barry</a>, <a href="http://unicornfree.com/">Amy
Hoy</a> and <a href="http://justinjackson.ca/">Justin Jackson</a>.</p>

<p>I&rsquo;d also read countless other posts describing the most common regrets when
launching a new product. Almost all of them included not building an email
list. With that said, it was one of the first things I setup.</p>

<p>I blogged each day about my progress. Each post had a
mailing list subscription form that sent them subsequent daily updates.  Subscriptions
were slow at first, but interest built.  By then end of the week <strong>232</strong> people had
subscribed. And the day the course went live, I was able to to convert <strong>115</strong>
(~50%) of them.</p>

<p>The people subscribed were <strong>EXACTLY</strong> my target audience so it&rsquo;s no surprise
conversion was high.</p>

<h2>Finding Your Target Audience</h2>

<p>Fortunately for me, my target audience was Ruby developers and they hang out
online (surprise, surprise). But where online&hellip;</p>

<p>Let me hit you with something that seems obvious in hindsight:</p>

<h3>Marketing is easy when you build a product for an audience you&rsquo;re already part of.</h3>

<p>This was something I&rsquo;d <a href="http://unicornfree.com/2013/how-do-you-create-a-product-people-want-to-buy">read over the past few
months</a>,
but not seen its value until now.</p>

<p>The email course is for <strong>Ruby developers</strong>, I&rsquo;m a <strong>Ruby Developer</strong>, so the
question becomes&hellip;.<em>where do I hang out online?</em></p>

<p>That question is <strong>easy</strong> to answer &ndash; <a href="http://rubyweekly.com/">Ruby weekly</a>,
<a href="http://www.reddit.com/r/ruby">Reddit</a> and
<a href="http://www.rubyflow.com/">RubyFlow</a>.</p>

<p>And don&rsquo;t you know&hellip;it turns out those 3 sources have been the highest
converting sources since the course launched:</p>

<ol>
<li>Ruby weekly &ndash; 131</li>
<li>RubyFlow &ndash; 65</li>
<li>Reddit &ndash; 62</li>
</ol>


<p>The remaining sources were a combination of direct links, social media and
other technology news aggregation sites (probably mostly stemming from the top
sources above).</p>

<p><em>Note: I&rsquo;ve been reading <a href="http://www.amazon.com/80-20-Sales-Marketing-Definitive/dp/1599185059">80/20 Sales and
Marketing</a>
and the numbers above coincide, almost exactly, to the 80/20 curve. That is,
80% of the conversion came from 20% of the sources.</em></p>

<h2>Twitter Tip</h2>

<p>The last day of the email course has a <em>Summary</em> section thanking people for
taking the course and attempting to get feedback. While I haven&rsquo;t received much
constructive criticism, I dropped this little doozie at the bottom:</p>

<p><img class="center" src="/images/email-course/click-to-tweet.png" title="&ldquo;Build a Ruby Gem Email Course Click To Tweet&rdquo;" ></p>

<p>I&rsquo;d read a post about <a href="http://grinnick.com/posts/how-groove-s-email-copy-makes-their-posts-go-viral?ref=hn">GroveHQ&rsquo;s emails going
viral</a>
and this was something they did in their campaigns.</p>

<p>The link allows people to click and immediately be setup to Tweet the
following:</p>

<p><img class="center" src="/images/email-course/course-tweet.png" title="&ldquo;Build a Ruby Gem Email Course Tweet&rdquo;" ></p>

<p>It&rsquo;s difficult to determine the value of those tweets, but over 10 people have
clicked and tweeted. To me, this was surprising, but valuable.</p>

<p>I&rsquo;ll probably look to make it stand out a bit more to hopefully improve the
click-through.</p>

<h2>In Summary</h2>

<p>I spent a total of <strong>16 hours</strong> creating the <em>Build a Ruby Gem</em> email
course, which has since <strong>validated the need for a book</strong>. While interest
in a free email course doesn&rsquo;t guarantee a book on the same subject will sell, it was
the closet thing I could think to do outside of taking pre-orders.</p>

<p>I&rsquo;ve started writing the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary"><em>Build a Ruby Gem</em>
book</a>.
If you&rsquo;re interested in receiving updates on my progress, enter your email
below:</p>

<p><div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: open source" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>

</p>

<p>Members of this list will also receive a <strong>20% discount coupon</strong> when the book
launches!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Email Course - Weekend Update]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/"/>
    <updated>2013-12-09T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update</id>
    <content type="html"><![CDATA[<p><p>
  <em>I did an <strong>8-day sprint</strong> to launch my <a
  href="/courses/build-a-ruby-gem/" target="_blank"><strong>Build a Ruby Gem</strong> email course</a>
  and documented my progress through this series of blog posts.</em>
</p>

<p><a href="/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/">Day 2</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3/">Day 3</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/">Day 4</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/">Day 5</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/">Day 6</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/">Weekend Update</a>
<a href="/blog/how-i-launched-an-email-course/">Summary</a>
</p>

<p>Hope you had a great weekend!</p>

<p>Aside from hibernating inside due to the 6 extra inches of snow that wasn&rsquo;t
predicted, I spent some time with the course content this weekend. In efforts
to do a final proofread, I noticed something wasn&rsquo;t quite right. My goal for
this course was to smooth over the conventions of a Ruby gem that go much less
talked about. However, because I naively chose a gem that included Rails
integration as the example, the content ended up being more about Rails than I
had planned.</p>

<!--more-->


<p>I thought about it for a bit on Saturday and decided it was best to
rewrite the content around a simpler gem example. So that my Sunday!</p>

<p>I thought about how I ended up down this path and realized it&rsquo;s because I
didn&rsquo;t put enough planning in to the actual content. Early on, I sketched our a
very rough outline of the lessons in the course, but never thought about the
examples or which gem to use. I originally picked on of my recent written gems
for Rails and assumed it was simple enough that I could quickly gloss over the
Rails details. But the last thing I wanted was for the Rails topics to cloud
the steps need to build a basic Ruby Gem.</p>

<p>Examples are really hard. I ended up choosing a topic that is probably not
supremely useful in an everyday Ruby application, however, the conventions and
theories apply to any gem.</p>

<p>I do plan to cover Rails integration in a future publication. There are so many
hooks in to the framework when using a Railtie, it almost deserves a separate
course. I did save the removed content, so I&rsquo;ll have to figure out where it&rsquo;s
best presented.</p>

<h2>What I Accomplished This Weekend</h2>

<p>As mentioned above, I rewrote the course content around a simpler gem example.
It did simplify the course, so I hope it&rsquo;ll be easier to navigate for those
that are less familiar with Ruby.</p>

<p>I also designed a landing page for the course that I&rsquo;m really excited about.
Web design has always been one of the skills that I&rsquo;ve struggled with. I can generally
get it 70-80% there, but never have it look really polished. I&rsquo;ve spent
more time doing that lately and finally feel like I&rsquo;m hitting the mark.</p>

<p>The only thing left to do is proofread the course content and setup the course
drip campaign in Mailchimp.</p>

<h2>Launch Date</h2>

<p>I&rsquo;m excited to announce the course will launch this <strong>Wednesday (12/11) at 7AM
EST</strong>. I&rsquo;ll send an announcement on Wednesday morning with the registration
URL.</p>

<h2>Marketing</h2>

<p>Signups continued to trickle in throughout the weekend and I added another 30
subscriptions to this update list:</p>

<p><img class="center" src="/images/woh/mailchimp-weekend.png" title="&ldquo;Mailchimp Weekend results&rdquo;" ></p>

<p>The link in Ruby Weekly amounted to 117 newsletter subscription
(<strong>almost 25% of the total visits</strong>). There&rsquo;s been no other channel even close to
that level of conversion.</p>

<p>During the process of posting course updates, I&rsquo;ve come across a few other
channels that I thought would be valuable sources of traffic after launch. I
plan to post to those sites sometime Wednesday and am interested to see how
they do relative to the sources I&rsquo;ve been using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Email Course - Week of Hustle - Day 6]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/"/>
    <updated>2013-12-06T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6</id>
    <content type="html"><![CDATA[<p><p>
  <em>I did an <strong>8-day sprint</strong> to launch my <a
  href="/courses/build-a-ruby-gem/" target="_blank"><strong>Build a Ruby Gem</strong> email course</a>
  and documented my progress through this series of blog posts.</em>
</p>

<p><a href="/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/">Day 2</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3/">Day 3</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/">Day 4</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/">Day 5</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/">Day 6</a> |
<a href="/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/">Weekend Update</a>
<a href="/blog/how-i-launched-an-email-course/">Summary</a>
</p>

<p>Happy Friday!</p>

<p>This morning I&rsquo;m feeling well rested and finally on the home stretch. In the
middle of the week, the remaining work felt overwhelming at times and I have a
feeling that played in to me feeling exhausted.</p>

<p>Part of it was that each lesson has gotten substantially longer than I planned
for. I think once I get in to the flow of writing, I tend to document
everything for everyone. I don&rsquo;t think everyone will need this level of detail,
but I&rsquo;d hate to leave it out, only to find that some users were left confused
because of the lack thereof.</p>

<p>Here&rsquo;s how the word count of each lesson shakes out so far:</p>

<!--more-->


<ul>
<li>Day 1 &ndash; 941</li>
<li>Day 2 &ndash; 1067</li>
<li>Day 3 &ndash; 1738</li>
<li>Day 4 &ndash; 868</li>
<li>Day 5 &ndash; 1118</li>
</ul>


<p>Looking at this now, I&rsquo;ll probably go back and rework Day 3 to either split out
some of the content, or remove it during editing depending on its value.</p>

<h2>What I Accomplished Today</h2>

<p>This morning I finished Day 5 of the Build a Ruby Gem Email Course. I&rsquo;m happy
with where it left off and can now say there&rsquo;s only 1 (2 at most) more to
write. And even those will be more wrap-up. All the code is finished.</p>

<p>I got in to the flow of writing pretty quickly this morning. I naturally woke
up around 6am, so I was probably less in a daze when I started.</p>

<h2>Marketing</h2>

<p>I was looking forward to writing this section&hellip;Yesterday, I opened my inbox and saw this:</p>

<p><img class="center" src="/images/woh/ruby-weekly-link.png" title="&ldquo;A link to my Build a Ruby Gem email course in Ruby Weekly.&rdquo;" ></p>

<p>That&rsquo;s my course link in the <a href="http://rubyweekly.com/">Ruby Weekly</a> newsletter.
This newsletter is a great weekly summary of the Ruby community and has several
thousand subscribers. I had a feeling this would yield a significant bump in
subscriptions and page views and boy was that true.</p>

<p>Page views were up <strong>153%</strong> from the previous day:</p>

<p><img class="center" src="/images/woh/ga-day5.png" title="&ldquo;Google Analytics day 5 results&rdquo;" ></p>

<p>And subscriptions for course updates were up <strong>130%</strong>:</p>

<p><img class="center" src="/images/woh/mailchimp-day5.png" title="&ldquo;Mailchimp day 5 results&rdquo;" ></p>

<p>Herein lies the power of reaching your target audience&hellip;</p>

<p>I track conversions to the newsletter in Google Analytics and Ruby Weekly is
kind enough to send a lot a campaign identifier with the link. Here are the
channels that have converted the best:</p>

<p><img class="center" src="/images/woh/ga-conversions-day5.png" title="&ldquo;Google Analytics traffic conversions from day 5&rdquo;" ></p>

<p>30% of all newsletter clicks resulted in newsletter subscriptions&hellip;I&rsquo;ll take
it! Not far behind is the campaign I sent to my personal list announcing the
email course, and next is links from Twitter. However, what this doesn&rsquo;t show
is that only 7 visitors arrived from Twitter referral links, so while 14% is
pretty good, it&rsquo;s a sample size that&rsquo;s probably not worth trusting.</p>

<p>While I&rsquo;ve read plenty about the power of email, I&rsquo;ve not seen this effect in
person until now. With these quick marketing recaps, I feel like I&rsquo;ve only
scratched the surface. After the course launches, I plan to spend more time
with the numbers to get a better feel for what went well, and more so, what I
should avoid in future launches.</p>
]]></content>
  </entry>
  
</feed>
