<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asset pipeline | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/asset-pipeline/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-03-26T23:44:54-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Page Specific Javascript in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/page-specific-javascript-in-rails/"/>
    <updated>2014-02-04T20:51:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/page-specific-javascript-in-rails</id>
    <content type="html"><![CDATA[<p>The asset pipeline has made including javascript in Rails applications a breeze. Without any additional changes, the code included in your app is executed on every page. However, with a combination of CSS class scopes and a jQuery plugin, you can isolate certain javascript code to only run on specific pages.</p>

<h2>The Problem</h2>

<p>Imagine you have 2 pages in your application (landing and contact) and need an alert box to show up on the contact page only. How would you do it?</p>

<!--more-->


<p>Traditionally, if it&rsquo;s something small, you might bite the bullet and just include it in the view template:</p>

<pre><code>&lt;% # app/views/page/contact.html.erb %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;

&lt;%= javascript_tag do %&gt;
  alert("My example alert box.");
&lt;% end %&gt;
</code></pre>

<p>To me, this always felt dirty. Mixing UI and javascript concerns in an HTML template is easy to forget. Imagine your app has matured and want to change the message of the alert box. Rather than find an associated javascript file (the logical path), you&rsquo;re forced to dig through HTML to find the alert box text.</p>

<p>Another solution is to insert our javascript in to its own file:</p>

<pre><code>// app/assets/javascripts/alert.js

alert("My example alert box.");
</code></pre>

<p>And including this file only in the view we want it to execute:</p>

<pre><code>&lt;%# app/views/page/contact.html.erb %&gt;

&lt;%= javascript_include_tag "alert" %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;
</code></pre>

<p>And don&rsquo;t forget to include your new file in the list of files to be compiled:</p>

<pre><code># config/environments/production.rb

config.assets.precompile += %w( alert.js )
</code></pre>

<p>Like the previous solution, it too, mixes the concerns of HTML and javascript, but introduces a new problem &ndash; this javascript file is included and download separately from the rest of the app&rsquo;s asset. This causes the browser to make another request to the server, thus increasing the page load time and in turn, causing bad bad user pain (Ok, maybe not that bad…). But it’s still not ideal.</p>

<h2>The Solution</h2>

<p>The solution I&rsquo;ve found the most elegant requires adding CSS classes to the layout&rsquo;s body tag and using the <a href="https://github.com/Verba/jquery-readyselector">jquery-readyselector plugin</a>.</p>

<p>First, in order to scope the pages through CSS selectors, let&rsquo;s add some classes to our layout:</p>

<pre><code>&lt;%# app/views/layouts/application.html.erb %&gt;

&lt;body class="&lt;%= controller_name %&gt; &lt;%= action_name %&gt;"&gt;
  &lt;%= yield %&gt;
&lt;/body&gt;
</code></pre>

<p>Assuming your <code>contact</code> page action was inside a controller named <code>PagesController</code>, the rendered result would be the following:</p>

<pre><code>&lt;body class="pages contact"&gt;
  ...
&lt;/body&gt;
</code></pre>

<p>Add <a href="https://raw.github.com/Verba/jquery-readyselector/master/jquery.readyselector.js">this small bit of javavascript code</a> to a new file: <code>vendor/assets/javascripts/jquery-readyselector.js</code>.</p>

<p>Include the new plugin in the <code>application.js</code> manifest file:</p>

<pre><code>...
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require jquery-readyselector
//= require_tree .
</code></pre>

<p>Like before, let&rsquo;s put the javascript code in an isolated asset file, but scope it to the page:</p>

<pre><code>// app/assets/javascripts/alert.js.coffee

$(".pages.contact").ready -&gt;
  alert "My example alert box."
</code></pre>

<p>Because this file is picked up with the <code>//= require_tree .</code> line in the <code>application.js</code> manifest, there’s no additional step to load the asset. And that&rsquo;s it! Your <em>fancy</em> alert box will now only run on your contact page.</p>

<p>Let me what you think of this solution and if you’ve come across this issue before. I&rsquo;d love to hear about other solutions!</p>

<p><em>Note: In order for this solution to work with Turbolinks in Rails 4, I had to drag in the <a href="https://github.com/kossnocorp/jquery.turbolinks">jquery.turbolinks plugin</a>.</em></p>
]]></content>
  </entry>
  
</feed>
