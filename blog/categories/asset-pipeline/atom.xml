<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asset pipeline | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/asset-pipeline/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2013-12-14T20:55:27-05:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Page-Specific Javascript in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/page-specific-javascript-in-rails/"/>
    <updated>2013-12-14T07:05:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/page-specific-javascript-in-rails</id>
    <content type="html"><![CDATA[<p>The asset pipeline has made including javascript in Rails applications a
breeze. Without any additional changes, the code included in your app is
executed on every page. However, with a combination of CSS class scopes and
simple jQuery plugin, you can be sure certain javascript code will only run on
certain pages.</p>

<h2>The Problem</h2>

<p>jet&rsquo;s imagine you have 2 pages in your application (landing and contact) and
need an alert box to show up on the contact page only. How would you do it?</p>

<!--more-->


<p>Traditionally, if it&rsquo;s something small, you might bite the bullet and just
include it in the view template:</p>

<p>```
&lt;%# app/views/page/contact.html.erb %></p>

<h1>Contact</h1>


<p>This is the contact page</p>


<p>&lt;%= javascript_tag do %>
  alert(&ldquo;My example alert box.&rdquo;);
&lt;% end %>
```</p>

<p>To me, this has always felt dirty. Mixing the UI and javascript concerns in an
HTML template is easy to forget. Imagine your app has matured and want to
change the message of the alert box. Rather than find an associated javascript
file (the logical path), you&rsquo;re forced to dig through HTML and to find the
offending alert box text.</p>

<p>Another solution is to insert our javascript in to its own file:</p>

<p>```
// app/assets/javascripts/alert.js</p>

<p>alert(&ldquo;My example alert box.&rdquo;);
```
And including this file only in the view we want it to execute:</p>

<p>```
&lt;%# app/views/page/contact.html.erb %></p>

<p>&lt;%= javascript_include_tag &ldquo;alert&rdquo; %></p>

<h1>Contact</h1>


<p>This is the contact page</p>


<p>```</p>

<p>And don&rsquo;t forget to include your new file in the list of files to be compiled:</p>

<p>```</p>

<h1>config/environments/production.rb</h1>

<p>config.assets.precompile += %w( alert.js )
```</p>

<p>Like the previous solution, it too, mixes the concerns of HTML and javascript,
but brings on a new problem. This javascript file is included and download
separately from the rest of the app&rsquo;s asset. There requires the browser to make
another request to our host, thus delayed the page load time, causing user
experience to suffer.</p>

<h2>The Solution</h2>

<p>The solution I&rsquo;ve found the most elegant requires adding CSS classes to the
layout&rsquo;s body tag and using the <a href="https://github.com/Verba/jquery-readyselector">jquery-readyselector
plugin</a>.</p>

<p>Let&rsquo;s see what that looks like&hellip;</p>

<p>First, in order to scope the pages through CSS selectors, let&rsquo;s add some classes to our layout:</p>

<p>```
&lt;%# app/views/layouts/application.html.erb %></p>

<p><body class="<%= controller_name %> &lt;%= action_name %>&ldquo;>
  &lt;%= yield %>
</body>
```</p>

<p>Assuming your <code>contact</code> page action was inside a controller named
<code>PagesController</code>, the rendered result would be the following:</p>

<p><code>
&lt;body class="pages contact"&gt;
  ...
&lt;/body&gt;
</code>
Add <a href="https://raw.github.com/Verba/jquery-readyselector/master/jquery.readyselector.js">this small bit of javavascript
code</a>
to new file: <code>vendor/assets/javascripts/jquery-readyselector.js</code>.</p>

<p>Include your new plugin in the <code>application.js</code> manifest file:</p>

<p>```
// app/assets/javascripts/application.js</p>

<p>&hellip;
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require jquery-readyselector
```</p>

<p>Like before, let&rsquo;s put the javascript code in an isolated asset file, but
scope it to the page:</p>

<p>```
// app/assets/javascripts/alert.js</p>

<p>$(&ldquo;.pages.contact&rdquo;).ready(function(){
  alert(&ldquo;My example alert box.&rdquo;);
});
```
Don&rsquo;t forget to add your new asset file to the manifest file:</p>

<p>```
// app/assets/javascripts/application.js</p>

<p>&hellip;
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require jquery-readyselector
//= require alert
```
That&rsquo;s it! Your <em>fancy</em> alert box will now only run on your contact page.</p>

<p>Let me what you think of this solution. I&rsquo;d love to hear if you do it differently!</p>
]]></content>
  </entry>
  
</feed>
