<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: proxy | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/proxy/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2018-05-03T09:23:58-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Solving backwards compatibility in Ruby with a proxy object]]></title>
    <link href="http://brandonhilkert.com/blog/solving-backwards-compatibility-in-ruby-with-a-proxy-object/"/>
    <updated>2016-01-26T07:00:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/solving-backwards-compatibility-in-ruby-with-a-proxy-object</id>
    <content type="html"><![CDATA[<p>In a previous article, I <a href="http://brandonhilkert.com/blog/lessons-learned-from-building-a-ruby-gem-api/">documented the upcoming public API changes slated for Sucker Punch v2</a>. Because of a poor initial design, these API changes are <strong>backwards incompatible</strong>.</p>

<p>When I published the previous article, <a href="https://twitter.com/mperham/status/684529380446441472">Mike Perham rightly pointed out the opportunity to support the previous versions&rsquo;s API through an opt-in module</a>. I was hesitant to include support for the old syntax by default, but allowing a developer to require a file to get the old syntax made complete sense to me. My intent was never to abandon existing Sucker Punch users, but it felt necessary for the success of the project going forward.</p>

<!--more-->


<h2>The Problem</h2>

<p>The following is an example of enqueueing a background job with Sucker Punch using the old syntax:</p>

<p><code>
LogJob.new.async.perform("new_user")
</code></p>

<p>And with the new syntax:</p>

<p><code>
LogJob.perform_async("new_user")
</code></p>

<p><em>How do we support the old syntax in the new version?</em></p>

<p>Let&rsquo;s step back and reminder ourselves of what a typical job class looks like:</p>

<p>```
class LogJob
  include SuckerPunch::Job</p>

<p>  def perform(event)</p>

<pre><code>Log.new(event).track
</code></pre>

<p>  end
end
```</p>

<p>Important points to notice:</p>

<ol>
<li>Each job includes the <code>SuckerPunch::Job</code> module to gain access to asynchronous behavior</li>
<li>Each job executes its logic using the <code>perform</code> instance method</li>
<li>Each job passes arguments needed for its logic as arguments to the <code>perform</code> instance method</li>
</ol>


<h2>The Solution</h2>

<p>We&rsquo;ll start with the test:</p>

<p>```</p>

<h1>test/sucker_punch/async_syntax_test.rb</h1>

<p>require &lsquo;test_helper&rsquo;</p>

<p>module SuckerPunch
  class AsyncSyntaxTest &lt; Minitest::Test</p>

<pre><code>def setup
  require 'sucker_punch/async_syntax'
end

def test_perform_async_runs_job_asynchronously
  arr = []
  latch = Concurrent::CountDownLatch.new
  FakeLatchJob.new.async.perform(arr, latch)
  latch.wait(0.2)
  assert_equal 1, arr.size
end

private

class FakeLatchJob
  include SuckerPunch::Job

  def perform(arr, latch)
    arr.push true
    latch.count_down
  end
end
</code></pre>

<p>  end
end
```</p>

<p><em>Note: Some details of this are complex because the job&rsquo;s code is running in another thread. I&rsquo;ll walk through those details in a future article.</em></p>

<p>The basic sequence is:
1. require <code>sucker_punch/async_syntax</code>
2. Execute a background job using the <code>async</code> syntax
3. Assert changes made in that job were successful</p>

<p>Running the tests above, we get the following error:</p>

<p><code>``
1) Error:
SuckerPunch::AsyncSyntaxTest#test_perform_async_runs_job_asynchronously:
LoadError: cannot load such file -- sucker_punch/async_syntax
  /Users/bhilkert/Dropbox/code/sucker_punch/test/sucker_punch/async_syntax_test.rb:6:in</code>require'
  /Users/bhilkert/Dropbox/code/sucker_punch/test/sucker_punch/async_syntax_test.rb:6:in `setup'</p>

<p>1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
```</p>

<p>Ok, so the file doesn&rsquo;t exist. Let&rsquo;s create it and re-run the tests:</p>

<p><code>
1) Error:
SuckerPunch::AsyncSyntaxTest#test_perform_async_runs_job_asynchronously:
NoMethodError: undefined method `async' for #&lt;SuckerPunch::AsyncSyntaxTest::FakeLatchJob:0x007fbc73cbf548&gt;
  /Users/bhilkert/Dropbox/code/sucker_punch/test/sucker_punch/async_syntax_test.rb:12:in `test_perform_async_runs_job_asynchronously'
</code></p>

<p>Progress! The job doesn&rsquo;t have an <code>async</code> method. Let&rsquo;s add it:</p>

<p>```
module SuckerPunch
  module Job</p>

<pre><code>def async # &lt;--- New method
end
</code></pre>

<p>  end
end
```</p>

<p><em>Notice: We&rsquo;re monkey-patching the <code>SuckerPunch::Job</code> module. This will allow us to add methods to the background job since it&rsquo;s included in the job.</em></p>

<p>The tests now:</p>

<p><code>
1) Error:
SuckerPunch::AsyncSyntaxTest#test_perform_async_runs_job_asynchronously:
NoMethodError: undefined method `perform' for nil:NilClass
  /Users/bhilkert/Dropbox/code/sucker_punch/test/sucker_punch/async_syntax_test.rb:12:in `test_perform_async_runs_job_asynchronously'
</code></p>

<p>More progress&hellip;the <code>async</code> method we added returns nil, and because of the syntax <code>async.perform</code>, there&rsquo;s no <code>perform</code> method on the output of <code>async</code>. In short, we need to return something from <code>async</code> that responds to <code>perform</code> and can run the job.</p>

<p>In its most basic form, suppose we create a proxy object that responds to <code>perform</code>:</p>

<p><code>
class AsyncProxy
  def perform
  end
end
</code></p>

<p>We&rsquo;ll need to do some work in <code>perform</code> to execute the job, but this&rsquo;ll do for now. Now, let&rsquo;s integrate this new proxy to our <code>async_syntax.rb</code> file and return a new instance of the proxy from the <code>async</code> method:</p>

<p>```
module SuckerPunch
  module Job</p>

<pre><code>def async
  AsyncProxy.new # &lt;--- new instance of the proxy
end
</code></pre>

<p>  end</p>

<p>  class AsyncProxy</p>

<pre><code>def perform
end
</code></pre>

<p>  end
end
```</p>

<p>Running our tests gives us the following:</p>

<p><code>
1) Error:
SuckerPunch::AsyncSyntaxTest#test_perform_async_runs_job_asynchronously:
ArgumentError: wrong number of arguments (2 for 0)
  /Users/bhilkert/Dropbox/code/sucker_punch/lib/sucker_punch/async_syntax.rb:9:in `perform'
  /Users/bhilkert/Dropbox/code/sucker_punch/test/sucker_punch/async_syntax_test.rb:12:in `test_perform_async_runs_job_asynchronously'
</code></p>

<p>Now we&rsquo;re on to something. We see an error related to the number of arguments on the <code>perform</code> method. Because each job&rsquo;s argument list will be different, we need to find a way to be flexible for whatever&rsquo;s passed in, something like&hellip;the splat operator! Let&rsquo;s try it:</p>

<p>```
module SuckerPunch
  module Job</p>

<pre><code>def async
  AsyncProxy.new
end
</code></pre>

<p>  end</p>

<p>  class AsyncProxy</p>

<pre><code>def perform(*args) # &lt;--- Adding the splat operator, will handle any # of args
end
</code></pre>

<p>  end
end
```</p>

<p>The tests now:</p>

<p><code>
1) Failure:
SuckerPunch::AsyncSyntaxTest#test_perform_async_runs_job_asynchronously [/Users/bhilkert/Dropbox/code/sucker_punch/test/sucker_punch/async_syntax_test.rb:14]:
Expected: 1
Actual: 0
</code></p>

<p>At this point, we&rsquo;ve reached the end of test output suggesting the path forward. This error is saying, &ldquo;Your assertions failed.&rdquo;. This is good because it means our syntax implementation will work and it&rsquo;s just about executing the actual job code in the proxy&rsquo;s <code>perform</code> method.</p>

<p>We want to leverage our new syntax (<code>perform_async</code>) to run the actual job asynchronously so it passes through the standard code path. To do so, we&rsquo;ll need a reference to the original job in the proxy object. Let&rsquo;s pass that to the proxy during instantiation:</p>

<p>```
module SuckerPunch
  module Job</p>

<pre><code>def async
  AsyncProxy.new(self) # &lt;--- Pass the job instance
end
</code></pre>

<p>  end</p>

<p>  class AsyncProxy</p>

<pre><code>def initialize(job) # &lt;--- Handle job passed in
  @job = job
end

def perform(*args)
end
</code></pre>

<p>  end
end
```</p>

<p>Now that the proxy has a reference to the job instance, we can call the <code>perform_async</code> class method to execute the job:</p>

<p>```
module SuckerPunch
  module Job</p>

<pre><code>def async
  AsyncProxy.new(self)
end
</code></pre>

<p>  end</p>

<p>  class AsyncProxy</p>

<pre><code>def initialize(job)
  @job = job
end

def perform(*args)
  @job.class.perform_async(*args) # &lt;---- Execute the job
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>Lastly, the tests:</p>

<p>```
ress ENTER or type command to continue
bundle exec rake test TEST=&ldquo;test/sucker_punch/async_syntax_test.rb&rdquo;
Run options: &mdash;seed 43886</p>

<h1>Running:</h1>

<p>.</p>

<p>1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
```</p>

<p>Success!</p>

<p>Just like that, new users of Sucker Punch will be able to add <code>require 'sucker_punch/async_syntax'</code> to their projects to use the old syntax. This will allow existing projects using Sucker Punch to take advantage of the reworked internals without the need to make sweeping changes to the enqueueing syntax.</p>

<p>Support for the old syntax will be available for foreseeable future via this include. All new code/applications should use the new syntax going forward.</p>

<h2>Conclusion</h2>

<p>Before realizing a proxy object would work, I tinkered with <code>alias_method</code> and a handful of other approaches to latching on to the job&rsquo;s <code>perform</code> method and saving it off to execute later. While some combinations of these might have worked, the proxy object solution is simple and elegant. There&rsquo;s no magic, which means less maintenance going forward. The last thing I want is to make a breaking change, add support for the old syntax and find the support to be bug-ridden.</p>

<p>Ruby is incredibly flexible. Sometimes a 9-line class is enough to get the job done without reaching for an overly complex metaprogramming approach.</p>

<p>Having said all that, <a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch <code>v2</code> has been
released</a>!</p>
]]></content>
  </entry>
  
</feed>
