<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2013-11-12T20:22:21-05:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relative Timestamps in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/relative-timestamps-in-rails/"/>
    <updated>2013-11-27T11:05:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/relative-timestamps-in-rails</id>
    <content type="html"><![CDATA[<p>Comment systems and forum software made the relative timestamp format of &ldquo;X
hours ago&rdquo; a popular option. For good reason too&hellip;why print an absolute
timestamp so that people have to do the calculation in their head.</p>

<h3>Rails helpers to the rescue</h3>

<p>Rails has a view helper aptly named <code>time_ago_in_words</code>. So if you used the
<code>created_at</code> field from a record, once could easily embed a relative timestamp
in their views:</p>

<p><code>ruby
Posted: &lt;%= time_ago_in_words(post.created_at) %&gt; ago
</code></p>

<p>This is great! Er&hellip;except when a user sits on a page for a couple hours and
the post are no longer posted &ldquo;1 minute ago&rdquo;.</p>

<!--more-->


<p>Additionally, Rails 4 encourages the use of <a href="http://edgeguides.rubyonrails.org/caching_with_rails.html">russian doll
caching</a>, so if you
cached the comments of a post, the relative time of the post would never change
with time. No bueno!</p>

<h3>The Solution</h3>

<p><a href="http://timeago.yarp.com/">Timeago.js</a> is a jQuery plugin that converts
timestamps to their relative format. They also boast the following on their
website:</p>

<ul>
<li><p>Avoid timestamps dated &ldquo;1 minute ago&rdquo; even though the page was opened 10
minutes ago; timeago refreshes automatically.</p></li>
<li><p>You can take full advantage of page caching in your web applications, because
the timestamps aren&rsquo;t calculated on the server.</p></li>
<li><p>You get to use microformats like the cool kids.</p></li>
</ul>


<p>Here&rsquo;s how I use it&hellip;</p>

<p>Download the plugin and place in <code>vendor/javascripts/timeago.jquery.js</code>.</p>

<p>Add the following line to your <code>application.js</code> manifest file, so it&rsquo;s picked
up by the asset pipeline:</p>

<p><code>
//= require jquery.timeago
</code></p>

<p>Create a helper that you can use from your views that will do the dirty work for you:</p>

<p>``` ruby app/helpers/application.rb
Module ApplicationHelper
  def timeago(time, options = {})</p>

<pre><code>options[:class] ||= "timeago"
content_tag(
  :time,
  time.to_s,
  options.merge(datetime: time.getutc.iso8601)
) if time
</code></pre>

<p>  end
end
```</p>

<p>From your views, use the new helper:</p>

<p><code>ruby app/views/posts/show.html.erb
&lt;%= timeago(post.created_at) %&gt;
</code></p>

<p>This generates the following HTML tag:</p>

<p><code>html
&lt;time class="timeago" datetime="2013-11-08T20:05:37Z" title="2013-11-08 20:05:37 UTC"&gt;&lt;/time&gt;
</code></p>

<p>Now that <code>timeago.js</code> is loaded and you have the right HTML tags on the page,
you need to invoke the plugin and let it do its thing. Add the following to the
bottom of your layout for this to work on all pages of your application:</p>

<p>``` erb app/views/layouts/application.html.erb
&lt;%= javascript_tag do %>
  $(function() {</p>

<pre><code>$("time.timeago").timeago();
</code></pre>

<p>  });
&lt;% end %>
```</p>

<p>Once the <code>timeago()</code> function is called, the timestamp above will look like:</p>

<p><code>
&lt;time class="timeago" datetime="2013-11-08T20:05:37Z" title="2013-11-08 20:05:37 UTC"&gt;2 days ago&lt;/time&gt;
</code></p>

<p>And that&rsquo;s it&hellip;sit on the page long enough and watch the timestamps increment.
You&rsquo;ve now got yourself a solution that is dynamic and allows you to cache the
views until the cows come home!</p>

<h3>In Summary</h3>

<p>While Rails paved the way for simple relatively timestamps, moving this
mechanism to the client side makes sense. Another benefit you get is that the
plugin will interpret the local timezone for you. So even though we print the
UTC time in the HTML tag, the plugin will detect the local timezone from the
browser and adjust accordingly. In my experience, timezones are a huge pain and
the more you can offload to a solution like this, the better.</p>

<p>Happy timestamping!</p>
]]></content>
  </entry>
  
</feed>
