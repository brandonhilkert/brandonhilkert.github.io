<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2018-05-03T09:23:58-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Organizing Javascript in Rails Application with Turbolinks]]></title>
    <link href="http://brandonhilkert.com/blog/organizing-javascript-in-rails-application-with-turbolinks/"/>
    <updated>2015-06-30T16:10:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/organizing-javascript-in-rails-application-with-turbolinks</id>
    <content type="html"><![CDATA[<p>It&rsquo;s impossible to escape Javascript in a Rails application. From a tiny script to a full-on Javascript framework, websites are becoming more and more reliant on Javascript, whether we like it or not.</p>

<p>Several articles back, I documented <a href="http://brandonhilkert.com/blog/page-specific-javascript-in-rails/">how I handle page-specific Javascript in a Rails application</a>. My solution included a third-party jQuery plugin that did some magic on the <code>$(document).ready</code> function in combination with CSS style scoping to limit the functionality.</p>

<!--more-->


<p>The plugin worked well for awhile, but with the advent of Turbolinks, the
solution felt less and less appropriate. I&rsquo;ve since settled on some techniques
to not only handle page-specific Javascript, but overall organization and structure of Javascript within a Rails application. I&rsquo;ve used it in a hand full of large applications over the past few months and it&rsquo;s held up incredibly well.</p>

<h2>The Problem</h2>

<p>Using &ldquo;sprinkles&rdquo; of Javascript throughout a Rails application can get unwieldly fast if we&rsquo;re not consistent. What we ideally want is some techniques and guidelines that can keep the Javascript organized in our projects. <strong>We also don&rsquo;t want to have to disable Turbolinks to make our application work as we expect</strong>.</p>

<h2>The Solution</h2>

<p>Generally, javascript behavior can be boiled down to the following categories:</p>

<ol>
<li>Behavior that&rsquo;s &ldquo;always on&rdquo;</li>
<li>Behavior that&rsquo;s triggered from a user action</li>
</ol>


<p>But first, a few things to will help us stay organized&hellip;</p>

<h2>Class Scoping</h2>

<p>I still like to scope the body element of the layout(s) with the controller and action name:</p>

<p><code>
&lt;body class="&lt;%= controller_name %&gt; &lt;%= action_name %&gt;"&gt;
  &lt;%= yield %&gt;
&lt;/body&gt;
</code></p>

<p>This not only let&rsquo;s us control access to the DOM through jQuery if we need to, but also provides some top-level styling classes to allow us to easily add page-specific CSS.</p>

<p>In the case we&rsquo;re working on the proverbial blog posts application, the body tag ends up looking like:</p>

<p><code>
&lt;body class="posts index"&gt;
  &lt;%= yield %&gt;
&lt;/body&gt;
</code></p>

<p>This gives us the opportunity to scope CSS and Javascripts to all <code>posts</code>-related pages in the controller with the <code>.posts</code> class, or down to the specific page using a combination of both the controller and action: <code>.posts.index</code>.</p>

<h2>Default Application Manifest</h2>

<p>Here&rsquo;s the default <code>app/assets/javascripts/application.js</code>:</p>

<p><code>
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require_tree .
</code></p>

<p>I start by removing the line <code>//= require_tree .</code>. I do this because if you don&rsquo;t, the javascript files in the folder will be loaded in alphabetical order. As you&rsquo;ll see below, there&rsquo;s an initialization file that needs to be loaded before other Javascript. We&rsquo;ll also remove the comments from the top of the file to preserve space.</p>

<p>So we&rsquo;re left with:</p>

<p><code>
//= require jquery
//= require jquery_ujs
//= require turbolinks
</code></p>

<h2>Initialization</h2>

<p>Let&rsquo;s start by adding the file <code>app/assets/javascripts/init.coffee</code> with the following:</p>

<p>```
window.App ||= {}</p>

<p>App.init = &ndash;>
  $(&ldquo;a, span, i, div&rdquo;).tooltip()</p>

<p>$(document).on &ldquo;turbolinks:load&rdquo;, &ndash;>
  App.init()
```</p>

<p>Let&rsquo;s dig in to each pagef of this:</p>

<p><code>
window.App ||= {}
</code></p>

<p>We&rsquo;re creating the <code>App</code> object on window so the functionality added to the object is available throughout the application.</p>

<p>Next, we define an <code>init()</code> function on <code>App</code> to initialize common jQuery plugins and other Javascript libraries:</p>

<p><code>
App.init = -&gt;
  $("a, span, i, div").tooltip()
</code></p>

<p>The call to <code>$("a, span, i, div").tooltip()</code> initializes Bootstrap Tooltips. This is an example of the type of libraries that can/should be setup here. Obviously, if you&rsquo;re not using Bootstrap tooltips, you would haven&rsquo;t this here, but coupled with the next line, we&rsquo;ll see why this works.</p>

<p>As many have found out the hard way, <strong>when Turbolinks is enabled</strong> in a project, jQuery <code>$(document).ready</code> functions <strong>don&rsquo;t get fired from page to page</strong>. In order to call the <code>init()</code> function on each page transition, we&rsquo;ll hook in to the <code>turbolinks:load</code> event:</p>

<p><code>
$(document).on "turbolinks:load", -&gt;
  App.init()
</code>
<em>Note: the <code>turbolinks:load</code> transition is also triggered on the well known document ready event, so there&rsquo;s no need to add any special handling for first page load.</em></p>

<p>Lastly, we need to add <code>init.coffee</code> to the asset pipeline:</p>

<p><code>
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require init
</code></p>

<h2>&ldquo;Always On&rdquo; Javascript Functionality</h2>

<p>Now with the defaults out of the way, let&rsquo;s take a look at adding some behavior.</p>

<p>Let&rsquo;s assume one of our pages will show a Javascript graph of data. We&rsquo;ll start by adding a file with a name related to that responsibility.</p>

<p>```</p>

<h1>app/assets/javascripts/app.chart.coffee</h1>

<p>class App.Chart
  constructor: (@el) &ndash;></p>

<pre><code># intialize some stuff
</code></pre>

<p>  render: &ndash;></p>

<pre><code># do some stuff
</code></pre>

<p>$(document).on &ldquo;turbolinks:load&rdquo;, &ndash;>
  chart = new App.Chart $(&ldquo;#chart&rdquo;)
  chart.render()</p>

<p>```</p>

<p>A few things to note here&hellip;</p>

<h3>Structure</h3>

<p>I created a class in the <code>App</code> namespace &mdash; the same we initialized in <code>app/assets/javascripts/init.coffee</code>. This gives us an isolated class that has a clear responsiblity. Like our Ruby, we want to do our best to keep its responsibilities to a minimium.</p>

<p>You might notice the file takes the form:</p>

<p>```
|
|
class definition
|
|</p>

<p>|
invocation
|
```</p>

<p>While this may seem obvious, it&rsquo;s an important point to keep in mind. I&rsquo;ve found it offers a predictable structure that allows me to open any coffeescript file that we&rsquo;ve written in the project and generally know where to look for what.</p>

<h3>Turbolinks-Proof</h3>

<p>We called this &ldquo;Always On&rdquo; functionality because, as you probably noticed, using the following event listener <code>$(document).on "turbolinks:load", -&gt;</code>, we know with Turbolinks, this gets triggered on every page transition.</p>

<h3>Add to Manifest</h3>

<p>Because we removed the <code>//= require_tree .</code> line in the default <code>application.js</code> manifest file, we&rsquo;ll have to add our chart file to be included in the asset pipeline (last line):</p>

<p><code>
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require init
//= require app.chart
</code></p>

<h3>Page-Specific Javascript</h3>

<p>Uh oh, so maybe we don&rsquo;t want the graph to show up on every page! In this case, we&rsquo;re looking for &ldquo;Always On&rdquo; functionality for specific pages <strong>ONLY</strong>.</p>

<p>We can limit the page pages certain functionality is loaded on by using the classes we added to the body of the layout. In this case, a small conditional to the invocation can prevent this being triggered on pages it shouldn&rsquo;t be.</p>

<p><code>
$(document).on "turbolinks:load", -&gt;
  return unless $(".posts.index").length &gt; 0
  f = new App.Chart $("#chart")
  f.render()
</code></p>

<p>We added <code>return unless $(".posts.index").length &gt; 0</code> to make sure <code>App.Chart</code> never gets instantiated if we&rsquo;re on the <code>.posts.index</code> page. While this may seem verbose, I&rsquo;ve found that it&rsquo;s not very common to need page-specific functionality. There are probably plenty of libraries that do something similar, like <a href="http://brandonhilkert.com/blog/page-specific-javascript-in-rails/">the one I previously suggested</a>. <strong>However, to me, limiting javascript to a single page and very explicit when I read the code, it&rsquo;s almost never worth dragging in a separate plugin for this. YMMV.</strong></p>

<h2>User-Triggered Javascript</h2>

<p>This type of Javascript is exactly what you&rsquo;d think &mdash; Javascript invoked as a result of a user clicking or performing some type of action. You&rsquo;re probably thinking, &ldquo;I know how to do this, I&rsquo;ll just add a random file to the javascripts directory and throw in some jQuery&rdquo;. While this will functionally work just fine, I&rsquo;ve found that keeping the structure of these files similar will give you great piece of mind going forward.</p>

<h3>&ldquo;data-behavior&rdquo; Attribute</h3>

<p>Let&rsquo;s assume there&rsquo;s a link in the user&rsquo;s account that allows them to update their credit card. In this case, we have the following:</p>

<p><code>
&lt;%= link_to "Update Credit Card", "#", data: { behavior: "update-credit-card" } %&gt;
</code></p>

<p>You&rsquo;ll probably notice the <code>data-behavior</code> tag being added to the link. This is the key we&rsquo;ll use to attach the Javascript behavior.</p>

<p>We could have added a unique class to the link:</p>

<p><code>
&lt;%= link_to "Update Credit Card", "#", class: "update-credit-card" %&gt;
</code></p>

<p>or, perhaps, even assign an ID:</p>

<p><code>
&lt;%= link_to "Update Credit Card", "#", id: "update-credit-card" %&gt;
</code></p>

<p>Both of these techniques don&rsquo;t really indicate whether we added the <code>update-card-card</code> for the use of CSS styling, or to attach Javascript behavior. So in my applications, I leave classes for <strong>styling ONLY</strong>.</p>

<p>So now to the Javascript:</p>

<p>```
App.Billing =
  update: &ndash;></p>

<pre><code># do some stuff
</code></pre>

<p>$(document).on &ldquo;click&rdquo;, &ldquo;[data-behavior~=update-credit-card]&rdquo;, =>
  App.Billing.update()
```</p>

<p>We can use the selector <code>[data-behavior~=update-credit-card]</code> to latch on to the <code>data-behavior</code> tag we defined in the view. We use the <code>on</code> jQuery method to ensure that we&rsquo;re listening to this event whether the element&rsquo;s on the page or not. This is what allows us to load this Javascript when on other pages and have it still work when a user clicks through to the page with the actual link on it.</p>

<p>We could latch on to the <code>change</code> event, or whatever is appropriate to the element we&rsquo;re adding behavior.</p>

<h3>Add to Manifest</h3>

<p>Again, because Javascripts assets we add to <code>app/assets/javascripts</code> won&rsquo;t automatically be inserted in to the asset pipeline, we&rsquo;ll add <code>//= require app.billing</code> to the manifest file:</p>

<p><code>
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require init
//= require app.chart
//= require app.billing
</code></p>

<h2>Summary</h2>

<p>Using the techniques above, we can keep the Javascript in our Rails applications organized and predictable. We can rest easy knowing the files will all generally look the same. There&rsquo;s not been any uses cases where this structure hasn&rsquo;t worked for me personally.</p>

<p>One thing that makes me feel good about this approach is there&rsquo;s no real magic or extra plugins. It&rsquo;s using all the tools we already have in a basic Rails application, which is one less thing to maintain and keep up to date. Less depedencies == less pain down the road.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Page Specific Javascript in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/page-specific-javascript-in-rails/"/>
    <updated>2014-02-04T20:51:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/page-specific-javascript-in-rails</id>
    <content type="html"><![CDATA[<p><em>UPDATE: I&rsquo;ve written an updated article on this and the larger topic of
<a href="/blog/organizing-javascript-in-rails-application-with-turbolinks/">organizing Javascript within a Rails project that includes
Turbolinks</a>.</em></p>

<p>The asset pipeline has made including javascript in Rails applications a breeze. Without any additional changes, the code included in your app is executed on every page. However, with a combination of CSS class scopes and a jQuery plugin, you can isolate certain javascript code to only run on specific pages.</p>

<h2>The Problem</h2>

<p>Imagine you have 2 pages in your application (landing and contact) and need an alert box to show up on the contact page only. How would you do it?</p>

<!--more-->


<p>Traditionally, if it&rsquo;s something small, you might bite the bullet and just include it in the view template:</p>

<pre><code>&lt;% # app/views/page/contact.html.erb %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;

&lt;%= javascript_tag do %&gt;
  alert("My example alert box.");
&lt;% end %&gt;
</code></pre>

<p>To me, this always felt dirty. Mixing UI and javascript concerns in an HTML template is easy to forget. Imagine your app has matured and want to change the message of the alert box. Rather than find an associated javascript file (the logical path), you&rsquo;re forced to dig through HTML to find the alert box text.</p>

<p>Another solution is to insert our javascript in to its own file:</p>

<pre><code>// app/assets/javascripts/alert.js

alert("My example alert box.");
</code></pre>

<p>And including this file only in the view we want it to execute:</p>

<pre><code>&lt;%# app/views/page/contact.html.erb %&gt;

&lt;%= javascript_include_tag "alert" %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;
</code></pre>

<p>And don&rsquo;t forget to include your new file in the list of files to be compiled:</p>

<pre><code># config/environments/production.rb

config.assets.precompile += %w( alert.js )
</code></pre>

<p>Like the previous solution, it too, mixes the concerns of HTML and javascript, but introduces a new problem &ndash; this javascript file is included and download separately from the rest of the app&rsquo;s asset. This causes the browser to make another request to the server, thus increasing the page load time and in turn, causing bad bad user pain (Ok, maybe not that bad…). But it’s still not ideal.</p>

<h2>The Solution</h2>

<p>The solution I&rsquo;ve found the most elegant requires adding CSS classes to the layout&rsquo;s body tag and using the <a href="https://github.com/Verba/jquery-readyselector">jquery-readyselector plugin</a>.</p>

<p>First, in order to scope the pages through CSS selectors, let&rsquo;s add some classes to our layout:</p>

<pre><code>&lt;%# app/views/layouts/application.html.erb %&gt;

&lt;body class="&lt;%= controller_name %&gt; &lt;%= action_name %&gt;"&gt;
  &lt;%= yield %&gt;
&lt;/body&gt;
</code></pre>

<p>Assuming your <code>contact</code> page action was inside a controller named <code>PagesController</code>, the rendered result would be the following:</p>

<pre><code>&lt;body class="pages contact"&gt;
  ...
&lt;/body&gt;
</code></pre>

<p>Add <a href="https://raw.github.com/Verba/jquery-readyselector/master/jquery.readyselector.js">this small bit of javavascript code</a> to a new file: <code>vendor/assets/javascripts/jquery-readyselector.js</code>.</p>

<p>Include the new plugin in the <code>application.js</code> manifest file:</p>

<pre><code>...
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require jquery-readyselector
//= require_tree .
</code></pre>

<p>Like before, let&rsquo;s put the javascript code in an isolated asset file, but scope it to the page:</p>

<pre><code>// app/assets/javascripts/alert.js.coffee

$(".pages.contact").ready -&gt;
  alert "My example alert box."
</code></pre>

<p>Because this file is picked up with the <code>//= require_tree .</code> line in the <code>application.js</code> manifest, there’s no additional step to load the asset. And that&rsquo;s it! Your <em>fancy</em> alert box will now only run on your contact page.</p>

<p>Let me what you think of this solution and if you’ve come across this issue before. I&rsquo;d love to hear about other solutions!</p>

<p><strong>If you&rsquo;re looking for solutions that work with Rails 4 and Turbolinks, see my
latest article on <a href="/blog/organizing-javascript-in-rails-application-with-turbolinks/">organizing Javascript in a Rails application that includes
Turbolinks</a>.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relative Timestamps in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/relative-timestamps-in-rails/"/>
    <updated>2014-01-13T07:01:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/relative-timestamps-in-rails</id>
    <content type="html"><![CDATA[<p>Facebook’s news feed popularized the relative timestamp format of &ldquo;X hours ago&rdquo;. For good reason too&hellip;why print an absolute timestamp so that people have to do the relative calculation in their head? It’s one less step for the user, and to be fair, pretty easy to implement.</p>

<h2>Rails helpers to the rescue</h2>

<p>Rails has a view helper aptly named <code>time_ago_in_words</code>. If you use the
<code>created_at</code> attribute from a record, you could easily reference a relative timestamp from a corresponding view:</p>

<pre><code># app/views/posts/show.html.erb

Posted: &lt;%= time_ago_in_words(post.created_at) %&gt; ago
</code></pre>

<p>That’s great! But not enough…what happens when a user stays on the page for 10 min. and the latest post was no longer posted &ldquo;1 minute ago”? Asking them to refresh the page every 10 minutes is no longer an acceptable answer.</p>

<!--more-->


<p>Additionally, Rails 4 encourages the use of <a href="http://edgeguides.rubyonrails.org/caching_with_rails.html">Russian doll caching</a>, so if you cached record and use <code>time_ago_in_words</code>, the relative time of the post would never change. No bueno!</p>

<p>Fortunately, we can do better…</p>

<h2>The Solution</h2>

<p><a href="http://timeago.yarp.com/">Timeago.js</a> is a <a href="http://jquery.com/">jQuery</a> plugin that converts timestamps to a relative format. They also boast the following on their website:</p>

<ul>
<li><p>Avoid timestamps dated &ldquo;1 minute ago&rdquo; even though the page was opened 10 minutes ago; timeago refreshes automatically</p></li>
<li><p>You can take full advantage of page caching in your web applications, because the timestamps aren&rsquo;t calculated on the server</p></li>
<li><p>You get to use microformats like the cool kids</p></li>
</ul>


<h2>The Implementation</h2>

<ol>
<li><p>Download the plugin and place it in <code>vendor/javascripts/timeago.jquery.js</code></p></li>
<li><p>Add the following line to your <code>application.js</code> manifest file, so it&rsquo;s picked up by the <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset pipeline</a>:</p>

<pre><code> //= require jquery.timeago
</code></pre></li>
<li><p>Create a helper that you can use from your views that will do the dirty work for you:</p>

<pre><code> # app/helpers/time.rb
 module TimeHelper
   def timeago(time, options = {})
     options[:class] ||= "timeago"
     content_tag(
       :time,
       time.to_s,
       options.merge(datetime: time.getutc.iso8601)
     ) if time
   end
 end
</code></pre></li>
<li><p>Reference the new helper method from your view &ndash; passing in the time attribute of the model:</p>

<pre><code> # app/views/posts/show.html.erb
 Posted: &lt;%= timeago(post.created_at) %&gt;
</code></pre>

<p> This generates the following HTML tag:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"&gt;&lt;/time&gt;
</code></pre>

<p> Now that <code>timeago.js</code> is loaded and you have the right HTML tags on the page, you need to invoke the plugin and let it do its thing.</p></li>
<li><p>Add the following to the bottom of your layout and reload the page:</p>

<pre><code> # app/views/layouts/application.html.erb
 &lt;body&gt;
   &lt;%= javascript_tag do %&gt;
     $(function() {
       $("time.timeago").timeago();
     });
   &lt;% end %&gt;
 &lt;/body&gt;
</code></pre>

<p> Once the <code>timeago()</code> function is called, the timestamp above will look like:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"
 title="2013-11-08 20:05:37 UTC"&gt;2 days ago&lt;/time&gt;
</code></pre></li>
</ol>


<p>And that&rsquo;s it&hellip;sit on the page long enough and watch the timestamps increment. You&rsquo;ve now got yourself a solution that is dynamic and allows you to cache the views until the cows come home!</p>

<h2>Summary</h2>

<p>Even though Rails has a simple mechanism for displaying relative timestamps in views, moving this functionality to the client side makes sense.</p>

<p>Another benefit you get is timezone interpretation. Even though we print the UTC time in the HTML tag, the plugin will detect the local timezone from the browser and adjust accordingly. In my experience, timezones are a huge pain and the more you can offload them to a solution like this, the better.</p>

<p>Happy time-stamping!</p>

<p><em>Note: Since writing this, I discovered the <a href="https://github.com/37signals/local_time">local_time gem</a> from 37Signals. They’ve been a big advocate of moving relative timestamp calculation to the client-side. Their gem uses <a href="http://momentjs.com/">moment.js</a> instead of timago.js and it includes <a href="https://github.com/37signals/local_time/blob/master/app/assets/javascripts/local_time.js.coffee#L157">code to update the timestamps if Turbolinks is being used</a>. It’s worth checking out if you do this on a regular basis or use the moment.js library for other reasons.</em></p>

<p>P.S. In my book, <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=relative-timestamps-post">Build a Ruby Gem</a>, I cover how to create a Rails engine gem with the above functionality.</p>
]]></content>
  </entry>
  
</feed>
