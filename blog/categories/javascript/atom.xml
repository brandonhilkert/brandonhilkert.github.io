<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-01-16T19:43:46-05:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Relative Timestamps in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/relative-timestamps-in-rails/"/>
    <updated>2014-01-13T07:01:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/relative-timestamps-in-rails</id>
    <content type="html"><![CDATA[<p>Facebook’s news feed popularized the relative timestamp format of &ldquo;X hours ago&rdquo;. For good reason too&hellip;why print an absolute timestamp so that people have to do the relative calculation in their head? It’s one less step for the user, and to be fair, pretty easy to implement.</p>

<h2>Rails helpers to the rescue</h2>

<p>Rails has a view helper aptly named <code>time_ago_in_words</code>. If you use the
<code>created_at</code> attribute from a record, you could easily reference a relative timestamp from a corresponding view:</p>

<pre><code># app/views/posts/show.html.erb

Posted: &lt;%= time_ago_in_words(post.created_at) %&gt; ago
</code></pre>

<p>That’s great! But not enough…what happens when a user stays on the page for 10 min. and the latest post was no longer posted &ldquo;1 minute ago”? Asking them to refresh the page every 10 minutes is no longer an acceptable answer.</p>

<!--more-->


<p>Additionally, Rails 4 encourages the use of <a href="http://edgeguides.rubyonrails.org/caching_with_rails.html">Russian doll caching</a>, so if you cached record and use <code>time_ago_in_words</code>, the relative time of the post would never change. No bueno!</p>

<p>Fortunately, we can do better…</p>

<h2>The Solution</h2>

<p><a href="http://timeago.yarp.com/">Timeago.js</a> is a <a href="http://jquery.com/">jQuery</a> plugin that converts timestamps to a relative format. They also boast the following on their website:</p>

<ul>
<li><p>Avoid timestamps dated &ldquo;1 minute ago&rdquo; even though the page was opened 10 minutes ago; timeago refreshes automatically</p></li>
<li><p>You can take full advantage of page caching in your web applications, because the timestamps aren&rsquo;t calculated on the server</p></li>
<li><p>You get to use microformats like the cool kids</p></li>
</ul>


<h2>The Implementation</h2>

<ol>
<li><p>Download the plugin and place it in <code>vendor/javascripts/timeago.jquery.js</code></p></li>
<li><p>Add the following line to your <code>application.js</code> manifest file, so it&rsquo;s picked up by the <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset pipeline</a>:</p>

<pre><code> //= require jquery.timeago
</code></pre></li>
<li><p>Create a helper that you can use from your views that will do the dirty work for you:</p>

<pre><code> # app/helpers/time.rb

 Module TimeHelper
   def timeago(time, options = {})
     options[:class] ||= "timeago"
     content_tag(
       :time,
       time.to_s,
       options.merge(datetime: time.getutc.iso8601)
     ) if time
   end
 end
</code></pre></li>
<li><p>Reference the new helper method from your view &ndash; passing in the time attribute of the model:</p>

<pre><code> # app/views/posts/show.html.erb

 Posted: &lt;%= timeago(post.created_at) %&gt;
</code></pre>

<p> This generates the following HTML tag:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"
 title="2013-11-08 20:05:37 UTC"&gt;&lt;/time&gt;
</code></pre>

<p> Now that <code>timeago.js</code> is loaded and you have the right HTML tags on the page, you need to invoke the plugin and let it do its thing.</p></li>
<li><p>Add the following to the bottom of your layout and reload the page:</p>

<pre><code> # app/views/layouts/application.html.erb

 &lt;body&gt;
   &lt;%= javascript_tag do %&gt;
     $(function() {
       $("time.timeago").timeago();
     });
   &lt;% end %&gt;
 &lt;/body&gt;
</code></pre>

<p> Once the <code>timeago()</code> function is called, the timestamp above will look like:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"
 title="2013-11-08 20:05:37 UTC"&gt;2 days ago&lt;/time&gt;
</code></pre></li>
</ol>


<p>And that&rsquo;s it&hellip;sit on the page long enough and watch the timestamps increment. You&rsquo;ve now got yourself a solution that is dynamic and allows you to cache the views until the cows come home!</p>

<h2>Summary</h2>

<p>Even though Rails has a simple mechanism for displaying relative timestamps in views, moving this functionality to the client side makes sense.</p>

<p>Another benefit you get is timezone interpretation. Even though we print the UTC time in the HTML tag, the plugin will detect the local timezone from the browser and adjust accordingly. In my experience, timezones are a huge pain and the more you can offload them to a solution like this, the better.</p>

<p>Happy time-stamping!</p>

<p><em>Note: Since writing this, I discovered the <a href="https://github.com/37signals/local_time">local_time gem</a> from 37Signals. They’ve been a big advocate of moving relative timestamp calculation to the client-side. Their gem uses <a href="http://momentjs.com/">moment.js</a> instead of timago.js and it includes <a href="https://github.com/37signals/local_time/blob/master/app/assets/javascripts/local_time.js.coffee#L157">code to update the timestamps if Turbolinks is being used</a>. It’s worth checking out if you do this on a regular basis or use the moment.js library for other reasons.</em></p>

<p>P.S. In my book, <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=relative-timestamps-post">Build a Ruby Gem</a>, I cover how to create a Rails engine gem with the above functionality.</p>
]]></content>
  </entry>
  
</feed>
