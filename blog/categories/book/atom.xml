<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-03-19T08:06:45-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Gem Configuration Patterns]]></title>
    <link href="http://brandonhilkert.com/blog/ruby-gem-configuration-patterns/"/>
    <updated>2014-03-17T20:26:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/ruby-gem-configuration-patterns</id>
    <content type="html"><![CDATA[<p>_This is one of 3 posts leading up the the launch of my
[__Build a Ruby Gem book__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=sucker-punch)
on __Thursday, March 27__! Sign up below to receive a **20% discount coupon** when the book launches._

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: book" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>




</p>

<p>The world isn’t black and white (as much as we’d like to believe it is). Just because our gem’s functionality may work for us, doesn’t mean it’ll work for everyone.</p>

<p>Fortunately, we can give users the ability to add custom configuration data, allowing them to adapt our code to their own use. In this post, we&rsquo;ll adapt the <a href="https://github.com/brandonhilkert/mega_lotto"><code>mega_lotto</code> gem</a> to take a configuration block that modifies the number of integers returned from the <code>#draw</code> method output.</p>

<!--more-->


<h2>Use Case</h2>

<p>Our <code>mega_lotto</code> gem provides the functionality to randomly draw 6 numbers. However, let’s assume that someone else has taken interest in the code for our gem, but needs the code to generate 10 random numbers within the same range.</p>

<p>One option would be for them to fork the code and modify the gem to fit their needs. However, now there’s a randomly forked gem with the same name and it’s unclear why one should be used over the other, especially if no changes to the <code>README</code> were made.</p>

<p>Rather than go down that path, we can make our existing <code>mega_lotto</code> gem more flexible by returning 6 integers by default, while also providing an interface to customize this value for those with the need.</p>

<p>Our goal is to adapt our gem to take a configuration block like this:</p>

<p><code>ruby
MegaLotto.configure do |config|
  config.drawing_count = 10
end
</code></p>

<h2>Implementation</h2>

<p>Let’s first write some specs for the desired functionality. Because the <code>.configure</code> method above is off the main <code>MegaLotto</code> namespace, we’ll create the spec file <code>spec/mega_lotto_spec.rb</code>. With this spec, we’ll assert that after running the configuration block above, the <code>#drawing</code> method returns an array (like before), but this time with 10 integers instead:</p>

<p>```ruby
require &ldquo;spec_helper&rdquo;</p>

<p>describe MegaLotto do
  describe &ldquo;#configure&rdquo; do</p>

<pre><code>before do
  MegaLotto.configure do |config|
    config.drawing_count = 10
  end
end

it "returns an array with 10 elements" do
  draw = MegaLotto::Drawing.new.draw

  expect(draw).to be_a(Array)
  expect(draw.size).to eq(10)
end
</code></pre>

<p>  end
end
```</p>

<p>This spec serves as higher level integration spec because it’s accessing the public API of our gem. Because of this, we can be sure that once this spec passes, our implementation is complete. As expected, when we run this spec, it fails:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto#config returns an array with 10 elements</p>

<pre><code> Failure/Error: MegaLotto.configure do |config|
 NoMethodError:
   undefined method `configure` for MegaLotto:Module
 # ./spec/mega_lotto_spec.rb:6
</code></pre>

<p>Finished in 0.00131 seconds
1 example, 1 failure
```</p>

<p>Now that we have a spec to work against, let’s continue our implementation.</p>

<p>The failure above complained that there was no <code>MegaLotto.configure</code> method, so let’s add it:</p>

<p><code>ruby
module MegaLotto
  def self.configure
  end
end
</code></p>

<p>Re-running our specs gives us a different failure message this time:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto#configure returns an array with 10 elements</p>

<pre><code> Failure/Error: expect(draw.size).to eq(10)

   expected: 10
        got: 6

   (compared using ==)
 # ./spec/mega_lotto_spec.rb:15
</code></pre>

<p>Finished in 0.00246 seconds
1 example, 1 failure
```</p>

<p>The output now shows that the code still returned 6 integers, which we expected because our <code>.configure</code> method hasn’t done anything yet.</p>

<p>Because we’re using a object-oriented language like Ruby, we can create a <code>Configuration</code> class whose responsibility will be…(drumroll)….configuration!</p>

<p>Let’s start with some specs:</p>

<p>```ruby</p>

<h1>spec/mega_lotto/configuration_spec.rb</h1>

<p>require &ldquo;spec_helper&rdquo;</p>

<p>module MegaLotto
  describe Configuration do</p>

<pre><code>describe "#drawing_count" do
  it "default value is 6" do
    Configuration.new.drawing_count = 6
  end
end

describe "#drawing_count=" do
  it "can set value" do
    config = Configuration.new
    config.drawing_count = 7
    expect(config.drawing_count).to eq(7)
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Running the configuration specs produces:</p>

<p><code>bash
/Users/bhilkert/Dropbox/code/mega_lotto/spec/
mega_lotto/configuration_spec.rb:4:in `&lt;module:MegaLotto&gt;`:
uninitialized constant MegaLotto::Configuration (NameError)
</code></p>

<p>Let’s add the <code>Configuration</code> class:</p>

<p>```ruby</p>

<h1>lib/mega_lotto/configuration.rb</h1>

<p>module MegaLotto
  class Configuration
  end
end
```</p>

<p>Let’s try again:</p>

<p><code>bash
/Users/bhilkert/Dropbox/code/mega_lotto/spec/
mega_lotto/configuration_spec.rb:4:in `&lt;module:MegaLotto&gt;`:
uninitialized constant MegaLotto::Configuration (NameError)
</code></p>

<p>What??? Same message…Even though we added the <code>Configuration</code> class above, our gem doesn’t load it. So we can dive in to the entry file <code>lib/mega_lotto.rb</code> and add the appropriate require statement:</p>

<p>```ruby
require &ldquo;mega_lotto/version&rdquo;
require &ldquo;mega_lotto/configuration&rdquo;
require &ldquo;mega_lotto/drawing&rdquo;</p>

<p>begin
  require &ldquo;pry&rdquo;
rescue LoadError
end</p>

<p>module MegaLotto
  def self.configure
  end
end
```</p>

<p>Now with the <code>Configuration</code> class properly loaded, let’s run our specs again:</p>

<p>```bash
MegaLotto::Configuration
  #drawing_count</p>

<pre><code>default value is 6 (FAILED - 1)
</code></pre>

<p>  #drawing_count=</p>

<pre><code>can set value (FAILED - 2)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto::Configuration#drawing_count default value is 6</p>

<pre><code> Failure/Error: expect(config.drawing_count).to eq(6)
 NoMethodError:
   undefined method `drawing_count` for #&lt;MegaLotto::Configuration&gt;
 # ./spec/mega_lotto/configuration_spec.rb:8
</code></pre>

<p>  2) MegaLotto::Configuration#drawing_count= can set value</p>

<pre><code> Failure/Error: config.drawing_count = 7
 NoMethodError:
   undefined method `drawing_count=` for #&lt;MegaLotto::Configuration&gt;
 # ./spec/mega_lotto/configuration_spec.rb:15
</code></pre>

<p>Finished in 0.00175 seconds
2 examples, 2 failures
```</p>

<p>Even though we still have failures, we’re making progress. The failures above relate to the lack of a <code>#drawing_count=</code> method, so let’s add an accessor for it:</p>

<p>```ruby
module MegaLotto
  class Configuration</p>

<pre><code>attr_accessor :drawing_count
</code></pre>

<p>  end
end
```</p>

<p><em>Note: We could’ve just added an <code>attr_writer</code> to satisfy the spec. However, I know I’m going to need a getter down the road, so I chose to do it at the same time.</em></p>

<p>With our accessor in place, let’s check the specs again:</p>

<p>```bash
MegaLotto::Configuration
  #drawing_count=</p>

<pre><code>can set value
</code></pre>

<p>  #drawing_count</p>

<pre><code>default value is 6 (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto::Configuration#drawing_count default value is 6</p>

<pre><code> Failure/Error: expect(config.drawing_count).to eq(6)

   expected: 6
        got: nil

   (compared using ==)
 # ./spec/mega_lotto/configuration_spec.rb:8
</code></pre>

<p>Finished in 0.00239 seconds
2 examples, 1 failure
```</p>

<p>Still a failure, but we’re slowly making more progress. The default value isn’t getting set so we’ll change that in the implementation:</p>

<p>```ruby
module MegaLotto
  class Configuration</p>

<pre><code>attr_accessor :drawing_count

def initialize
  @drawing_count = 6
end
</code></pre>

<p>  end
end
```</p>

<p>Running the specs one more time for the <code>Configuration</code> class shows that we’re good:</p>

<p>```bash
MegaLotto::Configuration
  #drawing_count</p>

<pre><code>default value is 6
</code></pre>

<p>  #drawing_count=</p>

<pre><code>can set value
</code></pre>

<p>Finished in 0.00172 seconds
2 examples, 0 failures
```</p>

<p>Running the specs for the main <code>spec/mega_lotto.rb</code> class again:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto#configure returns an array with 10 elements</p>

<pre><code> Failure/Error: expect(draw.size).to eq(10)

   expected: 10
        got: 6

   (compared using ==)
 # ./spec/mega_lotto_spec.rb:15:in `block (3 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 0.00168 seconds
1 example, 1 failure
```</p>

<p>We still have the same failures from before, but it’s because we didn’t change the <code>MegaLotto::Drawing</code> to actually <em>use</em> the new configuration class. Since we have this awesome new class, let’s make use of it in <code>MegaLotto::Drawing</code>:</p>

<p>```ruby
module MegaLotto
  class Drawing</p>

<pre><code>def draw
  MegaLotto.configuration.drawing_count.times.map { single_draw }
end

private

def single_draw
  rand(0...60)
end
</code></pre>

<p>  end
end
```</p>

<p>Running the specs for the drawing class gives us the following output:</p>

<p>```bash
MegaLotto::Drawing
  #draw</p>

<pre><code>each element is less than 60 (FAILED - 1)
each element is an integer (FAILED - 2)
returns an array (FAILED - 3)
using the default drawing count
  returns an array with 6 elements (FAILED - 4)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto::Drawing#draw each element is less than 60</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `configuration` for MegaLotto:Module
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:19
</code></pre>

<p>  2) MegaLotto::Drawing#draw each element is an integer</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `configuration` for MegaLotto:Module
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:13
</code></pre>

<p>  3) MegaLotto::Drawing#draw returns an array</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `configuration` for MegaLotto:Module
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:9
</code></pre>

<p>  4) MegaLotto::Drawing#draw using the default</p>

<pre><code>  drawing count returns an array with 6 elements
 Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `configuration` for MegaLotto:Module
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:26
</code></pre>

<p>Finished in 0.00219 seconds
4 examples, 4 failures
```</p>

<p>Well…I guess it’s clear that it doesn’t have a <code>configuration</code> accessor, huh? Let’s add it to <code>lib/mega_lotto.rb</code>:</p>

<p>```ruby
module MegaLotto
  class &lt;&lt; self</p>

<pre><code>attr_accessor :configuration
</code></pre>

<p>  end</p>

<p>  def self.configure
  end
end</p>

<p>```</p>

<p>and our specs:</p>

<p>```bash
MegaLotto::Drawing
  #draw</p>

<pre><code>each element is less than 60 (FAILED - 1)
each element is an integer (FAILED - 2)
returns an array (FAILED - 3)
using the default drawing count
  returns an array with 6 elements (FAILED - 4)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto::Drawing#draw each element is less than 60</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `drawing_count` for nil:NilClass
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:19
</code></pre>

<p>  2) MegaLotto::Drawing#draw each element is an integer</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `drawing_count` for nil:NilClass
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:13
</code></pre>

<p>  3) MegaLotto::Drawing#draw returns an array</p>

<pre><code> Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `drawing_count` for nil:NilClass
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:9
</code></pre>

<p>  4) MegaLotto::Drawing#draw using the default</p>

<pre><code>  drawing count returns an array with 6 elements
 Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
 NoMethodError:
   undefined method `drawing_count` for nil:NilClass
 # ./lib/mega_lotto/drawing.rb:4:in `draw'
 # ./spec/mega_lotto/drawing_spec.rb:6
 # ./spec/mega_lotto/drawing_spec.rb:26
</code></pre>

<p>Finished in 0.00146 seconds
4 examples, 4 failures</p>

<p>```</p>

<p>A different message this time, related to the fact that the configuration accessor has no <code>#drawing_count</code> method. This makes sense because we don’t actually return anything from <code>#configuration</code>. Let’s instantiate a new <code>Configuration</code> object and see where that gets us:</p>

<p>```ruby
module MegaLotto
  class &lt;&lt; self</p>

<pre><code>attr_writer :configuration
</code></pre>

<p>  end</p>

<p>  def self.configuration</p>

<pre><code>Configuration.new
</code></pre>

<p>  end</p>

<p>  def self.configure
  end
end
```</p>

<p>Now, the <code>Drawing</code> class specs are passing:</p>

<p>```bash
MegaLotto::Drawing
  #draw</p>

<pre><code>each element is an integer
each element is less than 60
returns an array
using the default drawing count
  returns an array with 6 elements
</code></pre>

<p>Finished in 0.01007 seconds
4 examples, 0 failures
```</p>

<p>Let’s flip back to the spec file <code>spec/mega_lotto_spec.rb</code> and see where we are:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements (FAILED - 1)
</code></pre>

<p>Failures:</p>

<p>  1) MegaLotto#configure returns an array with 10 elements</p>

<pre><code> Failure/Error: expect(draw.size).to eq(10)

   expected: 10
        got: 6

   (compared using ==)
 # ./spec/mega_lotto_spec.rb:15
</code></pre>

<p>Finished in 0.00167 seconds
1 example, 1 failure
```</p>

<p>Still failing, but at least we have what seems like the pieces setup to implement the global configuration. The <code>.configure</code> method needs to instantiate a <code>Configuration</code> class object so we can pass user-defined options to it. However, we need to save that instantiation to the accessor, so later when the <code>Drawing</code> class needs to access its properties, they’re available:</p>

<p>```ruby
module MegaLotto
  class &lt;&lt; self</p>

<pre><code>attr_writer :configuration
</code></pre>

<p>  end</p>

<p>  def self.configuration</p>

<pre><code>return @configuration if @configuration
self.configuration = Configuration.new
</code></pre>

<p>  end</p>

<p>  def self.configure</p>

<pre><code>yield(configuration)
</code></pre>

<p>  end
end
```</p>

<p><em>Note: it’s important to return the class instance variable from <code>.configuration</code> and check if that is set rather than the reader method, otherwise it’d get stuck in a loop and never return.</em></p>

<p>Running our specs again, we see that we’re green:</p>

<p>```bash
MegaLotto
  #configure</p>

<pre><code>returns an array with 10 elements
</code></pre>

<p>Finished in 0.00168 seconds
1 example, 0 failures
```</p>

<p>For the sake of sanity, let’s run the whole suite to make sure everything is covered:</p>

<p>```bash
$ rake
&hellip;&hellip;.</p>

<p>Finished in 0.00688 seconds
7 examples, 0 failures
```</p>

<p>…and we’re good!</p>

<h2>Implementations in the Wild</h2>

<p>The <a href="https://github.com/carrierwaveuploader/carrierwave#configuring-carrierwave">CarrierWave gem</a> is a popular choice to support avatar uploading. The author(s) realized that not everyone would want to store upload assets on the local system, so they offered the functionality to support Amazon S3 and other similar block storage services. In order to set this value, you’d use a <a href="https://github.com/carrierwaveuploader/carrierwave#configuring-carrierwave">configure block almost identical to the one we wrote above</a>.</p>

<p>Thoughtbot wrote a <a href="http://robots.thoughtbot.com/mygem-configure-block">great article about the configuration implementation</a> in their <a href="https://github.com/thoughtbot/clearance">Clearance gem</a>. It’s worth reading even if you don’t plan to use Clearance.</p>

<h2>Summary</h2>

<p>Keeping gems configurable means balancing your use case with the use cases of others. The more flexibility you offer to users of your gem, the more users will find value in your work. However, there’s a point when offering too much configuration can make the internals of a gem unnecessarily complicated. As you probably know, Ruby is a language full of conventions and it’s best to provide reasonable defaults and only adapt if the need arises.</p>

<p>One approach to balance complexity is to create a system where users can write their own middleware to modify the behavior of the default system. Mike Perham created a <a href="https://github.com/mperham/sidekiq/wiki/Middleware">middleware system for Sidekiq</a> allowing users to add functionality as they wish. Doing so doesn’t require the gem to change at all when unique use cases arise. The implementation of such system is beyond the scope of this book. However, if you want to learn more, <a href="https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/middleware/chain.rb">Sidekiq’s implementation</a> is a great place to start.</p>

<p>_This is one of 3 posts leading up the the launch of my
[__Build a Ruby Gem book__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=sucker-punch)
on __Thursday, March 27__! Sign up below to receive a **20% discount coupon** when the book launches._

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: book" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>




</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Wrote the Sucker Punch Gem]]></title>
    <link href="http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem/"/>
    <updated>2014-03-13T13:56:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem</id>
    <content type="html"><![CDATA[<p>_This is one of 3 posts leading up the the launch of my
[__Build a Ruby Gem book__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=sucker-punch)
on __Thursday, March 27__! Sign up below to receive a **20% discount coupon** when the book launches._

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: book" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>




</p>

<p>One of the simplest and most common application of background processing is sending emails outside of a web
request. And while background processing is pretty common, most existing Ruby background processing libraries require an additional process to execute these jobs, resulting in increased infrastructure costs.</p>

<p>At the time, I was working on an application hosted on Heroku, and the cost of an additional dyno ($35/month) wasn’t justified. The background jobs did very little more than send emails out of band. To me, the traditional solutions seemed like overkill. And with this, the idea of <a href="https://github.com/brandonhilkert/sucker_punch">sucker_punch</a> was born&hellip;</p>

<!--more-->


<h2>Ruby Background Processing Libraries</h2>

<p>Until I had heard of <a href="http://sidekiq.org/">Sidekiq</a>, <a href="https://github.com/collectiveidea/delayed_job/tree/master">delayed_job</a> and <a href="https://github.com/resque/resque">Resque</a> were the standard options for processing background jobs in Ruby. I&rsquo;ve used both and believe each has a great use case.</p>

<p>In my experience, it&rsquo;s easiest to start with delayed_job if you need background processing in your application. If and when the DB becomes your bottleneck, it&rsquo;s time to move on. Redis is a dependency of both Resque and Sidekiq, which increases the complexity and infrastructure maintenance, however, with <a href="https://addons.heroku.com/?q=redis">Heroku&rsquo;s hosted Redis
Add-ons</a>, this dependency is much less of a pain.</p>

<h2>My work on Sidekiq</h2>

<p>I previously wrote about my my <a href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/">open source contributions</a> and how I got started. I had spent the previous several
months contributing to Sidekiq and learning more about concurrency patterns in Ruby.</p>

<p>Sidekiq is multi-threaded, which is the reason a single Sidekiq process is <a href="https://github.com/mperham/sidekiq/wiki/Testimonials">more
efficient</a> than a library like Resque. Although, nothing in life is free &ndash; care must be taken to ensure your jobs are thread-safe. A helpful <a href="https://github.com/mperham/sidekiq/wiki/Best-Practices">guide to writing thread-safe code</a> can be found on the Sidekiq wiki.</p>

<h2>Use Case</h2>

<p>I was working on <a href="http://defriendnotifierapp.com/">Defriend Notifier</a> and needed to notify users via email when their Facebook friend list changed. Using Sidekiq or any of the alternatives mentioned above certainly would’ve worked. In fact, the application originally used Sidekiq and functioned perfectly. However, as time went on, I decided the extra cost of the worker wasn’t justified, especially given that the application didn’t produce any revenue outside of advertising (very little…).</p>

<p>At the time, the only background processing library that didn’t require an additional background process was
<a href="https://github.com/mperham/girl_friday">girl_friday</a>, also written by <a href="https://twitter.com/mperham">Mike
Perham</a>, author of Sidekiq. While this solution worked for awhile, I found the syntax to be slightly non-intuitive and it felt a little dirty to pass around a global variable within the application
to manage a single job queue. I also experienced some memory leaks on Heroku as a result of switching to
girl_friday, but to be fair, I didn&rsquo;t spend much time determining the root cause. <em>Disclaimer: It very likely could’ve been due to code that I wrote</em>.</p>

<h2>Enter Celluloid</h2>

<p><a href="https://github.com/celluloid/celluloid">Celluloid</a> describes itself as an actor-based concurrent object
framework for Ruby. Celluloid is the guts behind Sidekiq and the reason why the multi-threaded Sidekiq code is so readable. Celluloid abstracts away the details of concurrency so your code doesn&rsquo;t have to worry about manually managing thread synchronization and object message queuing.</p>

<h2>Sucker Punch is born</h2>

<p>girl_friday was written several years ago — before Celluloid was created. Realizing the power of Celluloid,
I figured there was an opportunity for a new library that behaved like girl_friday, but utilized
Celluloid&rsquo;s more reliable multi-threading capabilities. And because Celluloid handles so much of the complexity, the gem itself would be relatively simple — really a DSL around enqueuing jobs to a <a href="https://github.com/celluloid/celluloid/wiki/Pools">Celluloid Pool</a>.</p>

<p>I <a href="https://twitter.com/brandonhilkert/status/292630123981729793">posed the question to Mike Perham</a> and he confirmed my suspicions.</p>

<p><img class="center" src="/images/sucker-punch-tweet.png" title="&ldquo;Sucker Punch Tweet&rdquo;" ></p>

<p>Fortunately, Celluloid had all of the functionality needed for background queues already built-in. While the
functionality was there, the usage syntax was awkward.</p>

<p>I spent the next few days creating a DSL around the Celluloid internals, thus making it feel more specific to
background queues.</p>

<p>Here’s the result of a typical job class:</p>

<pre><code>class LogJob
  include SuckerPunch::Job

  def perform(event)
    # do some other stuff to
    # record the event in the background
    puts "#{event} just happened"
  end
end
</code></pre>

<p>I deployed my sucker_punch-converted application code to production and gave it a week or so before I declared it a success. Once I realized sucker_punch was going to be a maintainable method for processing background jobs in a single web process, I added additional niceties like logging and queue configuration details that may be valuable for other use cases.</p>

<p>Have you tried <a href="https://github.com/brandonhilkert/sucker_punch">sucker_punch</a> yet? If so, I&rsquo;d love to know how it went and what you used it for&hellip;</p>

<p>_This is one of 3 posts leading up the the launch of my
[__Build a Ruby Gem book__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=sucker-punch)
on __Thursday, March 27__! Sign up below to receive a **20% discount coupon** when the book launches._

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: book" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>




</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Technical Review]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-technical-review/"/>
    <updated>2014-03-04T17:43:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-technical-review</id>
    <content type="html"><![CDATA[<p>Greetings from a now less snowy Eastern USA!</p>

<p>The past few weeks have seemed like one big snow storm. We haven’t had many days above freezing and spent very little time outside (voluntarily at least). I’m sure those living in colder climates are probably saying “cry me a river…” right now. On the bright side, our extended home stays have given me more time to write.</p>

<!--more-->


<p><img class="center" src="/images/snow.jpg" title="&ldquo;West Chester Snow&rdquo;" ></p>

<p>Since the last time, I made some serious progress…</p>

<ol>
<li><p><strong>The chapter list is finalized</strong> &ndash; I’m thankful for all the feedback you provided about the chapter list. It really helped me determine the more important topics and make sure they were well covered.</p></li>
<li><p><strong>Content is done</strong> &ndash; Snow days inside will do that. I made a big push to strengthen the weaker areas where there was overwhelming interest.</p></li>
<li><p><strong>Grammatical editing is done</strong> &ndash; I’m lucky to be surrounded by really supportive people that have both the skill and interest to help edit. They pitched in and we knocked it out!</p>

<p> <img class="center" src="/images/editing.jpg" title="&ldquo;Build a Ruby Gem Editing&rdquo;" ></p></li>
<li><p><strong>Technical review is underway</strong> &ndash; Again, I can’t stress how lucky I feel that people I respect and look up to in the Ruby community volunteered their free time to review the book. I suspect it’ll be another week or 2 before the final changes are sorted out, but never the less, technical review is well underway.</p></li>
<li><p><strong><a href="http://www.mikeperham.com/">Mike Perham</a> is writing a foreword</strong> &ndash; Mike is someone I greatly respect and helped me navigate the open source eco-system when I first started contributing to his <a href="http://sidekiq.org/">Sidekiq</a> project. He’s been contributing to OSS far longer than Sidekiq and the Ruby community is lucky to have him. He’s written a beautifully succinct opening for the book as it relates to developing open source software. If reading his foreword doesn’t motivate to start contributing, I don’t now what will.</p></li>
</ol>


<p>Specifics about the launch date haven’t been determined, but <strong>the book will definitely launch in late March</strong>. I plan to be in touch with a <strong>sample chapter and coupon code</strong>, as promised, when the time gets closer.</p>

<p>Looking back on the items mentioned above, I’m really excited to be nearing the home stretch and finally get it in to your hands.</p>

<p>Hope you had a great past couple of weeks. Talk to you soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Update]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-book-update/"/>
    <updated>2014-02-15T08:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-book-update</id>
    <content type="html"><![CDATA[<p><strong>This past weekend I added ~ 6,000 words</strong> to the existing content. I&rsquo;m really excited to be nearing the end of the road. I&rsquo;ve gotten some great feedback since I started and wanted to gather a bit more to finalize the chapter list.</p>

<p>Here&rsquo;s the chapter list I&rsquo;m working with&nbsp;so far:</p>

<!--more-->


<ol>
<li>Introduction What is a gem? Why build a gem?)</li>
<li>File structure of a gem</li>
<li>Testing/debugging setup</li>
<li>Code implementation of of example gem</li>
<li>Versioning</li>
<li>Release (how to release? and when to release?)</li>
<li>Changelog (What is it? and what to include?)</li>
<li>Responsibility of a gem author</li>
<li>Loading additional libraries within a gem</li>
<li>Command-line utilities</li>
<li>Configuration patterns</li>
<li>Rails hooks</li>
<li>Rails view helpers</li>
<li>Rails controller includes</li>
<li>Rails Model Includes</li>
<li>Rails rake tasks</li>
<li>Rails engines (when/why to use?)</li>
<li>Open source management</li>
<li>Summary</li>
</ol>


<p>Phew! That&rsquo;s a lot&hellip;so with that in mind, <strong>have I covered everything?</strong></p>

<p>Please <strong>leave a comment</strong> if you&rsquo;re interested in reading about something I haven&rsquo;t mentioned.</p>

<p>One of the things I&rsquo;m most excited about is being able to use real-word examples for each chapter. I learn by reading and writing my own code and really appreciate when a book/post does the same. I&rsquo;ve tried to do that at every step of the way. Hopefully this will make the book more valuable to you.</p>

<p>I will be in touch in the <strong>next few weeks with a sample chapter</strong> or two, along with some feature blog posts.</p>

<p>If you&rsquo;re interested in receiving updates about the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary"><em>Build a Ruby Gem</em>
book</a>,
enter your email below:</p>

<p><div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: book" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>

</p>

<p>Members of this list will also receive a <strong>20% discount coupon</strong> when the book
launches!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Launched an Email Course to 500+ People]]></title>
    <link href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/"/>
    <updated>2014-01-06T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/how-i-launched-an-email-course</id>
    <content type="html"><![CDATA[<p>About a month ago, I joined <a href="http://jfdi.bz/">JFDI.bz</a> &ndash; a community for
solo-founders launching their own thing. Once a month, the group engages in a
<em>Week of Hustle</em> &ndash; a week long sprint to launch something.
I chose to launch an email course on the topic of <a href="http://brandonhilkert.com/courses/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary">building a Ruby
gem</a>.</p>

<!--more-->


<h2>Why <em>Build a Ruby Gem</em>?</h2>

<p>A few years ago, I was building my first Ruby gem and I was left pretty
confused with the process and conventions. After working through my
frustrations, I thought the information I learned could be useful to others.</p>

<p>Honestly, I thought to write an eBook at first, however, the last thing I
wanted was to invest a month or two of my time only to find out people
weren&rsquo;t interested.</p>

<p>An email course was a good medium &ndash; I could cover the basics well enough to get
people through their hangups, while also validating the need for an eBook. I
figured if I got <strong>100-200</strong> people to sign up for the course, I would move
forward with the book.</p>

<h2>Results</h2>

<p>It turns out my marketing efforts were more successful than I anticipated.</p>

<h3>Today, almost 600 people have taken the Build a Ruby Gem email course!</h3>

<h2>Email is King&hellip;still</h2>

<p>Prior to launching this email course, I&rsquo;d read about the value of building an
email list from people like <a href="http://nathanbarry.com/">Nathan Barry</a>, <a href="http://unicornfree.com/">Amy
Hoy</a> and <a href="http://justinjackson.ca/">Justin Jackson</a>.</p>

<p>I&rsquo;d also read countless other posts describing the most common regrets when
launching a new product. Almost all of them included not building an email
list. With that said, it was one of the first things I setup.</p>

<p>I blogged each day about my progress. Each post had a
mailing list subscription form that sent them subsequent daily updates.  Subscriptions
were slow at first, but interest built.  By then end of the week <strong>232</strong> people had
subscribed. And the day the course went live, I was able to to convert <strong>115</strong>
(~50%) of them.</p>

<p>The people subscribed were <strong>EXACTLY</strong> my target audience so it&rsquo;s no surprise
conversion was high.</p>

<h2>Finding Your Target Audience</h2>

<p>Fortunately for me, my target audience was Ruby developers and they hang out
online (surprise, surprise). But where online&hellip;</p>

<p>Let me hit you with something that seems obvious in hindsight:</p>

<h3>Marketing is easy when you build a product for an audience you&rsquo;re already part of.</h3>

<p>This was something I&rsquo;d <a href="http://unicornfree.com/2013/how-do-you-create-a-product-people-want-to-buy">read over the past few
months</a>,
but not seen its value until now.</p>

<p>The email course is for <strong>Ruby developers</strong>, I&rsquo;m a <strong>Ruby Developer</strong>, so the
question becomes&hellip;.<em>where do I hang out online?</em></p>

<p>That question is <strong>easy</strong> to answer &ndash; <a href="http://rubyweekly.com/">Ruby weekly</a>,
<a href="http://www.reddit.com/r/ruby">Reddit</a> and
<a href="http://www.rubyflow.com/">RubyFlow</a>.</p>

<p>And don&rsquo;t you know&hellip;it turns out those 3 sources have been the highest
converting sources since the course launched:</p>

<ol>
<li>Ruby weekly &ndash; 131</li>
<li>RubyFlow &ndash; 65</li>
<li>Reddit &ndash; 62</li>
</ol>


<p>The remaining sources were a combination of direct links, social media and
other technology news aggregation sites (probably mostly stemming from the top
sources above).</p>

<p><em>Note: I&rsquo;ve been reading <a href="http://www.amazon.com/80-20-Sales-Marketing-Definitive/dp/1599185059">80/20 Sales and
Marketing</a>
and the numbers above coincide, almost exactly, to the 80/20 curve. That is,
80% of the conversion came from 20% of the sources.</em></p>

<h2>Twitter Tip</h2>

<p>The last day of the email course has a <em>Summary</em> section thanking people for
taking the course and attempting to get feedback. While I haven&rsquo;t received much
constructive criticism, I dropped this little doozie at the bottom:</p>

<p><img class="center" src="/images/email-course/click-to-tweet.png" title="&ldquo;Build a Ruby Gem Email Course Click To Tweet&rdquo;" ></p>

<p>I&rsquo;d read a post about <a href="http://grinnick.com/posts/how-groove-s-email-copy-makes-their-posts-go-viral?ref=hn">GroveHQ&rsquo;s emails going
viral</a>
and this was something they did in their campaigns.</p>

<p>The link allows people to click and immediately be setup to Tweet the
following:</p>

<p><img class="center" src="/images/email-course/course-tweet.png" title="&ldquo;Build a Ruby Gem Email Course Tweet&rdquo;" ></p>

<p>It&rsquo;s difficult to determine the value of those tweets, but over 10 people have
clicked and tweeted. To me, this was surprising, but valuable.</p>

<p>I&rsquo;ll probably look to make it stand out a bit more to hopefully improve the
click-through.</p>

<h2>In Summary</h2>

<p>I spent a total of <strong>16 hours</strong> creating the <em>Build a Ruby Gem</em> email
course, which has since <strong>validated the need for a book</strong>. While interest
in a free email course doesn&rsquo;t guarantee a book on the same subject will sell, it was
the closet thing I could think to do outside of taking pre-orders.</p>

<p>I&rsquo;ve started writing the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary"><em>Build a Ruby Gem</em>
book</a>.
If you&rsquo;re interested in receiving updates on my progress, enter your email
below:</p>

<p><div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Category: book" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>

</p>

<p>Members of this list will also receive a <strong>20% discount coupon</strong> when the book
launches!</p>
]]></content>
  </entry>
  
</feed>
