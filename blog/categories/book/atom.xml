<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2016-05-23T15:02:22-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014 In Review]]></title>
    <link href="http://brandonhilkert.com/blog/2014-in-review/"/>
    <updated>2014-12-29T14:57:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/2014-in-review</id>
    <content type="html"><![CDATA[<p>For the past 2 years, I’ve committed myself to <a href="http://brandonhilkert.com/blog/be-ambitious/">specific
goals</a> for the year to come. Most
people call them New Year’s Resolutions. Heck, I probably even referred to them
as “resolutions” too. But the more I thought about it, the more it dawned on me
that a “resolution” felt more like a fix for something — something that didn&rsquo;t
go well in the previous year. Think weight loss (everyone makes this resolution at least once in their life) or a dedication to be more focused.</p>

<!--more-->


<p>Mine have been more of the bucket list variety. The first was <a href="http://brandonhilkert.com/blog/loyalty/">completing an Ironman</a>. The second, <a href="http://brandonhilkert.com/blog/be-ambitious/">writing a book</a>.</p>

<p>Both felt almost too big initially, but ultimately led to opportunities and
lifestyle changes I would’ve never expected once finished. So naturally, with
2014 winding down, the question becomes <strong>&ldquo;what’s the goal for 2015?&rdquo;</strong>.</p>

<p>And the answer is&hellip;<em>I don’t know</em>.</p>

<p>It doesn’t mean I’m not going to do anything. In fact, it probably means the
opposite. I’m just not going to set out with a specific goal in mind. If
halfway through something, I want to stop and do something else, so be it.</p>

<p>I remember during my training for the Ironman (9 months total), I constantly thought about what I would do with my free time when it was over. Every time my alarm went off at 5am, I thought about what it would feel like to get another 2 hours of sleep. It was endless. Nine months was a long time to have those thoughts and, perhaps, why I was so well positioned to write and launch the book (I had 9 months to think about what was next and how to accomplish it).</p>

<p>Always having your sights set on the future can wear on you though.</p>

<p>Without those feelings now, I’m going to let 2015 take me wherever it does. I don’t have any expectations financially or professionally. I’m going to do my best to make the most out of every moment and appreciate more of the small things. It’s so easy to skip over the small things and in many cases, the small things are actually the best things. And we don’t realize it until they’re gone.</p>

<p>2014 was a great year in all. Here are a few of the events that stand out the most:</p>

<ul>
<li>my wife and I <a href="http://brandonhilkert.com/about/">welcomed our son, Cruz</a></li>
<li>my wife and I celebrated our 4 year anniversary</li>
<li>wrote a book, <a href="http://brandonhilkert.com/books/build-a-ruby-gem/">Build a Ruby Gem</a></li>
<li>provided a <a href="http://brandonhilkert.com/courses/build-a-ruby-gem/">free email course on building a Ruby gem</a> to 1,218 people</li>
<li>connected with 2,645 people through my <a href="http://brandonhilkert.com/newsletter/">newsletter</a></li>
<li>built a <a href="https://funneloptimizer.herokuapp.com/">funnel optimization service for bloggers selling
  products</a></li>
<li>published 24 <a href="http://brandonhilkert.com/blog/archives/">articles</a></li>
<li>saw <a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> <a href="https://rubygems.org/gems/sucker_punch">downloaded over 225k times</a></li>
<li>celebrated <a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> being <a href="http://guides.rubyonrails.org/active_job_basics.html">integrated in to Rails</a></li>
<li>made my <a href="https://github.com/rails/rails/pull/16898">first commit to Rails</a> (even if it was small!)</li>
<li>traveled to Jackson Hole, WY</li>
<li>built a <a href="https://vuier.com/">pay-to-view video platform</a> with a few friends</li>
<li>built a <a href="https://perform.io/">performance management system</a></li>
<li>renovated my
  <a href="http://brandonhilkert.com/images/2014/bathroom-before.jpg">kids'</a>
  <a href="http://brandonhilkert.com/images/2014/bathroom-after.jpg">bathroom</a></li>
<li>built a deployment system for <a href="https://www.pipelinedeals.com/">PipelineDeals</a> and supporting services that I’m very proud of</li>
<li>built a staging server management application</li>
<li>built <a href="https://chrome.google.com/webstore/detail/how-to-win-friends-and-in/cbmeigkjdnilgodhnhagokhoehbpkdcc?hl=en-US">3</a> <a href="https://chrome.google.com/webstore/detail/pipelinedeals-crm-contact/ieaafnaonfabpgpkkeglkeodkpiijjdd?hl=en-US">chrome</a> <a href="https://chrome.google.com/webstore/detail/pipelinedeals-gmail/fdfifknmbmalmgdjmnhkcfholdgacikl?hl=en-US">extensions</a>, the latter being my first <a href="http://facebook.github.io/react/">React</a> app</li>
<li>started a <a href="http://walnutstlabs.com/event/walnut-st-labs-night-owls/">weekly tech gathering</a> at a <a href="http://walnutstlabs.com">local co-working space</a></li>
<li>stopped push email notifications on all my devices (strongly recommended)</li>
<li>saw <a href="http://defriendnotifierapp.com/">Defriend Notifier</a> be used by 30,128 people</li>
<li>started exploring other programming languages, specifically <a href="https://golang.org/">Go</a> and <a href="http://elixir-lang.org/">Elixir</a></li>
</ul>


<p>I’m excited for 2015!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem - Ruby Heroes]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-ruby-heroes/"/>
    <updated>2014-07-09T06:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-ruby-heroes</id>
    <content type="html"><![CDATA[<p>It’s been 3 months since the release of <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes"><em>Build a Ruby Gem</em></a> and I’ve gotten tremendous feedback since the launch.</p>

<p>I’ve love to share some news and an opportunity to win a <strong>FREE</strong> copy of the book. If you’ve already purchased the book, don’t worry, we’ll find a way to make it worth it for you.</p>

<!--more-->


<h2>Feedback</h2>

<p>The two questions I’ve heard the most since the release of the <a href="http://brandonhilkert.com/courses/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">email course</a> and <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">book</a> are:</p>

<ol>
<li><p>Why should I get involved with open source software?</p></li>
<li><p>How do I get started contributing to an open source project?</p></li>
</ol>


<h2>Benefits of Getting Involved</h2>

<p>Participating in open source projects is an enlightening experience. The benefits are widespread and different for each developer. Speaking personally, I’ve learned a ton from the codebases I’ve gotten involved with. Learning was the primary reason I got involved in the first place.</p>

<p>Going beyond the learning aspect, my open source contributions have resulted in several <strong>jobs offers</strong>, among other things. It’s easy to think that getting involved is only just about doing good for the community — but it’s <strong>bigger than that</strong>.</p>

<p>I could go on and on, but it’s likely you’ve already heard me talk about this through my post on <a href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">ways to get started contributing to open source</a> or the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">open source chapter in <em>Build a Ruby Gem</em></a>.</p>

<h2>Hear It From Others in the Community</h2>

<p>Hearing other people’s stories has always had a profound effect on my comfort-level when approaching things I’m unfamiliar with. So with that being said, I want you to hear the answers to the questions above from those YOU look up to in the Ruby community.</p>

<p>This person could be the author of your favorite gem or Matz himself (disclaimer: I may or may not be able to make this one happen…). Either way, I’ll do my best to have live interview chats with your favorite Rubyists and dig through their experience and thoughts on the community and software in general.</p>

<p><em>Entries have closed for the giveaway.</em></p>

<p>Submissions will be open until <strong>5:00pm EDT on Friday, July 11</strong>. I’ll announcement the winner shortly thereafter.</p>

<p>Even if you don’t win, I’ll send everyone that submits a response a <strong>20% discount code</strong> for any package of <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes"><em>Build a Ruby Gem</em></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem eBook is Live!]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-is-live/"/>
    <updated>2014-03-26T23:49:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-is-live</id>
    <content type="html"><![CDATA[<p>After several weeks of <strong>really</strong> early mornings, <a href="http://brandonhilkert.com/books/build-a-ruby-gem?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch"><em>Build a Ruby Gem</em></a> is finally live:</p>

<p><a href="http://brandonhilkert.com/books/build-a-ruby-gem?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch">http://brandonhilkert.com/books/build-a-ruby-gem/</a></p>

<p>Thanks again for all the support and encouragement. I had a great time working
on it and really look forward to hearing your feedback.</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a Rails Engine]]></title>
    <link href="http://brandonhilkert.com/blog/how-to-build-a-rails-engine/"/>
    <updated>2014-03-24T17:26:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/how-to-build-a-rails-engine</id>
    <content type="html"><![CDATA[<p>_This is one of the final post leading up the the launch of the
[__Build a Ruby Gem Ebook__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=launch),
which is now available for sale in [3 packages](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=launch),
including __14 chapters of code__ and over 2 hours of screencasts_.


</p>

<p>Rails engines range from simple plugins to powerful micro-applications. The discussions we’ve had so far about Railties are closely related to the function of a Rails engine. One interesting side note is that a Rails application is a Rails engine itself — so it’s easy to see how we can encapsulate just about any normal Rails functionality in an engine, to ultimately embed in a host application.</p>

<p>The <a href="http://guides.rubyonrails.org/engines.html?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">Rails engine documentation</a> is well written and touches on the many ways to include functionality. I won’t cover every detail of Rails engines in this chapter, just enough to get you started making use of them. It’s possible to make full applications (routes, controllers, models, migrations, etc.) using Rails engines. However, we’re going to focus on some of the simpler the elements of a Rails engine that allow us to integrate functionality where a Railtie won’t suffice. Just know, there is far more you can do with Rails engines than what we’ll cover here. The documentation link above provides examples of many of those use cases.</p>

<!--more-->


<h2>Use Case</h2>

<p>I wrote a <a href="http://brandonhilkert.com/blog/relative-timestamps-in-rails/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">blog post about rendering relatives timestamps in Rails</a> on the client. Using a client-side solution like <a href="http://timeago.yarp.com/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">timeago.js</a> allows timestamps to update in real-time, so when we see “15 minutes ago”, we know the record <em>really</em> is 15 minutes old.</p>

<p>The other benefit to using a client-side library like <code>timeago.js</code> is timezone offsets are handled automatically. All we have to do is render the UTC time in the view and javascript will handle converting it to the relative timezone of the browser, along with keeping it updated as the page becomes stale.</p>

<p>For this example, we’ll make a gem that integrates <code>timeago.js</code> in to a Rails application and provides a simple way to render relative timestamps in a view.</p>

<h2>The Implementation</h2>

<p>The implementation of our gem will require:</p>

<ol>
<li>Adding the <code>timeago.js</code> javascript asset to the asset pipeline</li>
<li>Adding a javascript asset to invoke the <code>timeago()</code> plugin</li>
<li>Adding a view helper to render html in a format the javascript plugin expects</li>
</ol>


<p>The third requirement was covered in a previous chapter on view helpers, so we’ll cruise through that one quickly. However, including assets hasn’t been covered and it’s the perfect segue in to the benefits of using a Rails engine, rather than just a Railtie.</p>

<p>Rails engines allow us create the same directory structure of a Rails application, since a Rails application is just a Rails engine. By indicating our gem is an engine (we’ll see how to do this soon…), Rails will pick up the related files in the Rails-specific directories in our gem. So if we add a file in the <code>app/helpers/</code> directory of our gem, that same file will be available in the host Rails application. The same approach applies for controllers, models, migrations, assets and anything else we would add to a typical Rails application.</p>

<p>To start, let’s create our new gem:</p>

<p>```bash
$ bundle gem time_ago</p>

<pre><code>  create  time_ago/Gemfile
  create  time_ago/Rakefile
  create  time_ago/LICENSE.txt
  create  time_ago/README.md
  create  time_ago/.gitignore
  create  time_ago/time_ago.gemspec
  create  time_ago/lib/time_ago.rb
  create  time_ago/lib/time_ago/version.rb
</code></pre>

<p>Initializing git repo in /Users/bhilkert/Dropbox/code/time_ago
```</p>

<p>When we include javascript libraries from external sources, the <code>vender/</code> directory is the most appropriate place for them. Let’s create the directory <code>vendor/assets/javascripts/</code> and place the source for the <code>timeago.js</code> plugin there:</p>

<p>```bash
├── Gemfile
├── LICENSE.txt
├── Rakefile
├── lib
│   ├── time_ago
│   │   └── version.rb
│   └── time_ago.rb
├── time_ago.gemspec
└── vendor</p>

<pre><code>└── assets
    └── javascripts
        └── jquery.timeago.js
</code></pre>

<p>```</p>

<p>To create our view helper, we’ll add the <code>/app/helpers/</code> directory:</p>

<p>```bash
├── Gemfile
├── LICENSE.txt
├── Rakefile
├── app
│   └── helpers
│       └── time_ago_helper.rb
├── lib
│   ├── time_ago
│   │   └── version.rb
│   └── time_ago.rb
├── time_ago.gemspec
└── vendor</p>

<pre><code>└── assets
    └── javascripts
        └── jquery.timeago.js
</code></pre>

<p>```</p>

<p>The code for the view helper is shown below:</p>

<p>```ruby
module TimeAgoHelper
  def timeago(time, options = {})</p>

<pre><code>options[:class] ||= "timeago"
content_tag(
 :time,
 time.to_s,
 options.merge(datetime: time.getutc.iso8601)
) if time
</code></pre>

<p>  end
end
```</p>

<p>Lastly, we want to include a javascript asset to invoke the <code>timeago.js</code> plugin on page change (this includes the initial page load). This is almost identical to the first step of including the vendored <code>timeago.js</code> asset, except we’re going to put it in the <code>app/assets/javascripts/</code> directory since it’s not an external library, but rather a javascript include that will invoke the javascript plugin.</p>

<p>Let’s create the directory <code>app/assets/javascripts/</code> and place the following file there:</p>

<p>```javascript
// app/assets/javascripts/timeago.js
//
// jQuery Timeago setup for timeago helper
//
//= require jquery.timeago</p>

<p>$(document).on(&lsquo;page:change&rsquo;, function() {
  $(&ldquo;time.timeago&rdquo;).timeago();
});
```</p>

<p>This file serves as both a manifest file for the <code>jquery.timeago.js</code> asset and a function to invoke the plugin whenever the page loads or changes.</p>

<p>Lastly, we need to designate our gem as an engine. The default entry file that was created when we used bundler to bootstrap our gem looked like this:</p>

<p>```ruby
require &ldquo;time_ago/version&rdquo;</p>

<p>module TimeAgo
end
```</p>

<p>All we need to do is add the <code>Engine</code> class and inherit from <code>Rails::Engine</code>, giving us:</p>

<p>```ruby
require &ldquo;time_ago/version&rdquo;</p>

<p>module TimeAgo
  class Engine &lt; ::Rails::Engine
  end
end
```</p>

<p>At this point, because our gem is so closely tied to Rails, we should add Rails as a dependency in our gemspec:</p>

<p>```ruby</p>

<h1>coding: utf-8</h1>

<p>lib = File.expand_path(&lsquo;../lib&rsquo;, <strong>FILE</strong>)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require &lsquo;time_ago/version&rsquo;</p>

<p>Gem::Specification.new do |spec|
  spec.name          = &ldquo;time_ago&rdquo;
  spec.version       = TimeAgo::VERSION
  spec.authors       = [&ldquo;Brandon Hilkert&rdquo;]
  spec.email         = [&ldquo;<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#98;&#114;&#x61;&#110;&#x64;&#111;&#110;&#104;&#x69;&#x6c;&#107;&#101;&#x72;&#116;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#x62;&#x72;&#x61;&#x6e;&#100;&#111;&#x6e;&#104;&#105;&#108;&#x6b;&#x65;&#114;&#x74;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a>&rdquo;]
  spec.summary       = %q{A gem to integrate the timeago.js}
  spec.description   = %q{A gem to integrate the timeago.js}
  spec.homepage      = &ldquo;&rdquo;
  spec.license       = &ldquo;MIT&rdquo;</p>

<p>  spec.files         = <code>git ls-files -z</code>.split(&ldquo;\x0&rdquo;)
  spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }
  spec.test_files    = spec.files.grep(%r{^(test|spec|features)/})
  spec.require_paths = [&ldquo;lib&rdquo;]</p>

<p>  spec.add_dependency &ldquo;rails&rdquo;, &ldquo;>= 3.1&rdquo;</p>

<p>  spec.add_development_dependency &ldquo;bundler&rdquo;, &ldquo;~> 1.5&rdquo;
  spec.add_development_dependency &ldquo;rake&rdquo;
end
```</p>

<p><em>Note: In addition to adding Rails as a dependency, we’ve also specified that it’s only compatible with Rails version <code>3.1</code> or later because of the need for the asset pipeline.</em></p>

<p>Moving to a sample Rails application, we can include the gem in our host application by adding it to the <code>Gemfile</code> using the path option:</p>

<p><code>ruby
gem "time_ago", path: "../time_ago"
</code></p>

<p>Since we included an asset that needs to be included in the Rails asset pipeline, we have to take one more step and instruct the user to add the following to their <code>app/assets/javascripts/application.js</code> manifest file:</p>

<p><code>javascript
//= require timeago
</code></p>

<p>This directive actually refers to the <code>app/assets/javascripts/timeago.js</code> file we included in our gem to invoke the timeago.js plugin on page change.</p>

<p>Now when we load our Rails application, tags using the <code>timeago</code> view helper get rendered to UI as:</p>

<p>```html
<time class="timeago" datetime="2014-01-08T14:55:58Z"></p>

<pre><code>2014-01-08 14:55:58 UTC
</code></pre>

<p></time>
```</p>

<p>and are updated by the javascript plugin to:</p>

<p>```html
<time class="timeago" datetime="2014-01-08T15:04:10Z"
   title="2014-01-08 15:04:10 UTC"></p>

<pre><code> 18 days ago
</code></pre>

<p></time>
```</p>

<h2>Implementations in the Wild</h2>

<p>One of the greatest examples of making the most of a Rails engine is <a href="https://github.com/plataformatec/devise?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">Devise</a>. Devise is one of the more popular options for adding authentication to a Rails application. Just looking at the <a href="https://github.com/plataformatec/devise/tree/master/app?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">app directory of the gem</a>, we can see Devise adds functionality through controllers, helpers, mailers and views. The structure of Devise is fairly complicated because it is doing so much, but <a href="https://github.com/plataformatec/devise/blob/master/lib/devise/rails.rb?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines#L5">here is where the Rails engine is defined</a> allowing the elements in the <code>/app</code> directory (among other things) to be integrated in to a Rails application.</p>

<p>The <a href="https://github.com/basecamp/local_time?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">local_time gem</a> from Basecamp is a simple example of using the asset includes of a Rails engine to render relative timestamps. It’s similar to the one we created above, but uses the <a href="http://momentjs.com/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">moment.js</a> javascript library instead. Because it’s well tested and likely to be supported long-term, I’d suggest using it instead of the gem we created above.</p>

<h2>Summary</h2>

<p>The introduction of Rails engines created a new way to organize micro-applications and integrate them into a host application. Doing so keeps features and otherwise separate logic truly separate.</p>

<p>I’ve only scratched the surface on what a gem can provide through engines. It’s certainly more detailed than just asset and view helper integration, as shown above. If you’re interested in learning more about the other features Rails engine provide, <a href="http://guides.rubyonrails.org/engines.html?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">the Rails guides</a> are a great place to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Ebook Available on Thursday]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-ebook-available-on-thursday/"/>
    <updated>2014-03-24T06:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-ebook-available-on-thursday</id>
    <content type="html"><![CDATA[<p>_This is one of the final post leading up the the launch of the
[__Build a Ruby Gem Ebook__](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=launch),
which is now available for sale in [3 packages](/books/build-a-ruby-gem/?utm_source=bh-com&utm_medium=web&utm_campaign=launch),
including __14 chapters of code__ and over 2 hours of screencasts_.


</p>

<p>I spent the last couple of weeks with my head down focusing on producing the best content possible for the upcoming release of my <em><a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=email&amp;utm_campaign=packages">Build a Ruby Gem</a></em> ebook. I’m excited to finally show you what I’ve been working on.</p>

<p>The book will be available starting at <strong>Midnight (EDT) on Thursday, March 27th</strong> and can be purchased from <strong><a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=email&amp;utm_campaign=packages">my website</a></strong>.</p>

<!--more-->


<p>3 packages will be available:</p>

<ol>
<li><p><strong>Ebook</strong> only — $39</p>

<p> The book is 19 chapters, totaling 136 pages. The book content ranges from how to get started with open source projects to the nitty gritty of <a href="http://brandonhilkert.com/blog/ruby-gem-configuration-patterns/?utm_source=bh-com&amp;utm_medium=email&amp;utm_campaign=packages">configuration patterns in a Ruby gem</a>. The <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=email&amp;utm_campaign=packages">chapter list</a> offers a detailed list of the topics included.</p></li>
<li><p><strong>Ebook</strong> + <strong>Code</strong> (14 chapters of code)  — $79</p>

<p> In addition to the ebook above, I have packaged the <strong>code from all 14 technical chapters</strong> — several of which include Rails applications with the sample gem code mounted. This is the perfect package if you want down to the code level and really get your hands dirty.</p></li>
<li><p><strong>Ebook</strong> + <strong>Code</strong> (14 chapters of code) + <strong>Screencasts</strong> (2 hrs. of video) — $129</p>

<p> In addition to the ebook and code above, I have created <strong>14 screencasts totaling over 2 hours of detailed workflow</strong>. I go through the process of writing the code for each technical chapter and discuss the benefits and downsides to the various approaches.</p></li>
</ol>


<p>I can’t tell you how excited I am to finally share this content with you. It’s been a little over 3 months since I announced that I was writing a book on building Ruby gems. To see so much interest has been really gratifying. I really can’t wait to see what you build as a result.</p>

<p>As promised, I will be sending out a <strong>discount code on Tuesday night</strong> for those on the book mailing list, good for <strong>20% off the listed price of any package</strong>. The discount will only be <strong>available for the first 24 hours</strong>. After that, the packages will return to the prices listed above.</p>
]]></content>
  </entry>
  
</feed>
