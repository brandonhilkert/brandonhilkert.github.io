<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: config | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/config/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2015-01-02T10:06:47-05:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Rails 4.1 Secrets for Configuration]]></title>
    <link href="http://brandonhilkert.com/blog/using-rails-4-dot-1-secrets-for-configuration/"/>
    <updated>2014-06-10T20:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/using-rails-4-dot-1-secrets-for-configuration</id>
    <content type="html"><![CDATA[<p>I previously wrote about how I handle <a href="/blog/flexible-rails-environment-configuration/">environment configuration in Rails</a>. Along with solutions like the <a href="https://github.com/bkeepers/dotenv">dotenv gem</a>, it relies on entirely on environment variables.</p>

<p>One of the highlighted features of Rails 4.1 was the <a href="http://guides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml"><code>config/secrets.yml</code></a> file. By default, this file contains the <code>secret_key_base</code> and defers to the ENV variable of the same name in the production environment. Even though <code>secret_key_base</code> isn’t typically referenced explicitly in an application, I was curious if I could use the <code>config/secrets.yml</code> file in place of previously documented configuration solution.</p>

<!--more-->


<p>After a little digging, it turns out that it works perfectly. A valid question is whether the variables are better referenced through the <code>Rails.application</code> hash, but that’s probably more a preference and use-case dependent decision. Either way, we’ll explore the solution below.</p>

<h2>The Question</h2>

<p>Below is a default <code>config/secrets.yml</code> file generated from a Rails 4.1 app. As you can see, both the development and test environments rely on statically set values, where the production environment relies on environment variables being set on the system. The latter is perfect for platforms like <a href="https://www.heroku.com">Heroku</a>, and just as easy if you manage your own systems on EC2 or similar infrastructure.</p>

<p>```
development:
  secret_key_base: 9ac2d0ad8ebcc312090e99d745006d3cf8</p>

<p>test:
  secret_key_base: a1580ad61ccb6ac60f9f256948cf63d6e20</p>

<h1>Do not keep production secrets in the repository,</h1>

<h1>instead read values from the environment.</h1>

<p>production:
  secret_key_base: &lt;%= ENV[&ldquo;SECRET_KEY_BASE&rdquo;] %>
```</p>

<p>Notice how ERB is processed in the file. This gives us the opportunity to use Ruby to generate random strings, dates, or anything else that can be expressed through code.</p>

<p>So can we use it for other configuration values in the application?</p>

<h2>The Solution</h2>

<p>In order to figure out where the output of the parsed secrets file was stored, I pulled the latest Rails changes and went code diving.</p>

<p>The first thing I did was search “secrets”. The first group of results were mostly comments related to the processing of <code>secret_key_base</code> and where it could be found. After combing through a few more results, I came across the <code>Rails::Application</code> class.</p>

<p>A static array at the top of the file seemed to hold some values for the application as shown below:</p>

<p>```
INITIAL_VARIABLES = [:config, :railties, :routes_reloader, :reloaders,</p>

<pre><code>                    :routes, :helpers, :app_env_config, :secrets] # :nodoc:
</code></pre>

<p>```</p>

<p>Looks like we’re on the right track. Going further down the file leads us to the getter:</p>

<p>```
def secrets #:nodoc:
  @secrets ||= begin</p>

<pre><code>secrets = ActiveSupport::OrderedOptions.new
yaml = config.paths["config/secrets"].first

if File.exist?(yaml)
  require "erb"
  all_secrets = YAML.load(ERB.new(IO.read(yaml)).result) || {}
  env_secrets = all_secrets[Rails.env]
  secrets.merge!(env_secrets.symbolize_keys) if env_secrets
end

# Fallback to config.secret_key_base if secrets.secret_key_base isn't set
secrets.secret_key_base ||= config.secret_key_base

secrets
</code></pre>

<p>  end
end
```</p>

<p>As you can see, the file path <code>config/secrets</code> is referenced as the <code>yaml</code> source:</p>

<p><code>
yaml = config.paths["config/secrets"].first
</code></p>

<p>and the result of reading the file is sent through ERB and YAML:</p>

<p><code>
all_secrets = YAML.load(ERB.new(IO.read(yaml)).result) || {}
</code></p>

<p>The environment group is parsed:</p>

<p><code>
env_secrets = all_secrets[Rails.env]
</code></p>

<p>The result of the output is returned, leaving us with a hash of options based on the environment group. With a little luck we should be able to query the application from the console and get the configuration values.</p>

<p><code>
irb(main):001:0&gt; Rails.application.secrets.class
=&gt; ActiveSupport::OrderedOptions
irb(main):002:0&gt; Rails.application.secrets
=&gt; {:secret_key_base=&gt;"9ac2d0ad8ebcc312090e99d745006d3cf8"}
irb(main):003:0&gt; Rails.application.secrets.secret_key_base
=&gt; "a1580ad61ccb6ac60f9f256948cf63d6e20"
</code></p>

<p>That’s great news because it means we can put other values in this file and reference them throughout our application using the parent hash <code>Rails.application.secrets</code>.</p>

<p>For example, let’s assume we need to configuration Pusher URL again. We could add it to the <code>secrets.yml</code> file like so:</p>

<p>```
development:
  secret_key_base: 9ac2d0ad8ebcc312090e99d745006d3cf8
  pusher_url: <a href="http://asdfa@api.pusherapp.com">http://asdfa@api.pusherapp.com</a></p>

<p>test:
  secret_key_base: a1580ad61ccb6ac60f9f256948cf63d6e20</p>

<h1>Do not keep production secrets in the repository,</h1>

<h1>instead read values from the environment.</h1>

<p>production:
  secret_key_base: &lt;%= ENV[&ldquo;SECRET_KEY_BASE&rdquo;] %>
  pusher_url: &lt;%= ENV[&ldquo;PUSHER_URL&rdquo;] %>
```</p>

<p>Now within our application we can set the Pusher URL within the initializer using the secret value:</p>

<p>```</p>

<h1>config/initializers/pusher.rb</h1>

<p>Pusher.url = Rails.application.secrets.pusher_url
```</p>

<h2>Summary</h2>

<p>I feel like my previous solution has the potential to be replaced with the secrets file. I plan to try it out in an upcoming application and see if it’s as easy to manage as it seems.</p>

<p>Note that by default, the <code>secrets.yml</code> file is NOT ignored by git. If you plan to include passwords or other sensitive data in the file, be sure to add it to your <code>.gitignore</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding the RAILS_CACHE_ID Environment Variable]]></title>
    <link href="http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable/"/>
    <updated>2014-02-19T07:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable</id>
    <content type="html"><![CDATA[<p>Last week, I was looking through my Twitter stream and came across a tweet that referenced <code>ENV[“RAILS_CACHE_ID”]</code>. I was unfamiliar with this environment variable and made a note to learn more.</p>

<p>Rails 4 has made a discernible effort to improve view rendering performance by what they’re calling <a href="http://signalvnoise.com/posts/3690-the-performance-impact-of-russian-doll-caching">russian doll caching</a>. Prior to this, view caching was simple in syntax, but realistically more complicated when cached partials needed busting on subsequent releases.</p>

<!--more-->


<p>I didn’t know if this environmental variable had anything to do with Rails 4 caching, so I went digging…</p>

<p>The first thing I did was <code>git clone</code> the Rails source code and look for that variable. Outside of the documentation and tests, it showed up in one place, <code>activesupport/lib/active_support/cache.rb</code>:</p>

<pre><code># Expands out the +key+ argument into a key that can be used for the
# cache store. Optionally accepts a namespace, and all keys will be
# scoped within that namespace.
#
# If the +key+ argument provided is an array, or responds to +to_a+, then
# each of elements in the array will be turned into parameters/keys and
# concatenated into a single key. For example:
#
#   expand_cache_key([:foo, :bar])               # =&gt; "foo/bar"
#   expand_cache_key([:foo, :bar], "namespace")  # =&gt; "namespace/foo/bar"
#
# The +key+ argument can also respond to +cache_key+ or +to_param+.

def expand_cache_key(key, namespace = nil)
  expanded_cache_key = namespace ? "#{namespace}/" : ""

  if prefix = ENV["RAILS_CACHE_ID"] || ENV["RAILS_APP_VERSION"]
    expanded_cache_key &lt;&lt; "#{prefix}/"
  end

  expanded_cache_key &lt;&lt; retrieve_cache_key(key)
  expanded_cache_key
end
</code></pre>

<p>The comments preceding the method do a good job telling the whole story. The <code>expanded_cache_key</code> variable is an array built up from the <code>key</code> argument. The <code>RAILS_CACHE_ID</code> environment variable is prefaced to this array, operating similar to a namespace.</p>

<p>With these assumptions in mind, let’s see if we prove for sure. I’ll generate a new Rails 4 app:</p>

<pre><code>$ rails new cache_test
</code></pre>

<p>We’ll be inspecting model objects, so let’s generate a fake blog model:</p>

<pre><code>$ rails g scaffold post title content:text
</code></pre>

<p>Migrate the database to get current:</p>

<pre><code>$ bin/rake db:migrate
</code></pre>

<p>I’ll create a new <code>Post</code> and take a look at the default <code>cache_key</code>:</p>

<pre><code>$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Let’s set the <code>RAILS_CACHE_ID</code> and look at the <code>cache_key</code> of this record again:</p>

<pre><code>$ export RAILS_CACHE_ID=octopus
$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Hmmm…same thing. Referring back to the Rails course code above, it turns out that not all cache writes use the <code>expand_cache_key</code> method. Searching around the Rails code for <code>expand_cache_key</code>, we find the following results:</p>

<pre><code>ActionController::Caching::Fragments#fragment_cache_key
ActionDispatch::Http::Cache::Response#etag=
</code></pre>

<p>From the looks of it, it only applies to fragment caching and manually setting ETAG headers for HTTP responses, so let’s dig in to those.</p>

<h2>Fragment Caching</h2>

<p>I can cache the post fragment by wrapping it in a <code>cache</code> block:</p>

<pre><code>&lt;% app/views/posts/show.html.erb %&gt;
&lt;%= cache(@post) do %&gt;
  &lt;p&gt;
    &lt;strong&gt;Title:&lt;/strong&gt;
    &lt;%= @post.title %&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Content:&lt;/strong&gt;
    &lt;%= @post.content %&gt;
  &lt;/p&gt;
&lt;% end %&gt;
</code></pre>

<p>Run the server and make a request to <code>http://localhost:3000/posts/1</code>.</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:16:04 -0500
  ActiveRecord::SchemaMigration Load (0.2ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.2ms)
Write fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.6ms)
  Rendered posts/show.html.erb within layouts/application (11.0ms)
</code></pre>

<p><em>Note: Make sure <code>config.action_controller.perform_caching</code> is set to <code>true</code> in <code>config/environments/development.rb</code> (it’s <code>false</code> by default), otherwise caching is disabled.</em></p>

<p>There it is! It wrote out the key <code>views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code>. Let’s change the environmental variable and see if it adjusts accordingly:</p>

<pre><code>$ export RAILS_CACHE_ID=shark
</code></pre>

<p>Restart the Rails server and again, request <code>http://localhost:3000/posts/1</code>:</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:35:33 -0500
  ActiveRecord::SchemaMigration Load (0.1ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.3ms)
Write fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.5ms)
  Rendered posts/show.html.erb within layouts/application (11.1ms)
Completed 200 OK in 82ms (Views: 62.7ms | ActiveRecord: 0.5ms)
</code></pre>

<p>Sure enough…the key <code>views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code> was used this time.</p>

<h2>Etags</h2>

<p>Etags are a value added to the HTTP headers that allow a browser to determine whether the content for a particular piece of content should be refreshed or not. If not, the server returns a <code>304</code> HTTP code and the browser uses the cached response from a previous request.</p>

<p>Rails provides two controller helper methods to help determine whether the content should be refreshed: <code>fresh_when</code> and <code>stale?</code>. The <a href="http://guides.rubyonrails.org/caching_with_rails.html#conditional-get-support">Rails guides</a> provide a decent explanation of these methods and when to use them.</p>

<p>Jumping in to the <code>PostsController</code>, let’s use the <code>fresh_when</code> method in the <code>show</code> action:</p>

<pre><code>class PostsController &lt; ApplicationController

  def show
    @post = Post.find(params[:id])
    fresh_when(@post)
  end

end
</code></pre>

<p>Now, when we request the <code>show</code> page for that post, we get an Etag back in the header response of <code>9c754ae292618570ec43cae8e03a0b13</code>. That doesn’t look very familiar, huh?</p>

<p>It turns out that the Etag is generated using the following method:</p>

<pre><code>Digest::MD5.hexadigest(key)
</code></pre>

<p>But the key is more than just the <code>cache_key</code> of the <code>@post</code>. If we refer back to where the <code>expand_cache_key</code> method was used, we see that when the <code>etag</code> attribute is set on the response, the key is expanded using the <code>ActiveSupport::Cache#expand_cache_key</code> method we looked at above:</p>

<pre><code> def etag=(etag)
   key = ActiveSupport::Cache.expand_cache_key(etag)
   @etag = self[ETAG] = %("#{Digest::MD5.hexdigest(key)}")
 end
</code></pre>

<p>Let’s stop the server and reset the <code>ENV[“RAILS_CACHE_ID”]</code>:</p>

<pre><code>$ export RAILS_CACHE_ID=whale
</code></pre>

<p>Running the same request, we get an Etag of <code>b389da68ca1b25986edecf349fcf63e6</code>. So as you can see, by updating <code>ENV[“RAILS_CACHE_ID”]</code> alone, we get a different Etag in the response without changing the <code>post</code> object itself, which means we can invalidate our browser cache by updating this environmental variable.</p>

<p>I, personally, deploy to Heroku most of the time and it’d be nice to be able take advantage of browser caching in this manner, but also know when a new deploy is released. <a href="http://ninjasandrobots.com/rails-caching-a-problem-with-etags-and-a-solution">This article</a> describes a solution that integrates Heroku’s numbered releases.</p>

<p>However, we know that Heroku uses git to get the source code of the appellation to the application container, so why not leverage git commit IDs for <code>ENV[“RAILS_CACHE_ID”]</code>.</p>

<p><code>git log</code> is a command to look at….well, git logs!. With a few additional options, we can get a shortened version of the commit SHA:</p>

<pre><code>$ git log --pretty=format:%h -n1
40ad584
</code></pre>

<p><strong>Combining the git commit SHA gives us the perfect opportunity to invalidate browser cache</strong>. If the Etag is different because a different git commit SHA is the most recent on the server, we know there’s a potential the HTML rendered and cached in the browser could be outdated. We can implement this by setting the ENV variable in <code>config/application.rb</code>:</p>

<pre><code>ENV['RAILS_CACHE_ID'] = `git log --pretty=format:%h -n1`.strip
</code></pre>

<p>Now, when a request is made we get an Etag of <code>6d80b6397347f8de1b8718e7fd9f90e1</code>. And if we add an empty commit and re-request the post, we get an Etag of <code>6dcc66ddf83613dd0c46406a1e983b38</code>.</p>

<p>Hooray! <strong>A browser caching strategy for HTML content that’s dependent on the git release</strong>.</p>

<h2>Summary</h2>

<p>Before Rails 4, it was common to use a version number in the view <code>cache</code> method so that when you changed a encompassed view template, the cache would bust and the changes would be shown. However, now that <code>cache_digests</code> are part of Rails 4, the contents of the template block is evaluated and an MD5 string is created from the contents (the latter part of the cache key &ndash; <code>c39e6bde261c006ffe9ddf27fb9d5318</code> in the last example). This ensures that whenever the contents of the view template are changed, the cache is busted and the new template is properly stored and rendered.</p>

<p>Given the <code>cache_key</code> of fragment caching is dependent on the contents of the template, I have trouble finding value in setting the <code>RAILS_CACHE_ID</code> environmental variable for fragment caching alone.</p>

<p>Alternatively, the use case for using <code>ENV[“RAILS_CACHE_ID”]</code> to control browser caching can be a tremendous asset when the content of the body response is not considered. Caching strategies can be difficult to reason about and hopefully this gives you another tool in the toolbox to make parts of your Rails applications more performant.</p>
]]></content>
  </entry>
  
</feed>
