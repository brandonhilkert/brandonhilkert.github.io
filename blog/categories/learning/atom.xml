<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learning | Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2018-05-01T21:11:04-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Start with Ruby?]]></title>
    <link href="http://brandonhilkert.com/blog/how-to-start-with-ruby/"/>
    <updated>2015-05-06T06:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/how-to-start-with-ruby</id>
    <content type="html"><![CDATA[<p>In light of RailsConf last month, I spent some time thinking about my experience learning Ruby and Rails back in 2009. The conference included quite a few seasoned veterans, but like any popular technology, there was also plenty of people that either just started learning Rails, or are considering doing so in the near future.</p>

<p>Turning the clocks back to when you knew much less about something is hard. But putting yourself back in that position can offer valuable insight to the opportunities available and how they might be improved in the future.</p>

<!--more-->


<h2>How I Started</h2>

<p>Most come to the Rails community not knowing much about Ruby. Learning any new technology is hard. And learning a few at the same time is even harder.</p>

<p>This was me in 2009. A relatively new Rails 2.3 app was dropped in to my lap, and despite only having experience with PHP, my job was to aggressively ship new features. I read Agile Web Development with Rails cover to cover and dove in head first. Little did I know it would be one of the best career decisions of my life.</p>

<p>I spent the next few months pounding my head against my desk. The days and weeks of frustration seemed endless. And then&hellip;it just went away. The pain I&rsquo;d endured merged in to an intense desire to dig in harder.  There were more light bulbs moments in the months that followed than any other time I can remember.</p>

<p>During those intense months of frustration, I leaned heavily on the Rails and Philly.rb IRC rooms. In the former, I tried not to say anything too stupid. Fortunately, the latter felt more welcoming and approachable and I owe that group a lot of holding my hand through what might have otherwise been a deathwish for me and the Ruby language.</p>

<p>A few questions pop out in my head&hellip;I was confused about filtering an ActiveRecord query and was surprised to learn methods that were built in to the Ruby language would do exactly what I want. At the time, if it wasn&rsquo;t in ActiveRecord, it might as well have not existed to me.</p>

<p>From someone who <a href="http://brandonhilkert.com/blog/7-reasons-why-im-sticking-with-minitest-and-fixtures-in-rails/">advocates for using tools without fancy DSL&rsquo;s</a>, this is hysterical to me. Ruby, of all things, had the answer. At that point, I&rsquo;m almost certain I&rsquo;d never seen the Ruby standard library documentation.</p>

<h2>Rails Starts Where Ruby Stops</h2>

<p>Out of convenience, Rails does a lot to make our experience with the Ruby language easier than it is out of the box. Like <code>2.hours.ago</code>&hellip;.none of this is possible if Rails doesn&rsquo;t <a href="http://api.rubyonrails.org/classes/Integer.html">monkey patch the <code>Integer</code> class</a>. For someone who doesn&rsquo;t know any better (me in 2009!), being able to calls <code>#hours</code> on an integer just seems like something the language would do. Because Ruby was created for developer happiness, right?</p>

<p>So perhaps the approach of monkey patching doesn&rsquo;t offer a clear indication of where functionality is coming from. The flip side of that argument is convenience. If I had to instantiate a time-related class every time I wanted &ldquo;noon time yesterday&rdquo;, maybe I&rsquo;d be slightly less enthralled with my ability to get stuff done in Rails. Perhaps it would cater more to the true OO neckbeards, but also may have resulted in far less adoption. Who knows!</p>

<p>I don&rsquo;t have strong numbers to back this up, but I&rsquo;m guessing large majority of developers that get paid to write Ruby, due so within the context of a Rails application. And whether we want to admit it or not, a large reason new developers learn Ruby, is to learn Rails. So does it matter that newcomers don&rsquo;t know Ruby?</p>

<p>From the standpoint of creating a web application fast and being able to iterate quickly, maybe not. But certainly if the person is interested in understanding the interworkings of what&rsquo;s happening within the application, knowing where Ruby stops and Rails starts is ideal.</p>

<h2>How to Start?</h2>

<p>I&rsquo;ve talked to quite a few people that are new to Ruby and I always struggle to suggest a good start project when they ask.  Everyone learns differently and has different interests, but in general, I think there are core-level motivating factors that can keep someone focused and interested.</p>

<p>To me, it&rsquo;s the following:</p>

<ol>
<li>Does the project have real-world value?</li>
<li>Does the project offer immediate feedback?</li>
</ol>


<p>Why does it matter if the project has real-world value? For one, continuing on something that doesn&rsquo;t improve our lives is sometimes hard to keep up with. And learning Ruby/Rails is definitely something that&rsquo;ll take more than a few nights and weekends. If the project we&rsquo;re driving towards continues to seem desirable, we&rsquo;ll have a better chance not to lose focus.</p>

<p>Second, I don&rsquo;t want to get too philosophical, but there are plenty of resources that suggest if you want something badly enough and can visualize the end goal, there&rsquo;s a higher likelyhood that it&rsquo;ll come to be. Our desires will be stronger when we can see the end goal and know there is an increased real-world value for this application to be in existence.</p>

<p>The immediate feedback piece shortens the time we&rsquo;re able to see changes and progress. This brings a lower rate of abandonment and better chance we&rsquo;ll see the project through.</p>

<p>Rails answers both of these questions with a resounding, &ldquo;<strong>YES!</strong>&rdquo;. Think about it&hellip;</p>

<p><strong>Does a Rails application have real world value?</strong> Of course it does. It&rsquo;s a web application. There has been no better time to be focused on Rails, where it be for the web and the backend of a mobile app.</p>

<p><strong>Does the project offer immediate feedback?</strong> Sure does! A couple keystrokes and a refresh can give you instant gratifcation in the browser (or the occasional disappointment!).</p>

<p>Whether it&rsquo;s a command-line tool, game, or other utility, I struggle to find other oppotunities to get people started. Frankly, many newcomers to Rails have never used a terminal before. So why would we suggest a command-line application as a good place to start? This is especially true for someone with little programming experience.</p>

<p>For the experienced developer, it&rsquo;d be much easier to suggest writing something like a markdown processor, but only because they have the context of another language. At that point, they&rsquo;re really just comparing the Ruby language to what they already know and figuring out how to translate the things they <em>do</em> know to Ruby.</p>

<p>For a new developer altogether, they would get little value of writing a markdown processor, and in fact, probably seems more like a research project than a sure-fire way to learn a developer-friendly programming language.</p>

<p>So now we&rsquo;re back to suggesting Rails, but then you consider everything else a newcomer would need familiarity with to traverse the Rails eco-stytem: HTML, CSS, Javascript, Coffeescript, Sass, SQL&hellip;</p>

<p>The list goes on and on. Not so easy after all. No wonder people get intimidated and bail. I suppose there&rsquo;s starting with Sinatra, but the doesn&rsquo;t remove you from the HTML and CSS requirements. Perhaps those impossible to dodge, given the medium. And even with Sinatra, we often end up creating the functionality that&rsquo;s in Rails anyway.</p>

<p>I wish I had a better answer.</p>

<p><strong>How would you suggest someone start with Ruby?</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build something]]></title>
    <link href="http://brandonhilkert.com/blog/build-something/"/>
    <updated>2013-10-29T20:10:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-something</id>
    <content type="html"><![CDATA[<p><em>A variation of this post originally appeared on the <a href="http://railsmasterclass.com/">Rails Masterclass</a>
newsletter.</em></p>

<p>Learning new technologies can be a challenge. With books, forums, videos, blog
posts&hellip;where do you start?!?! I&rsquo;ve used all these resources in the past and
only one thing has reliably led to me to really learn the concepts &ndash; building something REAL!</p>

<h2>How I learned Ruby and Rails</h2>

<p>Several years ago, I was learning both <a href="https://www.ruby-lang.org/">Ruby</a>
and <a href="http://rubyonrails.org/">Rails</a> and trying to figure out which books were
worth the time. I ended up starting with <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Web Development with
Rails</a>,
which was a fantastic introduction to the features and benefits you&rsquo;ll get from
learning the Rails framework. However, like many other books, it guides you
through building a website with little real world value &ndash; an e-commerce
shopping cart (you&rsquo;ve heard this one before, right???).  The concepts in the
book generally apply to other products built with Rails, but it was sometimes
hard for me to see their value elsewhere.  I found that the books and articles often skipped over things that were fairly
trivial for a more experienced developer, but essential to get a real world application out the door.</p>

<!--more-->


<h2>The best way to learn (with a catch)</h2>

<p>I propose you build something&hellip;anything really. But it would be more useful if
the thing you build is useful to either you, someone else, or even
better&hellip;everyone! But there&rsquo;s a catch&hellip;whatever you build, you must not only
put it out there for the world to see, but you must share it in whatever way
you feel comfortable.</p>

<h2>My Craigslist Scraper</h2>

<p>A few years ago, I was in the market for a new job. I built a small Craigslist
scraper that searched for &ldquo;my perfect job&rdquo; and had it notify me via email
whenever it found a similar post.</p>

<p>The process of creating this little scraper did two things for me. First, it
allowed me to learn (I wrote it in Perl and at the time knew very little about
the language&hellip;). And second, it saved the 15 minutes or so it would take me
each day to sift through the new job postings. It really was a win-win!</p>

<h2>Start to Finish</h2>

<p>It&rsquo;s easy to copy and paste code snippets from a blog post or book. It&rsquo;s much
harder to see these applications through to the point where they&rsquo;re useful. Who
cares if no one uses it? The value you get from seeing your application code
all the way to the point of production is exponentially greater than the value
of having run &ldquo;rails server&rdquo; on your local development machine.</p>

<p>Questions such as &ldquo;How will I log and be notified of errors?&rdquo; and &ldquo;How will I
backup my production data store?&rdquo; take time and thought to answer.</p>

<p>There are so many easy to use
<a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PAAS</a> platforms
now-a-days, even if you&rsquo;re not the devops guru that you aspire to be, you too
can have production code running with minimal effort for FREE!
<a href="https://www.heroku.com">Heroku</a> is a great example of a place that you can
host your Rails applications without hassle or cost. If you have an application
running locally that you&rsquo;d like to share, hosting it at Heroku is a no-brainer.</p>

<p>If you have more aspirational goals of managing servers and understanding what
makes a Rails application tick, servers at <a href="https://www.digitalocean.com/">Digital
Ocean</a>, <a href="https://www.linode.com/">Linode</a>, and
<a href="http://www.rackspace.com/">Rackspace</a> can be extremely cost effective.</p>

<h2>Dogfooding</h2>

<p>Building an application that can save you time in your daily routine (ie. task
tracker, appt. reminder, etc.) is a great first step to learning more. It&rsquo;s
also very possible that if the application helps you, it could help other
people. I&rsquo;ll leave the marketing talk for another time, but stepping back and
being an actual user of your application will cause you to look at it in a very
different light. It&rsquo;s likely that you&rsquo;ll find ways to drastically improve your
application within the first 10 minutes of usage.</p>

<h2>Sharing (this is my favorite part)</h2>

<p>You&rsquo;ve now spent several weeks/months building something interesting &ndash; tell the
world about it. Tweet about it, post it to your local user group mailing list,
email your friends, anything&hellip;the more people that see it, the better. Like
dogfooding, you&rsquo;ll get valuable feedback that you might not have gotten
otherwise.</p>

<p>I can hear all the perfectionists now&hellip;&ldquo;I don&rsquo;t want to share it until it&rsquo;s
perfect&rdquo;. Having worked on a number of large applications, the candid truth is
that it will <strong>NEVER</strong> be perfect. The feedback you&rsquo;ll get sooner is more
valuable than the time you&rsquo;ll waste by attempting perfection. Besides, I have a
feeling that most the features you thought you <em>had</em> to have before you
launched are unimportant to the people that actually want to use your
application.</p>

<p>There&rsquo;s a more subtle point to sharing your new application&hellip;subconsciously
you&rsquo;re likely not going to share something that you think is crappy. If your
goal is to ultimately share what you&rsquo;ve built, you&rsquo;ll put the work in to make
it worthy of sharing, and in the process, learn about the finer details of
releasing a web application in to the wild, not just a basic shopping cart that
has minimal real-world value.</p>

<h2>Where to go from here?</h2>

<p>Knowing what you want to build is easier said than done. I keep a list of ideas
that I ultimately want to build someday. Some have very little use outside my
own world and others probably have potential to be used by other people, but
either way, bringing these ideas to life with new technologies or concepts
really helps me to solidify their real-world value.</p>

<p>If you don&rsquo;t have ideas, a quick Google search for &ldquo;startup ideas&rdquo; will provide
you with some very interesting results. However, I&rsquo;d think about the things
you&rsquo;re doing everyday and ask yourself if any of them can be solved, or aided,
with software. If the answer is &ldquo;yes&rdquo; to any of them, you have yourself a great
candidate.</p>

<p>I&rsquo;d love to hear about what you&rsquo;re building and the challenges you&rsquo;re facing.</p>
]]></content>
  </entry>
  
</feed>
