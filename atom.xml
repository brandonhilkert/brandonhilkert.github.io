<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-10-13T12:28:57-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing FunnelOptimizer.io]]></title>
    <link href="http://brandonhilkert.com/blog/introducing-funneloptimizer-dot-io/"/>
    <updated>2014-10-06T21:21:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/introducing-funneloptimizer-dot-io</id>
    <content type="html"><![CDATA[<p>Last month marks the 6 month anniversary of the release of <a href="http://brandonhilkert.com/books/build-a-ruby-gem/">Build a Ruby Gem</a>. Thinking back to this time last year, I would’ve never guessed that I would launch a product to the tune of $16k+ sales in 6 months. Thanks to the help of expert teachers, I was able to quickly get over my fear of marketing and put my technical knowledge to good use.</p>

<p>The weeks leading up to the launch seem like a blur now. At the time, I had a perfectly crafted schedule of marketing material and approaches that, as far as I can tell, were the difference between no sales and quite a few.</p>

<!--more-->


<p>One of the biggest lessons learned was capturing emails on my <a href="http://brandonhilkert.com">blog posts</a>. Newsletter opt-ins are fantastic way to gather interest and offer subscribers additional incentives like discounts or other non-public postings. I, like many, made use of related blog posts to capture emails with a form like this:</p>

<p><img class="center" src="http://brandonhilkert.com/images/funnel_optimizer/newsletter-form.png" title="&#34;BrandonHilkert.com newsletter form&#34;" alt="&#34;BrandonHilkert.com newsletter form&#34;"></p>

<p>One of the benefits of serving a niche like Ruby programmers is there are quite a few repeat visitors. Around the new year, I was posting twice a month, and then every week leading up to the launch. The posts were naturally related to the content of building a Ruby gem and gave some teasers to what readers could expect in the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/">book</a>.</p>

<p>But one of the things that always bummed me out was how previously subscribed readers to my newsletter <strong>STILL saw the same newsletter opt-in form shown above</strong>. <em>Why on Earth would that be helpful to the them???</em></p>

<p>They can’t sign up twice, so why would I show them the form again? It turns out there’s no good answer for this. In general, the quickest way to solve this problem is to purchase a fancy marketing automation system and pay potentially 4 figures a month. There was no room for this with my little budget.</p>

<p>Ideally, what I wanted was to show my first visitor the opt-in form above, and then if they signed up, promote my book. Regardless of what I show, I could be using the real estate to show something that was more beneficial to the reader. And that’s the thing, it’s all about them. Anything I showed them beyond the form they already subscribed with would be more beneficial.</p>

<h2>I’m excited to tell you about <a href="http://www.funneloptimizer.io/">Funnel Optimizer</a>!</h2>

<p>I built Funnel Optimizer for people like me, and you. I want to help you sell more products, and provide even more value than you’re already providing. Funnel Optimizer offers you the opportunity to tailor your CTAs based on actions your audience have previously taken.</p>

<p><img class="center" src="http://brandonhilkert.com/images/funnel_optimizer/screenshots.png" title="&#34;Screenshots of FunnelOptimizer.io&#34;" alt="&#34;Screenshots of FunnelOptimizer.io&#34;"></p>

<p>I’d love to offer the service to everyone immediately, but I’m focused on making sure you get the most out of the service, no matter what platform and where your site is hosted, so new users be on-boarded in batches of 5. There will be a monthly subscription cost beyond the initial on-boarding period.</p>

<p>To get started today, enter your email below:</p>

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&amp;id=592d5fa71d" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" placeholder="your@email.com" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="fo-introduction-blog" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="fo" />
    <input type="submit" class="button" value="I'd like to get started" name="subscribe">
    <br class="clear">
  </form>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Absolutes as an AntiPattern]]></title>
    <link href="http://brandonhilkert.com/blog/absolutes-as-an-antipattern/"/>
    <updated>2014-09-28T22:35:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/absolutes-as-an-antipattern</id>
    <content type="html"><![CDATA[<p>It’s been awhile since my last post — almost 2 months to be specific. A trip to Portugal, getting sick and a minor run-in with a table saw made it challenging to post anything for the last couple weeks. But I’d be lying if I said I was itching to write.</p>

<p>During that time, I didn’t have anything screaming to be talked about. I have a long list of “decent post” topics, but none of them got me particularly excited. Until today…</p>

<!--more-->


<p>I stumbled on a blog post related to Rails’s upcoming <a href="http://edgeguides.rubyonrails.org/active_job_basics.html">Active Job feature</a>. While demonstrating the syntax for specifying the adapter, there was comment in the code snippet that said <em>“inline and other worse options”</em>. This caught me by surprise and bummed me out at the same time. Not only because I’m the author of <a href="https://github.com/brandonhilkert/sucker_punch">one of them</a>, but because there are a handful of background processing libraries in Ruby that are really good.</p>

<p>So, naturally, I pinged the author and mentioned the comment might be sending the wrong message. He responded with “I consider sidekiq to be the best background processing tool available for Ruby.” And then later, <em>“sidekiq is significantly better that delayed_job and resque. You’re welcome to disagree”</em>.</p>

<p><em>Note: The responses above illustrate a general sentiment. By no means is this post focused on the individual that said them.</em></p>

<p>The thing is, I don’t completely disagree. As you probably already know, I’m a huge fan of of <a href="http://sidekiq.org/">Sidekiq</a>. I’ve contributed to the project and believe Sidekiq’s author, <a href="https://www.mikeperham.com/">Mike Perham</a> is not only a great leader in the Ruby community, but a great example of how to manage and lead open source projects well.</p>

<p>However, those responses reminded me how damaging absolutes can be. You’ve probably heard it before:</p>

<blockquote><p>“we can <strong>ABSOLUTELY NOT</strong> do x, y and z”</p></blockquote>

<p><em>Why not? Will the world end? How do I know?</em></p>

<p>or, what about:</p>

<blockquote><p>“this feature needs to go out tomorrow, no excuses”</p></blockquote>

<p><em>What if there is an excuse? What if it’s not ready? Will I be fired? Will our company go under?</em></p>

<p>There are trade-offs to every decision made. While some options may not be ideal, they may still work, perhaps just not as well.</p>

<p>Absolutes beg the toddler question, <em>”why?”</em>. <em>Why won’t that language X work?</em> <em>Why can’t we use Y?</em>. If you don’t know the answer to those questions, you’re doing yourself a disservice by not asking. Maybe the person has thoroughly researched the topic to come up with those conclusions. But, maybe, they haven’t.</p>

<p>I’ve noticed those who do exhaustive research on a topic tend to present the information in a different manner. They’re confident the facts they found will prove their case and seem to present their findings less defensively. No, <em>”it has to be done like this”</em>. More like, <em>“I found a few ways to fix the problem and here’s why I think option 1 might be the best solution. What do you think?”</em>.</p>

<p>Whether you follow agile or any other methodology, predictions and absolutes have no place in conversations. There are plenty of examples of failed software projects. I’m pretty sure all of them featured people promising the work would be done in time and under budget. Buuuuuuut, it wasn’t.</p>

<h2>Background Jobs for the Big Boys</h2>

<p>Delayed Job was the first Ruby background processing library I used. I remember feeling badass that I was doing all this complicated stuff in the background. But at some point, there we so many jobs and so much activity that pushing and pulling jobs out of the primary data store wasn’t efficient. Reads from the web UI would slow down (and ultimately stop) and users would bail. Unfortunately, I couldn’t pop up a message and say, <em>”hey, hope you don’t mind, but I’m doing some pretty crucial shit in the background here, so you’re experience is gonna be sucky for a bit! sorry :(”</em>.</p>

<p>So, at the time, Resque was the next logical transition. I migrated the previously written jobs from Delayed Job to Resque and experienced a new level of <em>bad ass</em>. Fast forward 4 years — I still work on projects using Resque. Needless to say, it’s a pretty awesome piece of open source software.</p>

<p>A few years ago, Sidekiq came along. While I didn’t know much about multi-threading code in Ruby, I tried it on a side project and was floored at the results. Those 6 Heroku workers that I’d been paying for could be compacted in to 1?!?! And on top of that, I only needed 1 worker that had 25 workers working against the queue?!?!</p>

<p>But then one day, I dropped it in to a project that was using MongoDB and MongoMapper as ORM and things didn’t go so well. In the end, MongoMapper wasn’t thread-safe, which is a requirement of Sidekiq worker code. So in that case, was Sidekiq the best tool for the job? While I would’ve loved to use Sidekiq on that project, it certainly (like the absolute there…) wasn’t the right tool for <em>that</em> job.</p>

<p>And what about when I first started with Delayed Job…we were a small startup with limited cash. While it seems silly to balk over an extra $35 Heorku dyno, it was $35 that could’ve gone towards something else. Not to mention the extra Redis instance, along with the expertise to make sure the thing didn’t fall over and die. Was Sidekiq (or Resque for that matter) the best tool for that job? Nope!</p>

<p>Fast forward a few years, I had the need for an in-process background processing library, so <a href="http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem/">I wrote one</a>. That need was driven off the motivation above — needing to minimize cost and complexity. Would Sidekiq have worked for that project? Of course! In fact, it was using Sidekiq for a year or so before I transitioned the jobs to use Sucker Punch.</p>

<h2>Use Cases</h2>

<p>At this point, you should be noticing a trend, right? The examples above were unique use cases with a unique set of requirements and limitations. Sure, if every project I worked on had unlimited resources (both time and money), Sidekiq would be probably be my go-to the majority of time (even when writing that sentence I hesitated and almost wrote “all the time”).</p>

<p>But I hesitate now. Because I remember learning about the new cool things and thinking, <em>”This is the best! There’s no way I’ll never not use it”</em>. And when I would talk to other developers, I would rave about how <em>X</em> is the best for <em>Y</em>. And now I realize I was a dummy for doing that. There’s no way I could’ve made that judgement for someone else and their work. What I really should’ve said was, <em>”I tried [insert fancy new gem/technique] for the first time the other day. It worked really well for doing X in my project that does Y”</em>. That definitely doesn’t sound as exciting, but it was the truth.</p>

<p>I feel fortunate to get to write Ruby everyday. It’s incredibly expressive, which is why the debate over the countless ways to do something is great. Does the code express the right intent? For your method, it might. But for mine, it might express the complete opposite. The good news is, that’s OK. Both versions will work and the fact that we can have conversations like that is a praise for the language itself. I prefer to have the opportunity to have that conversation about style, rather than a language more black and white. Maybe it’s the creative in me, but it seems like no 2 Ruby solutions will be identical and that’s one of the things I love most about writing Ruby.</p>

<p>We often joke about the stack overflow post that starts with <em>“I’m thinking about learning Rails…is it better than PHP?”</em>. Or even more relevant today, <em>”Which javascript framework should I use?”</em>.</p>

<p>And then there’s the guy who comes along and is all like, <em>”Let’s back up, what are you doing and why do you absolutely need a FRAMEWORK????”</em>. While I used to ignore those types of comments, they’re the kind that I think about now and find myself typing. And that has me wondering…why the change?</p>

<h2>Experience, Experience, Experience</h2>

<p>I got to thinking about how I felt when I was first learning to program. When I started to feel comfortable with Rails, my confidence was through the roof. But at the same time, my naivety was at an all time high. I had had minimal experiences with software systems that were either critical or heavily-loaded. But having found Resque, I felt like I could solve the world’s problems. This is somewhat of an exaggeration, but not too far off. I realized that, as it relates to my technical career, my naivety is doing this related to time:</p>

<p><img class="center" src="http://brandonhilkert.com/images/absolutes/naivety-graph.png" title="&#34;Graph of Naivety over Time&#34;" alt="&#34;Graph of Naivety over Time&#34;"></p>

<p>The less naivety, the more options and, naturally, certainty takes a nose dive:</p>

<p><img class="center" src="http://brandonhilkert.com/images/absolutes/certainty-graph.png" title="&#34;Graph of Certainty over Time&#34;" alt="&#34;Graph of Certainty over Time&#34;"></p>

<p>The more I learn about programming in general, the more questions I have. Fortunately, experiences have brought me to a point where I can fairly weigh the use of Sucker Punch or Delayed Job for a particular use case. I’m not sure projecting absolutes from up high does anyone any good. Beginners will take it as the word and spread the message to others they come across.</p>

<p>Use cases are real. And the less we force our own biases on people, the faster they’ll realize experience is key and the random guy behind the cat avatar on Stack Overflow might actually be asking the right questions — even if they are convoluted.</p>

<p>Next time you hear an absolute, ask <em>”Why?”</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Logic from a Rails View]]></title>
    <link href="http://brandonhilkert.com/blog/refactoring-logic-from-a-rails-view/"/>
    <updated>2014-07-30T06:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/refactoring-logic-from-a-rails-view</id>
    <content type="html"><![CDATA[<p>It’s generally known that leaving any kind of logic in a Rails view is bad news, both for debugging and your own sanity. Rails views can be cumbersome to test and leave a lot to be desired when it comes to debugging.</p>

<!--more-->


<p>I recently went through the process of refactoring a Rails view that included logic. The end result was an isolated <a href="http://blog.jayfields.com/2007/10/ruby-poro.html">PORO</a> that was easily integrated with the controller/view.</p>

<h2>Background</h2>

<p>The app I’m currently working on is a greenfield app with vague specs, at best. I don’t mention this to fault anyone, but more to illustrate a point. Not all greenfield projects have well-defined specs.</p>

<p>In this particular case, the stakeholders were somewhat unsure of what the interface should look like. Together, we tossed around a number of ideas, ultimately leading to a few options. Only once an iteration of the UI was available, would we have a clear picture of whether it <em>felt right</em>.</p>

<h2>The Problem</h2>

<p>I implemented the first option in the most crude way I could think of. Unfortunately, that way involved putting logic in the view. I know, I know — I can hear it now, <em>”C’mon Brandon, everyone knows you shouldn’t do this!”</em>. Here’s the thing — I knew it too.</p>

<p>Here’s what I ended up with:</p>

<figure class='code'><pre><code># controller

def people
  @week_of = params[:week_of] || Checkin::Week.recent(current_company).first.beginning
  @people = current_user.reports
end

# view

&lt;% @people.each do |person| %&gt;
  &lt;% checkin = person.checkin_for(@week_of) %&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;%= profile_picture person %&gt;
      &lt;%= person %&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;%= checkin_status(checkin) %&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;</code></pre></figure>


<p>For each iteration of <code>@people</code>, I looked up the check-in for that particular week from the model:</p>

<figure class='code'><pre><code>def checkin_for(week_of)
  Checkin.find_by(user_id: id, week_of: week_of)
end</code></pre></figure>


<p>This crosses concerns, blurs responsibility — all the things that bad Rails app are made of. But I was doing this knowing it would either be entirely ripped out (we’d change the UI altogether), or refactored to something better.</p>

<p><em>Note: I could’ve just saved myself one step and never made the method in the model. For some reason, that made me feel better about it at the time. *shrugs*</em></p>

<p>So I added a Github issue and went on my way…</p>

<p><img class="center" src="http://brandonhilkert.com/images/view-refactor/gh-issue.png" title="&#34;Github issue to refactor Rails view&#34;" alt="&#34;Github issue to refactor Rails view&#34;"></p>

<h2>The Solution</h2>

<p>With a few minor tweaks, this implementation of the functionality and UI was adequate. So as time allowed, I jumped back in to untangling the mess I created.</p>

<p>The biggest variable in the display of a <code>Checkin</code> was the week (a date field corresponding to the beginning of that particular week). Once the date was known, I could look for a <code>Checkin</code> for each user in my visibility, see if it existed, and if not, return a stand-in object to represent a non-completed check-in.</p>

<p>I removed the model method:</p>

<figure class='code'><pre><code>def checkin_for(week_of)
  Checkin.find_by(user_id: id, week_of: week_of)
end</code></pre></figure>


<p>and the line in the view largely responsible for the mess:</p>

<figure class='code'><pre><code>&lt;% checkin = person.checkin_for(@week_of) %&gt;</code></pre></figure>


<p>I went back to the controller and initialized a new object that would allow me to iterate over a list of check-ins:</p>

<figure class='code'><pre><code>def people
  @week_of = params[:week_of] || Checkin::Week.recent(current_company).first.beginning
  @reports = Checkin::Reports.new(current_user, @week_of)
end</code></pre></figure>


<p>Let’s dig in to the new <code>Checkin::Reports</code> class…</p>

<figure class='code'><pre><code>class Checkin
  class Reports
    def initialize(user, week_of)
      @user, @week_of = user, week_of
    end

    def checkins
      reports.map { |person|
        Checkin.find_or_initialize_by(user_id: person.id, week_of: week_of)
      }
    end

    private

    attr_reader :user, :week_of

    def reports
      user.reports
    end
  end
end</code></pre></figure>


<p>I instantiate with the user and week, similar to what the <code>checkin_for</code> model method did above.</p>

<p>The only relatively interesting part of this class is that it’s using <code>find_or_intialize_by</code>. It turns out that the view didn’t care if the object was <code>nil</code>, or just a non-persisted <code>Checkin</code> object. All it did was interrogate certain attributes of the object, and guard against the argument being <code>nil</code>. From that perspective, we’ve improved our code even more because now instead of supplying nil to the helper, we are actually supplying it with a newly instantiated <code>Checkin</code> with some default attributes.</p>

<p>This means that our <code>checkin_status</code> helper, went from:</p>

<figure class='code'><pre><code>def checkin_status(checkin)
  if checkin && checkin.completed_at?
    fa_icon("check-square-o", class: "green") + " Submitted #{local_time checkin.completed_at, format: :short_month_day }".html_safe
  else
    fa_icon("warning", class: "yellow") + " Not completed"
  end
end</code></pre></figure>


<p>to:</p>

<figure class='code'><pre><code>def checkin_status(checkin)
  if checkin.completed_at?
    fa_icon("check-square-o", class: "green") + " Submitted #{local_time checkin.completed_at, format: :short_month_day }".html_safe
  else
    fa_icon("warning", class: "yellow") + " Not completed"
  end
end</code></pre></figure>


<p>It’s a subtle change (removing the check <code>if checkin</code> from the first conditional), but one that’s less susceptible to bizarre edge cases. And clearer — It’s reasonable to expect that by calling the first argument <code>checkin</code>, <strong>the variable should be a <code>Checkin</code></strong>, and not sometimes <code>nil</code>.</p>

<p>Returning back to the view…using the new <code>@reports</code> variable, we no longer have to query during each iteration:</p>

<figure class='code'><pre><code>&lt;% @reports.checkins.each do |checkin| %&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;%= profile_picture checkin.user %&gt;
      &lt;%= checkin.user %&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;%= checkin_status(checkin) %&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;</code></pre></figure>


<p>Tests pass, and we’re in a much better place than we were before.</p>

<h2>Summary</h2>

<p>I’ve seen a lot of people make notes for themselves to improve areas of their application and either never get the opportunity to go back and do so, or get so far removed from the mess, they forget about how bad it was in the first place. The approach I took above by making a note for myself worked because <strong>I knew</strong> I would go back to it. It’s possible this may not work for everyone.</p>

<p>If it takes more than just making a Github issue for your and your team, find what works. The important part is that the refactor takes place, in whatever way convenient for you.</p>

<p>The idea of not putting logic in a Rails view is well regarded as a best practice. Don’t think that just because I did it above, I’m advocating that it’s ok. To me, it’s only acceptable if you go back at a later time (soonish…) and clean it up.</p>

<p>Leaving little bits of bad practice sprinkled all of your app is heading of for a bad time. As <a href="http://sandimetz.com/">Sandi Metz</a> says, <a href="http://www.confreaks.com/presenters/211-sandi-metz">“go ahead, make a mess”</a>. Just be sure to come back and clean it up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem - Ruby Heroes]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-ruby-heroes/"/>
    <updated>2014-07-09T06:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-ruby-heroes</id>
    <content type="html"><![CDATA[<p>It’s been 3 months since the release of <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes"><em>Build a Ruby Gem</em></a> and I’ve gotten tremendous feedback since the launch.</p>

<p>I’ve love to share some news and an opportunity to win a <strong>FREE</strong> copy of the book. If you’ve already purchased the book, don’t worry, we’ll find a way to make it worth it for you.</p>

<!--more-->


<h2>Feedback</h2>

<p>The two questions I’ve heard the most since the release of the <a href="http://brandonhilkert.com/courses/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">email course</a> and <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">book</a> are:</p>

<ol>
<li><p>Why should I get involved with open source software?</p></li>
<li><p>How do I get started contributing to an open source project?</p></li>
</ol>


<h2>Benefits of Getting Involved</h2>

<p>Participating in open source projects is an enlightening experience. The benefits are widespread and different for each developer. Speaking personally, I’ve learned a ton from the codebases I’ve gotten involved with. Learning was the primary reason I got involved in the first place.</p>

<p>Going beyond the learning aspect, my open source contributions have resulted in several <strong>jobs offers</strong>, among other things. It’s easy to think that getting involved is only just about doing good for the community — but it’s <strong>bigger than that</strong>.</p>

<p>I could go on and on, but it’s likely you’ve already heard me talk about this through my post on <a href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">ways to get started contributing to open source</a> or the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes">open source chapter in <em>Build a Ruby Gem</em></a>.</p>

<h2>Hear It From Others in the Community</h2>

<p>Hearing other people’s stories has always had a profound effect on my comfort-level when approaching things I’m unfamiliar with. So with that being said, I want you to hear the answers to the questions above from those YOU look up to in the Ruby community.</p>

<p>This person could be the author of your favorite gem or Matz himself (disclaimer: I may or may not be able to make this one happen…). Either way, I’ll do my best to have live interview chats with your favorite Rubyists and dig through their experience and thoughts on the community and software in general.</p>

<p><em>Entries have closed for the giveaway.</em></p>

<p>Submissions will be open until <strong>5:00pm EDT on Friday, July 11</strong>. I’ll announcement the winner shortly thereafter.</p>

<p>Even if you don’t win, I’ll send everyone that submits a response a <strong>20% discount code</strong> for any package of <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=rubyheroes"><em>Build a Ruby Gem</em></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minitest Helper Includes and Rails Fixtures]]></title>
    <link href="http://brandonhilkert.com/blog/managing-login-passwords-for-capybara-with-minitest-and-rails-fixtures/"/>
    <updated>2014-06-25T06:10:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/managing-login-passwords-for-capybara-with-minitest-and-rails-fixtures</id>
    <content type="html"><![CDATA[<p>Contuining my <a href="http://brandonhilkert.com/blog/7-reasons-why-im-sticking-with-minitest-and-fixtures-in-rails/">love affair with Minitest and fixtures</a>, I wanted to dive in to something deeper this time. Switching tools takes time to get used to and managing passwords was one of the bigger headaches I encountered.</p>

<!--more-->


<h2>The Problem</h2>

<p>I wanted to use <a href="https://github.com/jnicklas/capybara">Capybara</a> for integration testing. The application uses the standard email/password combo to authenticate users via <a href="http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password"><code>has_secure_password</code></a>.</p>

<p>Because plain text passwords are not stored in the database, but rather a <a href="https://github.com/rails/rails/blob/3bdf7b80a11dcb67b18553ff1fe0da82b0cffc20/activemodel/lib/active_model/secure_password.rb#L112"><code>password_digest</code></a>, I didn’t have a good way to fill in the login forms using Capybara to test against pages that require authentication.</p>

<h2>The Solution</h2>

<p>I started with a simple <code>users.yml</code> fixture that looked like this:</p>

<figure class='code'><pre><code>fred:
  first_name: Fred
  last_name: Flintstone
  email: fred@flintstone.com
  title: CEO
  company: flintstone
  admin: true</code></pre></figure>


<h3>Bcrypt</h3>

<p>As mentioned above, <code>has_secure_password</code> uses <code>Bcrypt</code> to encrypt the plain text passwords provided. The specific implementation to create the password digest is:</p>

<figure class='code'><pre><code>BCrypt::Password.create("password", cost: 4)</code></pre></figure>


<p>This method takes the plain text password (“password”) and encrypts it with what it calls the “cost”. It’s not terribly important for this article, but to save some speed, I’ve specified a cost of 4 — <a href="https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/engine.rb#L7">the minimum cost support by the <code>Bcrypt</code> algorithm</a>. The default is 10, which will make your production applications safer. However, for testing, we don’t care.</p>

<p>The result of the method above looks like this:</p>

<figure class='code'><pre><code>irb(main):001:0&gt; require "bcrypt"
=&gt; true
irb(main):002:0&gt; BCrypt::Password.create("password", cost: 4)
=&gt; "$2a$04$gw09FM67MDnzduXmlK46BOsdVTtzWKaSIkAdmnF/sJSLgcQhJBAUe"</code></pre></figure>


<p>That output value is what’s being stored in our database when a user inputs and saves a password. From the application’s standpoint, we could print a value like this in to our fixtures, but what’s the fun in that?!?!</p>

<h3>ERB in Fixtures</h3>

<p>Since fixtures allow us to use ERB in them, we could provide the <code>Bcrypt</code> method above to produce the password digest like so:</p>

<figure class='code'><pre><code>fred:
  first_name: Fred
  last_name: Flintstone
  email: fred@flintstone.com
  password_digest: &lt;%= BCrypt::Password.create("password", cost: 4) %&gt;
  title: CEO
  company: flintstone
  admin: true</code></pre></figure>


<p>The downside is that the actual password (“password”) is here in plain text. To fill in our login form using Capybara, we don’t have a variable to access to the get the password — we literally have to type “password”. So this isn’t the most DRY thing in the world. While it would certainly work, I think we can do better…</p>

<h3>Capybara</h3>

<p>Let’s say I have a test that looks like this:</p>

<figure class='code'><pre><code>visit signin_path
fill_in "email", with: user.email
fill_in "password", with: "password"
click_on "Sign in"</code></pre></figure>


<h3>Extract a Module</h3>

<p>Our goal was to not sprinkle these plan text passwords all over the place. So let’s extract a module call <code>TestPasswordHelper</code> and put the plain text password in there:</p>

<figure class='code'><pre><code>require "bcrypt"

module TestPasswordHelper
  def default_password_digest
    BCrypt::Password.create(default_password, cost: 4)
  end

  def default_password
    "password"
  end
end</code></pre></figure>


<p>We’ll have our default password accessible via a method named…get this, <code>default_password</code>! The module also contains a method (<code>default_password_digest</code>) that will allow us to send the password digest to the fixture using the Bcrypt algorithm we explored above.</p>

<p>Now that we have a helper module ready all set up, we add the following to our <code>test/test_helper.rb</code> to make these methods accessible in our tests:</p>

<figure class='code'><pre><code>require "support/test_password_helper"

class ActiveSupport::TestCase
  include TestPasswordHelper
end</code></pre></figure>


<p>With these methods mixed in, we can update our Capybara test to use the <code>default_password</code> method:</p>

<figure class='code'><pre><code>visit signin_path
fill_in "email", with: user.email
fill_in "password", with: default_password
click_on "Sign in"</code></pre></figure>


<h3>Helpers in Fixtures</h3>

<p>Unfortunately, those helpers aren’t available in the fixtures.</p>

<p><code>ActiveRecord::FixtureSet</code> is the class that gives our fixtures life. We can use Ruby to include functionality from our test helper, that will give us access to to the <code>default_password_digest</code> method, which reads our <code>default_password</code> so we don’t have to type it out.</p>

<p>The <a href="http://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html#method-c-context_class">Rails API guide for fixtures</a> states that helper methods should be added to <code>ActiveRecord::FixtureSet.context_class</code>.</p>

<p>So back in our <code>test_helper.rb</code>, we can mix in our test helpers methods like so:</p>

<figure class='code'><pre><code>ActiveRecord::FixtureSet.context_class.send :include, TestPasswordHelper</code></pre></figure>


<p>Now, back in our <code>users.yml</code> fixture, we can use the new <code>default_password_digest</code> method:</p>

<figure class='code'><pre><code>fred:
  first_name: Fred
  last_name: Flintstone
  email: fred@flintstone.com
  password_digest: &lt;%= default_password_digest %&gt;
  title: CEO
  company: flintstone
  admin: true</code></pre></figure>


<p>We can now run our tests and verify the fixtures properly insert the digest using the default password and the Capybara tests reference that same default password.</p>

<p>Now, if in the future we wanted use a different password for some reason, we’d only have one place to change it, and the rest of the system would follow along.</p>

<h2>Summary</h2>

<p>One of the things I’m constantly reminding myself during this process is whenever I have a problem, to step back and think about ways the Ruby language can help solve it rather than looking for some special sauce or gem to get me through the turmoil. Minitest is just Ruby — as most other gems are. Minitest generally provides enough utility to get us through the bigger use cases, but when it comes to special cases, it’s not there to hold our hand. That’s when we put our big boy pants on and make use of the language we’ve all come to know and love — Ruby!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Rails 4.1 Secrets for Configuration]]></title>
    <link href="http://brandonhilkert.com/blog/using-rails-4-dot-1-secrets-for-configuration/"/>
    <updated>2014-06-10T20:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/using-rails-4-dot-1-secrets-for-configuration</id>
    <content type="html"><![CDATA[<p>I previously wrote about how I handle <a href="http://brandonhilkert.com/blog/flexible-rails-environment-configuration/">environment configuration in Rails</a>. Along with solutions like the <a href="https://github.com/bkeepers/dotenv">dotenv gem</a>, it relies on entirely on environment variables.</p>

<p>One of the highlighted features of Rails 4.1 was the <a href="http://guides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml"><code>config/secrets.yml</code></a> file. By default, this file contains the <code>secret_key_base</code> and defers to the ENV variable of the same name in the production environment. Even though <code>secret_key_base</code> isn’t typically referenced explicitly in an application, I was curious if I could use the <code>config/secrets.yml</code> file in place of previously documented configuration solution.</p>

<!--more-->


<p>After a little digging, it turns out that it works perfectly. A valid question is whether the variables are better referenced through the <code>Rails.application</code> hash, but that’s probably more a preference and use-case dependent decision. Either way, we’ll explore the solution below.</p>

<h2>The Question</h2>

<p>Below is a default <code>config/secrets.yml</code> file generated from a Rails 4.1 app. As you can see, both the development and test environments rely on statically set values, where the production environment relies on environment variables being set on the system. The latter is perfect for platforms like <a href="https://www.heroku.com">Heroku</a>, and just as easy if you manage your own systems on EC2 or similar infrastructure.</p>

<figure class='code'><pre><code>development:
  secret_key_base: 9ac2d0ad8ebcc312090e99d745006d3cf8

test:
  secret_key_base: a1580ad61ccb6ac60f9f256948cf63d6e20

# Do not keep production secrets in the repository,
# instead read values from the environment.
production:
  secret_key_base: &lt;%= ENV["SECRET_KEY_BASE"] %&gt;</code></pre></figure>


<p>Notice how ERB is processed in the file. This gives us the opportunity to use Ruby to generate random strings, dates, or anything else that can be expressed through code.</p>

<p>So can we use it for other configuration values in the application?</p>

<h2>The Solution</h2>

<p>In order to figure out where the output of the parsed secrets file was stored, I pulled the latest Rails changes and went code diving.</p>

<p>The first thing I did was search “secrets”. The first group of results were mostly comments related to the processing of <code>secret_key_base</code> and where it could be found. After combing through a few more results, I came across the <code>Rails::Application</code> class.</p>

<p>A static array at the top of the file seemed to hold some values for the application as shown below:</p>

<figure class='code'><pre><code>INITIAL_VARIABLES = [:config, :railties, :routes_reloader, :reloaders,
                        :routes, :helpers, :app_env_config, :secrets] # :nodoc:
</code></pre></figure>


<p>Looks like we’re on the right track. Going further down the file leads us to the getter:</p>

<figure class='code'><pre><code>def secrets #:nodoc:
  @secrets ||= begin
    secrets = ActiveSupport::OrderedOptions.new
    yaml = config.paths["config/secrets"].first

    if File.exist?(yaml)
      require "erb"
      all_secrets = YAML.load(ERB.new(IO.read(yaml)).result) || {}
      env_secrets = all_secrets[Rails.env]
      secrets.merge!(env_secrets.symbolize_keys) if env_secrets
    end

    # Fallback to config.secret_key_base if secrets.secret_key_base isn't set
    secrets.secret_key_base ||= config.secret_key_base

    secrets
  end
end</code></pre></figure>


<p>As you can see, the file path <code>config/secrets</code> is referenced as the <code>yaml</code> source:</p>

<figure class='code'><pre><code>yaml = config.paths["config/secrets"].first</code></pre></figure>


<p>and the result of reading the file is sent through ERB and YAML:</p>

<figure class='code'><pre><code>all_secrets = YAML.load(ERB.new(IO.read(yaml)).result) || {}</code></pre></figure>


<p>The environment group is parsed:</p>

<figure class='code'><pre><code>env_secrets = all_secrets[Rails.env]</code></pre></figure>


<p>The result of the output is returned, leaving us with a hash of options based on the environment group. With a little luck we should be able to query the application from the console and get the configuration values.</p>

<figure class='code'><pre><code>irb(main):001:0&gt; Rails.application.secrets.class
=&gt; ActiveSupport::OrderedOptions
irb(main):002:0&gt; Rails.application.secrets
=&gt; {:secret_key_base=&gt;"9ac2d0ad8ebcc312090e99d745006d3cf8"}
irb(main):003:0&gt; Rails.application.secrets.secret_key_base
=&gt; "a1580ad61ccb6ac60f9f256948cf63d6e20"</code></pre></figure>


<p>That’s great news because it means we can put other values in this file and reference them throughout our application using the parent hash <code>Rails.application.secrets</code>.</p>

<p>For example, let’s assume we need to configuration Pusher URL again. We could add it to the <code>secrets.yml</code> file like so:</p>

<figure class='code'><pre><code>development:
  secret_key_base: 9ac2d0ad8ebcc312090e99d745006d3cf8
  pusher_url: http://asdfa@api.pusherapp.com

test:
  secret_key_base: a1580ad61ccb6ac60f9f256948cf63d6e20

# Do not keep production secrets in the repository,
# instead read values from the environment.
production:
  secret_key_base: &lt;%= ENV["SECRET_KEY_BASE"] %&gt;
  pusher_url: &lt;%= ENV["PUSHER_URL"] %&gt;</code></pre></figure>


<p>Now within our application we can set the Pusher URL within the initializer using the secret value:</p>

<figure class='code'><pre><code># config/initializers/pusher.rb
Pusher.url = Rails.application.secrets.pusher_url</code></pre></figure>


<h2>Summary</h2>

<p>I feel like my previous solution has the potential to be replaced with the secrets file. I plan to try it out in an upcoming application and see if it’s as easy to manage as it seems.</p>

<p>Note that by default, the <code>secrets.yml</code> file is NOT ignored by git. If you plan to include passwords or other sensitive data in the file, be sure to add it to your <code>.gitignore</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7 reasons why I'm sticking with Minitest and Fixtures in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/7-reasons-why-im-sticking-with-minitest-and-fixtures-in-rails/"/>
    <updated>2014-05-27T20:08:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/7-reasons-why-im-sticking-with-minitest-and-fixtures-in-rails</id>
    <content type="html"><![CDATA[<p>I’ve been fortunate to spend the last month as the sole developer of greenfield Rails 4.1 app. As someone who’s spent quite a bit of time maintaining existing code, the freedom to establish patterns and choose tools is a highly welcomed change. One of the choices I made was to use <a href="https://github.com/seattlerb/minitest">Minitest</a> and <a href="http://guides.rubyonrails.org/testing.html#the-low-down-on-fixtures">Rails fixtures</a>.</p>

<p>The short is…<strong>it’s been great</strong>! So great that I’m having trouble imagining myself using anything else going forward.</p>

<!--more-->


<h2>Background</h2>

<p>I got started with Rails in 2009. At the time, it felt like no one but the Rails-core team used <a href="http://test-unit.rubyforge.org/"><code>test_unit</code></a>. While I know this isn’t true, <a href="https://github.com/rspec/rspec">Rspec</a> felt like the overwhelmingly popular testing framework from my perspective. As someone who didn’t have experience with testing prior to learning Ruby/Rails, I was looking for as much educational material as possible to learn <strong>what to test</strong> and <strong>how to test</strong>.</p>

<p>At the time (…and even now), there weren’t many books focused on Ruby testing techniques and specifically what and how to test a Rails application. So when I came across <a href="http://pragprog.com/book/achbd/the-rspec-book"><em>The Rspec Book</em></a> I was excited there was finally some formal writing that would help me understand the best practices and concepts around testing with Ruby. Additionally, it seemed like the first steps of just about every Rails tutorial started with installing Rspec. Because I didn’t have an opinion about why or how, I went with the flow and forged ahead with Rspec at the center of my testing toolbox.</p>

<p>I admit, though, I never gave Test::Unit, or Minitest a fair shot. I immediately gravitated towards Rspec, for whatever reason, and didn’t consider doing otherwise until recently. Fortunately, it seems that more people are aware of Minitest and considering it a <a href="http://www.reddit.com/r/ruby/comments/23nxb2/starting_out_with__rspec_or_minitest_or/">worthy option when starting out</a>.</p>

<h2>My Previous Setup</h2>

<p>Here’s what a typical <code>Gemfile</code> looked like in one of my previous projects:</p>

<figure class='code'><pre><code>group :test do
  gem "rspec-rails"
  gem "factory_girl_rails"
  gem "capybara"
  gem "selenium-webdriver"
  gem "database_cleaner"
  gem "shoulda-matchers"
end</code></pre></figure>


<p>Aside from the additional gems, my <code>spec_helper.rb</code> had a number of settings like turning off transactions (in favor of <code>database_cleaner</code>) that went against the standard Rails testing conventions.</p>

<p>This setup can get so complicated, there’s even <a href="https://github.com/RailsApps/rails_apps_testing/">gems to manage the complication</a>. For a framework that has so many conventions, this never felt right to me.</p>

<p>Below are my observations (in no particular order) after having spent 1 month using Minitest and fixtures in a Rails 4.1 application:</p>

<h2>1. Fixtures force you to test against “real” data</h2>

<p>Fixture data isn’t real. It’s staged, however, you have control over what and how much you add. I’ve found that creating structures around common subjects like familiar TV shows or movies allows you to move faster inside the app as the characters involved already have a preconceived hierarchy in your head.</p>

<p>Below is a sample from my <code>users.yml</code> fixture:</p>

<pre><code>fred:
  first_name: Fred
  last_name: Flintstone
  email: fred@flintstone.com
  title: CEO
  password_digest: &lt;%= ActiveRecord::FixtureSet.default_password_digest %&gt;
  company: flintstone
  confirmed_at: &lt;%= Chronic.parse("1/1/2014") %&gt;
  invitation_token: &lt;%= SecureRandom.urlsafe_base64 %&gt;

wilma:
  first_name: Wilma
  last_name: Flintstone
  email: wilma@flintstone.com
  title: COO
  password_digest: &lt;%= ActiveRecord::FixtureSet.default_password_digest %&gt;
  company: flintstone
  supervisor: fred
  invitation_token: &lt;%= SecureRandom.urlsafe_base64 %&gt;
</code></pre>

<p>An interesting note is that while associations might have been painful in the past, notice how you can use <code>flintstone</code> as the company name and it will refer to the <code>company</code> fixture of the same name:</p>

<pre><code>flintstone:
  name: Flintstone Inc.
  phone: 888-555-1212
  updated_at: &lt;%= 6.months.ago %&gt;
  created_at: &lt;%= 6.months.ago %&gt;
</code></pre>

<p>At every point in the application, I have well-structured data to test against. Using Factory Girl is frustrating if you need to create any kind of complex data structure with associations and seed data. When ActiveRecord associations get complex, I’ve found it frustrating and time consuming to bootstrap the initial data — largely because it’s painful to do in the setup of each test. While there are ways around this using factories with pre-established associations, I believe it pushes you to reach for stubs sooner. I’ve seen this first hand where the stubbing was too closely tied to implementation and tests fails with a single change to query conditions — even though the query returns the same data. The recent <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">discussions about TDD</a> have generated more conversation about similar topics. Overall, I’ve felt more confident in my tests when using fewer mocks and stubs, and when using fixtures, I’ve felt that need less frequently. My data is predictable and I’m confident in my tests.</p>

<p>Lastly, when Factory Girl inserts data before each test, there’s a cost associated with communicating with the database. Multiply that cost by many thousands and you have a slower test suite. Fixtures are inserted before the test suite runs, so outside of any test-specific mutation, typically no additional inserts are necessary. While this many seem trivial at first, the benefits will multiply over time and you’ll be left with a more performant test suite — and higher likelihood to run the tests more frequently.</p>

<p><em>Note: I’m aware of methods like <code>build_model</code> and others that create AR objects without touching the database, but there are times when testing using data from the database is necessary (ie. scopes, mutation methods, etc.)</em></p>

<p>Not to mention, you use easily <a href="http://rtmatheson.com/2009/07/loading-a-single-fixture-in-rails/">load your fixture data in to your development environment</a>.</p>

<h2>2. Rspec provides more than one way to do something</h2>

<p>Rspec provides a number of ways to do the same thing. This leads to confusion around supposedly-simple topics like how to assert two things are equal. Do you I use <code>eq()</code> or <code>==</code>, or perhaps <code>eql()</code>? Who knows???</p>

<p>What about the fancy syntax around methods ending with &ldquo;?&rdquo;.</p>

<figure class='code'><pre><code>post.should be_active</code></pre></figure>


<p>Wait, so where’s the <code>be_active</code> method? Nope! Rspec parses the method due to the fact that <code>active?</code> is a legitimate method in the application under test. At first, I was enamored with the magic. However, later, I found thinking too much about how and what to write, when I should’ve just been typing out <code>active?</code> and asserting it’s <code>false</code> or <code>true</code> (which of course is an entirely other way to write it):</p>

<figure class='code'><pre><code>post.active?.should be_true</code></pre></figure>


<p>&hellip;or what about:</p>

<figure class='code'><pre><code>post.active?.should == true</code></pre></figure>


<p>Does that even work? I’ve learned to appreciate simplicity and knowing that there’s generally only one way to write an assertion:</p>

<figure class='code'><pre><code>assert post.active?</code></pre></figure>


<p>Aside from not floundering over the right assertion to make, I’ve found it leads to less syntax errors in my tests. Going through 2 or 3 iterations of test errors before the test actually gets to the application code is frustrating and a waste of time. Having fewer ways to do the same thing has led me to make fewer syntax errors when writing tests.</p>

<h2>3. Setting up Capybara is trivial</h2>

<p>If you’ve used Capybara in the past, you know that using it in conjunction with FactoryGirl is….<em>interesting</em>.</p>

<p><a href="http://devblog.avdi.org/2012/08/31/configuring-database_cleaner-with-rails-rspec-capybara-and-selenium/">Avdi’s post on configuring database_cleaner</a> has been my goto configuration:</p>

<figure class='code'><pre><code>RSpec.configure do |config|

  config.before(:suite) do
    DatabaseCleaner.clean_with(:truncation)
  end

  config.before(:each) do
    DatabaseCleaner.strategy = :transaction
  end

  config.before(:each, :js =&gt; true) do
    DatabaseCleaner.strategy = :truncation
  end

  config.before(:each) do
    DatabaseCleaner.start
  end

  config.after(:each) do
    DatabaseCleaner.clean
  end

end</code></pre></figure>


<p>This is after you first disable transactions in the <code>spec_helper.rb</code>, of course:</p>

<figure class='code'><pre><code>config.use_transactional_fixtures = false</code></pre></figure>


<p><em>Why is all this necessary?</em></p>

<p>When you use Factory Girl and you insert data in to the database during a test, it’s done so in a transaction. At the end of the test, the transaction is rolled back so the data doesn’t persist and the next test begins with a clean slate. All is well right? Not entirely…</p>

<p>When you use a javascript-enabled driver like selenium to run integration tests, browser actions run in a different thread. This removes the ability to see data setup within another thread/transaction. Because of this, you have to resort to a truncation strategy instead. Hence the following config option shown above:</p>

<figure class='code'><pre><code>config.before(:each, js: true) do
  DatabaseCleaner.strategy = :truncation
end</code></pre></figure>


<p>This is complex and not obvious for newcomers. Not to mention the complexity that arises if you actually use <a href="https://github.com/brandonhilkert/sucker_punch#cleaning-test-data-transactions">multi-threaded code or gems</a>.</p>

<p>If you choose to use fixtures instead, the data is inserted at the beginning of each test run (not in an isolated transaction), so it’s available to any subsequent thread — browser action or not.</p>

<p>Using fixtures instead of factories removes the need for <code>database_cleaner</code> entirely under normal circumstances. Additionally, the only change that’s necessary to setup <code>Capybara</code> is the following addition to <code>test_helper.rb</code>:</p>

<figure class='code'><pre><code>require "capybara/rails"

class ActionDispatch::IntegrationTest
  include Capybara::DSL
end</code></pre></figure>


<p>That’s it&hellip;seriously…the crazy part to me is this configuration is largely commonplace in Rails test suites that use Capybara and Rspec. We’ve been largely spoiled by Rails in that the framework provides a solution for just about every common problem we encounter. The fact that a complex setup with database cleaner and deciding on truncating vs. transactions ever seemed reasonable seems counter-intuitive to the Rails experience. I’m, frankly, surprised that it’s seemed reasonable for so long.</p>

<p>Is it possible that practices/tools like Factory Girl are hurting the community more than they’re helping?</p>

<h2>4. Lack of complex stubbing/mocking constructs simplifies code</h2>

<p>Rspec makes it easy to drop in a stub or mock wherever/whenever (see #1 above). While there is some value in this, it makes it easy to abuse.</p>

<p>In fact, I’ve found that using fixtures has caused me to less frequently reach for stubs at all. When a customer comes to the application and has a good experience, the last thing they’re going to care about is whether boundary data was stubbed out. The fact that my tests are running against data the application will see on a daily basis gives me the confidence that all will be well when new code is sent to production.</p>

<p>Minitest does have a <a href="https://github.com/seattlerb/minitest/blob/master/lib/minitest/mock.rb">mocking library</a> that’s easy to use and read. It’s not as extensive as what you get from Rspec out of the box, but nothing is stopping you from including the <a href="http://gofreerange.com/mocha/docs/"><code>mocha</code> gem</a> or some other equivalent, if you need additional functionality (I haven’t had the need).</p>

<h2>5. Snippets can help the uncertainty about Minitest assertion order</h2>

<p>When I first approached Minitest, one of the long-standing questions in my head was the order in which the expected and actual value appear. At this point, I think it’s familiar enough to know without assistance, but why type more if you don’t have to.</p>

<p>I rely heavily on these <a href="https://github.com/honza/vim-snippets/blob/master/snippets/ruby.snippets">Ruby snippets for vim</a>, which takes away the pain of knowing the order of arguments.</p>

<p><img class="center" src="http://brandonhilkert.com/images/syntax.gif" title="&#34;Minitest snippet completion&#34;" alt="&#34;Minitest snippet completion&#34;"></p>

<h2>6. Minitest is just Ruby</h2>

<p>To be fair, Rspec is just Ruby too. But generally Rspec seems to have magic ways to do just about everything &ndash; shared examples, test setup, configuration. All these things have an “Rspec way”.</p>

<p>Minitest deals with this by just using Ruby. If you need shared examples, why not <a href="http://ntl.ghost.io/how-i-use-test-unit-syntax/">include a module that includes the shared tests</a>?</p>

<p>I noticed during the first few days of my Minitest experience, I was looking for the “right” way to do something. With some urging from people I respect in the community, I realized it was just Ruby. That mindset allowed me to do just about anything I wanted using the language itself, rather than some magic from the Rspec DSL.</p>

<p>In some ways, I think too much magic gives us tunnel vision. After a few niceties are used (and abused), we start to believe that whatever tool we’re using will solve ALL our problems. Using Minitest has allowed me break out of this mindset and rely on the Ruby skills that I’ve developed to solve my testing challenges.</p>

<h2>7. Deviating from Rails defaults doesn’t always provide value</h2>

<p>Sure, not everything in Rails is ideal. In fact, it’s admirable to think about how many people actually get value from something so opinionated. After relying on the Rails default stack for the last month, I’ve realized how much simplicity I’ve been missing due to my choice of tools. I assumed that because the community was largely using Rspec and Factory Girl (what it seemed like from my perspective), it was a good idea. And while arguments can be made for either side, I wasn’t using Rspec because I was convinced it was better — I just didn’t know any better.</p>

<p>The ease at which I was able to get going with the Rails default stack using Minitest and fixtures has made me a convert. There was minimal setup and largely required very little additional configuration.</p>

<p>I have yet to feel the pains from using fixtures that some talk about. But I’ve been careful not to introduce large scale changes in the data without thinking through them before-hand.</p>

<p>Perhaps the app isn’t big enough yet? Maybe my data isn’t complicated enough? Or maybe I’m paying close enough attention to the effects that changes in data will have?</p>

<p>Whatever it is, it’s working for me right now. Part me feels like I’m going to have a moment where I say, “<em>OHHHHH! This is why everyone uses Rspec and Factory Girl.</em>” Although, it’s hard for me to imagine at this point. The default stack is working for me and staying out of the way, which is what I prefer.</p>

<h2>Summary</h2>

<p>I intentionally chose to leave out comments about performance of one framework vs the other. However, <a href="https://speakerdeck.com/ahawkins/bow-before-minitest">this deck provide great benchmarks</a> on the topic.</p>

<p>I’m excited to add Minitest and fixtures to my toolkit. With the benefits I’ve seen so far, it’s hard for me to imagine using anything else going forward — assuming I have the choice.</p>

<p>If you have beef over the default Minitest assertion syntax, you’ll be happy to know that Minitest comes with the option to use a <a href="http://bfts.rubyforge.org/minitest/MiniTest/Expectations.html">spec-style syntax</a>. While it’s not identical to the Rspec syntax, it gets you closer to the natural language syntax, if that’s important to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Rails 4.1 travel_to test helper]]></title>
    <link href="http://brandonhilkert.com/blog/rails-4-1-travel-to-test-helper/"/>
    <updated>2014-05-11T14:08:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/rails-4-1-travel-to-test-helper</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently had the good fortune of working on a greenfield Rails app. The app is heavily dependent on times and recurring events (weekly). Naturally, I dragged in the <a href="https://github.com/travisjeffery/timecop">timecop gem</a> to handle freezing time, so my I could properly assert that certain events took place in the tests.</p>

<p>With the release of Rails 4.1, the time stubbing method <code>travel_to</code> was added. This new helper method forces the current time to whatever you specify, allowing you to make asserts against a historical time, or week in my case.</p>

<!--more-->


<h2>The Test</h2>

<p><a href="https://github.com/travisjeffery/timecop">Timecop</a> performed valiantly and did more than I ever needed (I generally only used the <code>freeze</code> method). However, dragging in another gem was the last thing I wanted to do for something relatively simple.</p>

<p>Prior to utilizing the changes in Rails 4.1, one of my tests looked like:</p>

<figure class='code'><pre><code>test "sends reminders on tuesday for those scheduled on wednesday" do
  Timecop.freeze Chronic.parse("4/15/14") do
    Reminders::Checkin.new.email
    assert_equal 3, ActionMailer::Base.deliveries.size
  end
end</code></pre></figure>


<p><em>Note: <a href="https://github.com/mojombo/chronic">Chronic</a> is a gem that helps create dates/times by using standard language.</em></p>

<h2>Rails 4.1</h2>

<p>I think I first heard about some additional testing methods from my friend <a href="http://iamericsteele.com/">Eric Steele</a>. He mentioned them in one of our various conversations about testing (he’s writing a book titled <em><a href="https://whatdoitest.com/?utm_source=brandonhilkert-com&amp;utm_medium=web&amp;%20utm_campaign=travel-to">What Do I Test?</a></em>).</p>

<p>Like many, I looked over the <a href="http://guides.rubyonrails.org/4_1_release_notes.html">release notes for Rails 4.1</a> and features like <a href="http://guides.rubyonrails.org/4_1_release_notes.html#spring-application-preloader">Spring</a>, <a href="http://guides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml">secrets</a>, <a href="http://guides.rubyonrails.org/4_1_release_notes.html#action-mailer-previews">ActionMailer previews</a>, and <a href="http://guides.rubyonrails.org/4_1_release_notes.html#active-record-enums">ActiveRecord enums</a> jumped out at me.</p>

<p>Towards the bottom, though, was a feature barely mentioned or written about:</p>

<p><img class="center" src="http://brandonhilkert.com/images/rails-41-travel-to.png" title="&#34;Test helper addition in Rails 4.1&#34;" alt="&#34;Test helper addition in Rails 4.1&#34;"></p>

<p><a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/testing/time_helpers.rb">The <code>TimeHelpers</code> test module</a> adds the <code>travel_to</code> and <code>travel_back</code> methods to assist in stubbing <code>Time.now</code> and <code>Date.today</code>.</p>

<h2>Updated Tests</h2>

<p>Using the <code>travel_to</code> method with the example above results in the following:</p>

<figure class='code'><pre><code>test "sends reminders on tuesday for those scheduled on wednesday" do
  travel_to Chronic.parse("4/15/14") do
    Reminders::Checkin.new.email
    assert_equal 3, ActionMailer::Base.deliveries.size
  end
end</code></pre></figure>


<p>Because I&rsquo;m using the <code>travel_to</code> method with a block, there&rsquo;s no need to use the <code>travel_back</code> method to reset time back to the current time. Supply a block <a href="https://github.com/rafaelfranca/rails/blob/fa1f20e6549f962112948f5b3c27d09ab5e5faaf/activesupport/lib/active_support/testing/time_helpers.rb#L86">automatically calls <code>travel_back</code></a>.</p>

<p>While the change doesn&rsquo;t look significant, it removed my need for the <code>Timecop</code> gem entirely.</p>

<p>Additionally, the same test could be written as:</p>

<figure class='code'><pre><code>test "sends reminders on tuesday for those scheduled on wednesday" do
  travel_to Chronic.parse("4/15/14")
  Reminders::Checkin.new.email
  assert_equal 3, ActionMailer::Base.deliveries.size
  travel_back
end</code></pre></figure>


<p>or with <code>setup</code> and <code>teardown</code>:</p>

<figure class='code'><pre><code>def setup
  travel_to Chronic.parse("4/15/14")
end

test "sends reminders on tuesday for those scheduled on wednesday" do
  Reminders::Checkin.new.email
  assert_equal 3, ActionMailer::Base.deliveries.size
end

def teardown
  travel_back
end</code></pre></figure>


<h2>Summary</h2>

<p>Rails is well-known for conventions. <code>travel_to</code> is a great addition to the framework that would&rsquo;ve otherwise required dragging in additional dependencies.</p>

<p>Next time you look at the release notes for a project, don&rsquo;t skip over the less featured functionality. For all you know, it could be something that saves you time and frustration that commonly occurs in your projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Reloader: A Lesser Known Railtie Hook]]></title>
    <link href="http://brandonhilkert.com/blog/rails-reloader-a-lesser-known-railtie-hook/"/>
    <updated>2014-04-21T19:48:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/rails-reloader-a-lesser-known-railtie-hook</id>
    <content type="html"><![CDATA[<p>I recently wrote <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-come&amp;utm_medium=web&amp;utm_campaign=reloader">a book about integrating with Rails from a Ruby gem</a>, which specifically touched on using a <a href="http://api.rubyonrails.org/classes/Rails/Railtie.html">Railtie</a> to extend <code>ActiveRecord</code>, <code>ActionController</code> and <code>ActionView</code> . While these are the 3 more popular Rails libraries, there’s plenty others <a href="http://guides.rubyonrails.org/configuring.html">that are configurable</a>.</p>

<p>A <a href="https://github.com/brandonhilkert/sucker_punch/issues/49">recent issue</a> in <a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> caused me to go digging through the Rails source code. Ultimately, the <code>to_prepare</code> method on <code>ActionDispatch::Reloader</code> resolved the issue, but I surprised was to find very little documentation about it.</p>

<!--more-->


<h2>The Problem</h2>

<p><a href="https://github.com/brandonhilkert/sucker_punch">Sucker Punch</a> lazily creates the <a href="http://celluloid.io/">Celluloid</a> pools used for background job queues. For the purpose of keeping track of the queues already initialized, Sucker Punch makes use of the <a href="https://github.com/celluloid/celluloid/wiki/Registry">Celluloid Registry</a>. Think of it as a class-level hash.</p>

<p>This works swimmingly in production, but not so much in development. Rails makes our lives easier by reloading code in between requests while in development, due to this setting in <code>config/environments/development.rb</code>:</p>

<figure class='code'><pre><code>  config.cache_classes = false</code></pre></figure>


<p>Without it, we’d be forced to restart the server after almost every request. If that sounds like a giant PITA to you, I whole heartedly agree!</p>

<p>So now you make your awesome job class, do some background work (send an email for example) and reload the page and boom:</p>

<figure class='code'><pre><code>Celluloid::PoolManager: async call `perform` aborted!
ArgumentError: A copy of SendInvitationJob has been removed from the module tree but is still active!
        gems/activesupport-4.0.3/lib/active_support/dependencies.rb:446:in `load_missing_constant'
        gems/activesupport-4.0.3/lib/active_support/dependencies.rb:184:in `const_missing'
        my-app/app/jobs/send_invitation_job.rb:6:in `block in perform'</code></pre></figure>


<p>The Celluloid registry still has reference to a the original <code>SendInvitationJob</code> class when it was initialized, however, reloading the code has caused the original reference to disappear and all hell breaks loose when the queue key is fetched to send another job to the class.</p>

<p>In my head, it made sense for the queues to be cleared out upon every request in development. In general, because Sucker Punch doesn’t have persistent queues, the best use case is for quick one-off jobs that aren’t extremely important — email and logging come to mind. Since both of these examples are typically pretty speedy, it’s unlikely there will be a huge job backup upon subsequent requests.</p>

<p>I knew what I wanted, but didn’t know how to accomplish it.</p>

<h2>The Solution</h2>

<p>Knowing the issue was related to the setting <code>config.cache_classes = false</code> in the development environment, I broke open the Rails source code and searched for <code>cache_classes</code>. The first result was the <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/reloader.rb"><code>ActionDispatch</code> reloader middleware</a>. Fortunately, there’s a very descriptive comment at the top of the class:</p>

<figure class='code'><pre><code>  # By default, ActionDispatch::Reloader is included in the middleware stack
  # only in the development environment; specifically, when +config.cache_classes+
  # is false. Callbacks may be registered even when it is not included in the
  # middleware stack, but are executed only when &lt;tt&gt;ActionDispatch::Reloader.prepare!&lt;/tt&gt;
  # or &lt;tt&gt;ActionDispatch::Reloader.cleanup!&lt;/tt&gt; are called manually.</code></pre></figure>


<p>This functionality is exactly what I needed!. From here, I just needed to know what callbacks were valid. A few lines in to the class are the following methods:</p>

<figure class='code'><pre><code># Add a prepare callback. Prepare callbacks are run before each request, prior
# to ActionDispatch::Callback's before callbacks.
def self.to_prepare(*args, &block)
  unless block_given?
    warn "to_prepare without a block is deprecated. Please use a block"
  end
  set_callback(:prepare, *args, &block)
end

# Add a cleanup callback. Cleanup callbacks are run after each request is
# complete (after #close is called on the response body).
def self.to_cleanup(*args, &block)
  unless block_given?
    warn "to_cleanup without a block is deprecated. Please use a block"
  end
  set_callback(:cleanup, *args, &block)
end</code></pre></figure>


<p><code>to_prepare</code> and <code>to_cleanup</code>…and like the comments say, they do exactly what you’d expect. Given that I wanted to clear our the Celluloid registry BEFORE each request, <code>on_prepare</code> is the golden ticket. Now I just needed to figure out how to clear the registry.</p>

<p>A quick glade over the <a href="http://rubydoc.info/gems/celluloid/Celluloid/Registry"><code>Celluloid::Registry</code> class documentation</a> shows some methods that might be of value. It turns out that these are instance methods for an instance of the <code>Celluloid::Registry</code> class. Unfortunately, when Celluloid boots, it instantiates a registry to use internally, so we need a way to get at that particular instance and clear it out. Sure enough, <a href="http://rubydoc.info/gems/celluloid/Celluloid/Actor#clear_registry-class_method">a class method to do just that in <code>Celluloid::Actor</code></a> is available.</p>

<p>Now that we all the pieces of the puzzle, it was time to put together a Railtie to trigger the behavior. Prior to needing this functionality, the Railtie in Sucker Punch was pretty simple:</p>

<figure class='code'><pre><code>module SuckerPunch
  class Railtie &lt; ::Rails::Railtie
    initializer "sucker_punch.logger" do
      SuckerPunch.logger = Rails.logger
    end
  end
end</code></pre></figure>


<p>All it did was connect the logger to the existing Rails logger. Adding the callback to <code>ActionDispatch</code> looks like:</p>

<figure class='code'><pre><code>module SuckerPunch
  class Railtie &lt; ::Rails::Railtie
    initializer "sucker_punch.logger" do
      SuckerPunch.logger = Rails.logger
    end

    config.to_prepare do
      Celluloid::Actor.clear_registry
    end
  end
end</code></pre></figure>


<p>Now when the Railtie is loaded, the <code>Celluloid::Actor.clear_registry</code> method is triggered before the reloading of code in the development environment, clearing out the Celluloid registry and allowing Sucker Punch to instantiate new job queues for each request.</p>

<h2>Summary</h2>

<p>I was unaware of any of these methods when the issue was submitted. Rather than throw my hands up and close the issue because it didn’t affect me, I thought through an approach that could work, and only then started to write code. And in fact, didn’t know what code to write!</p>

<p>Comments and well written code serve as great documentation. I probably wouldn’t have stumbled on <code>ActionDispatch::Reloader</code> without the detailed comments at the top of the class. Sure, I would’ve found the <code>cache_classes</code> line, but might not have given it more thought.</p>

<p>Next time you have a question about the syntax of a method or the order of its arguments, clone the repo (if it’s open source, of course) and do a search. I think you’ll be surprised at how quickly you can find what you’re looking for. My guess is you’ll also be pleasantly surprised at the other things you stumble upon in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem eBook is Live!]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-is-live/"/>
    <updated>2014-03-26T23:49:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-is-live</id>
    <content type="html"><![CDATA[<p>After several weeks of <strong>really</strong> early mornings, <a href="http://brandonhilkert.com/books/build-a-ruby-gem?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch"><em>Build a Ruby Gem</em></a> is finally live:</p>

<p><a href="http://brandonhilkert.com/books/build-a-ruby-gem?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch">http://brandonhilkert.com/books/build-a-ruby-gem/</a></p>

<p>Thanks again for all the support and encouragement. I had a great time working
on it and really look forward to hearing your feedback.</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a Rails Engine]]></title>
    <link href="http://brandonhilkert.com/blog/how-to-build-a-rails-engine/"/>
    <updated>2014-03-24T17:26:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/how-to-build-a-rails-engine</id>
    <content type="html"><![CDATA[<p><em>This is one of the final post leading up the the launch of the
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch"><strong>Build a Ruby Gem Ebook</strong></a>,
which is now available for sale in <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch">3 packages</a>,
including <strong>14 chapters of code</strong> and over 2 hours of screencasts</em>.</p>

<p>Rails engines range from simple plugins to powerful micro-applications. The discussions we’ve had so far about Railties are closely related to the function of a Rails engine. One interesting side note is that a Rails application is a Rails engine itself — so it’s easy to see how we can encapsulate just about any normal Rails functionality in an engine, to ultimately embed in a host application.</p>

<p>The <a href="http://guides.rubyonrails.org/engines.html?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">Rails engine documentation</a> is well written and touches on the many ways to include functionality. I won’t cover every detail of Rails engines in this chapter, just enough to get you started making use of them. It’s possible to make full applications (routes, controllers, models, migrations, etc.) using Rails engines. However, we’re going to focus on some of the simpler the elements of a Rails engine that allow us to integrate functionality where a Railtie won’t suffice. Just know, there is far more you can do with Rails engines than what we’ll cover here. The documentation link above provides examples of many of those use cases.</p>

<!--more-->


<h2>Use Case</h2>

<p>I wrote a <a href="http://brandonhilkert.com/blog/relative-timestamps-in-rails/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">blog post about rendering relatives timestamps in Rails</a> on the client. Using a client-side solution like <a href="http://timeago.yarp.com/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">timeago.js</a> allows timestamps to update in real-time, so when we see “15 minutes ago”, we know the record <em>really</em> is 15 minutes old.</p>

<p>The other benefit to using a client-side library like <code>timeago.js</code> is timezone offsets are handled automatically. All we have to do is render the UTC time in the view and javascript will handle converting it to the relative timezone of the browser, along with keeping it updated as the page becomes stale.</p>

<p>For this example, we’ll make a gem that integrates <code>timeago.js</code> in to a Rails application and provides a simple way to render relative timestamps in a view.</p>

<h2>The Implementation</h2>

<p>The implementation of our gem will require:</p>

<ol>
<li>Adding the <code>timeago.js</code> javascript asset to the asset pipeline</li>
<li>Adding a javascript asset to invoke the <code>timeago()</code> plugin</li>
<li>Adding a view helper to render html in a format the javascript plugin expects</li>
</ol>


<p>The third requirement was covered in a previous chapter on view helpers, so we’ll cruise through that one quickly. However, including assets hasn’t been covered and it’s the perfect segue in to the benefits of using a Rails engine, rather than just a Railtie.</p>

<p>Rails engines allow us create the same directory structure of a Rails application, since a Rails application is just a Rails engine. By indicating our gem is an engine (we’ll see how to do this soon…), Rails will pick up the related files in the Rails-specific directories in our gem. So if we add a file in the <code>app/helpers/</code> directory of our gem, that same file will be available in the host Rails application. The same approach applies for controllers, models, migrations, assets and anything else we would add to a typical Rails application.</p>

<p>To start, let’s create our new gem:</p>

<figure class='code'><pre><code>$ bundle gem time_ago
      create  time_ago/Gemfile
      create  time_ago/Rakefile
      create  time_ago/LICENSE.txt
      create  time_ago/README.md
      create  time_ago/.gitignore
      create  time_ago/time_ago.gemspec
      create  time_ago/lib/time_ago.rb
      create  time_ago/lib/time_ago/version.rb
Initializing git repo in /Users/bhilkert/Dropbox/code/time_ago</code></pre></figure>


<p>When we include javascript libraries from external sources, the <code>vender/</code> directory is the most appropriate place for them. Let’s create the directory <code>vendor/javascripts/</code> and place the source for the <code>timeago.js</code> plugin there:</p>

<figure class='code'><pre><code>├── Gemfile
├── LICENSE.txt
├── Rakefile
├── lib
│   ├── time_ago
│   │   └── version.rb
│   └── time_ago.rb
├── time_ago.gemspec
└── vendor
    └── assets
        └── jquery.timeago.js</code></pre></figure>


<p>To create our view helper, we’ll add the <code>/app/helpers/</code> directory:</p>

<figure class='code'><pre><code>├── Gemfile
├── LICENSE.txt
├── Rakefile
├── app
│   └── helpers
│       └── time_ago_helper.rb
├── lib
│   ├── time_ago
│   │   └── version.rb
│   └── time_ago.rb
├── time_ago.gemspec
└── vendor
    └── assets
        └── jquery.timeago.js</code></pre></figure>


<p>The code for the view helper is shown below:</p>

<figure class='code'><pre><code>module TimeAgoHelper
  def timeago(time, options = {})
    options[:class] ||= "timeago"
    content_tag(
     :time,
     time.to_s,
     options.merge(datetime: time.getutc.iso8601)
    ) if time
  end
end</code></pre></figure>


<p>Lastly, we want to include a javascript asset to invoke the <code>timeago.js</code> plugin on page change (this includes the initial page load). This is almost identical to the first step of including the vendored <code>timeago.js</code> asset, except we’re going to put it in the <code>app/assets/javascripts/</code> directory since it’s not an external library, but rather a javascript include that will invoke the javascript plugin.</p>

<p>Let’s create the directory <code>app/assets/javascripts/</code> and place the following file there:</p>

<figure class='code'><pre><code>// app/assets/javascripts/timeago.js
//
// jQuery Timeago setup for timeago helper
//
//= require jquery.timeago

$(document).on('page:change', function() {
  $("time.timeago").timeago();
});</code></pre></figure>


<p>This file serves as both a manifest file for the <code>jquery.timeago.js</code> asset and a function to invoke the plugin whenever the page loads or changes.</p>

<p>Lastly, we need to designate our gem as an engine. The default entry file that was created when we used bundler to bootstrap our gem looked like this:</p>

<figure class='code'><pre><code>require "time_ago/version"

module TimeAgo
end</code></pre></figure>


<p>All we need to do is add the <code>Engine</code> class and inherit from <code>Rails::Engine</code>, giving us:</p>

<figure class='code'><pre><code>require "time_ago/version"

module TimeAgo
  class Engine &lt; ::Rails::Engine
  end
end</code></pre></figure>


<p>At this point, because our gem is so closely tied to Rails, we should add Rails as a dependency in our gemspec:</p>

<figure class='code'><pre><code># coding: utf-8
lib = File.expand_path('../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require 'time_ago/version'

Gem::Specification.new do |spec|
  spec.name          = "time_ago"
  spec.version       = TimeAgo::VERSION
  spec.authors       = ["Brandon Hilkert"]
  spec.email         = ["brandonhilkert@gmail.com"]
  spec.summary       = %q{A gem to integrate the timeago.js}
  spec.description   = %q{A gem to integrate the timeago.js}
  spec.homepage      = ""
  spec.license       = "MIT"

  spec.files         = `git ls-files -z`.split("\x0")
  spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }
  spec.test_files    = spec.files.grep(%r{^(test|spec|features)/})
  spec.require_paths = ["lib"]

  spec.add_dependency "rails", "&gt;= 3.1"

  spec.add_development_dependency "bundler", "~&gt; 1.5"
  spec.add_development_dependency "rake"
end</code></pre></figure>


<p><em>Note: In addition to adding Rails as a dependency, we’ve also specified that it’s only compatible with Rails version <code>3.1</code> or later because of the need for the asset pipeline.</em></p>

<p>Moving to a sample Rails application, we can include the gem in our host application by adding it to the <code>Gemfile</code> using the path option:</p>

<figure class='code'><pre><code>gem "time_ago", path: "../time_ago"</code></pre></figure>


<p>Since we included an asset that needs to be included in the Rails asset pipeline, we have to take one more step and instruct the user to add the following to their <code>app/assets/javascripts/application.js</code> manifest file:</p>

<figure class='code'><pre><code>//= require timeago</code></pre></figure>


<p>This directive actually refers to the <code>app/assets/javascripts/timeago.js</code> file we included in our gem to invoke the timeago.js plugin on page change.</p>

<p>Now when we load our Rails application, tags using the <code>timeago</code> view helper get rendered to UI as:</p>

<figure class='code'><pre><code>&lt;time class="timeago" datetime="2014-01-08T14:55:58Z"&gt;
    2014-01-08 14:55:58 UTC
&lt;/time&gt;</code></pre></figure>


<p>and are updated by the javascript plugin to:</p>

<figure class='code'><pre><code>&lt;time class="timeago" datetime="2014-01-08T15:04:10Z"
   title="2014-01-08 15:04:10 UTC"&gt;
     18 days ago
&lt;/time&gt;</code></pre></figure>


<h2>Implementations in the Wild</h2>

<p>One of the greatest examples of making the most of a Rails engine is <a href="https://github.com/plataformatec/devise?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">Devise</a>. Devise is one of the more popular options for adding authentication to a Rails application. Just looking at the <a href="https://github.com/plataformatec/devise/tree/master/app?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">app directory of the gem</a>, we can see Devise adds functionality through controllers, helpers, mailers and views. The structure of Devise is fairly complicated because it is doing so much, but <a href="https://github.com/plataformatec/devise/blob/master/lib/devise/rails.rb?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines#L5">here is where the Rails engine is defined</a> allowing the elements in the <code>/app</code> directory (among other things) to be integrated in to a Rails application.</p>

<p>The <a href="https://github.com/basecamp/local_time?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">local_time gem</a> from Basecamp is a simple example of using the asset includes of a Rails engine to render relative timestamps. It’s similar to the one we created above, but uses the <a href="http://momentjs.com/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">moment.js</a> javascript library instead. Because it’s well tested and likely to be supported long-term, I’d suggest using it instead of the gem we created above.</p>

<h2>Summary</h2>

<p>The introduction of Rails engines created a new way to organize micro-applications and integrate them into a host application. Doing so keeps features and otherwise separate logic truly separate.</p>

<p>I’ve only scratched the surface on what a gem can provide through engines. It’s certainly more detailed than just asset and view helper integration, as shown above. If you’re interested in learning more about the other features Rails engine provide, <a href="http://guides.rubyonrails.org/engines.html?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=rails-engines">the Rails guides</a> are a great place to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Ebook Available on Thursday]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-ebook-available-on-thursday/"/>
    <updated>2014-03-24T06:03:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-ebook-available-on-thursday</id>
    <content type="html"><![CDATA[<p><em>This is one of the final post leading up the the launch of the
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch"><strong>Build a Ruby Gem Ebook</strong></a>,
which is now available for sale in <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch">3 packages</a>,
including <strong>14 chapters of code</strong> and over 2 hours of screencasts</em>.</p>

<p>I spent the last couple of weeks with my head down focusing on producing the best content possible for the upcoming release of my <em><a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=email&amp;utm_campaign=packages">Build a Ruby Gem</a></em> ebook. I’m excited to finally show you what I’ve been working on.</p>

<p>The book will be available starting at <strong>Midnight (EDT) on Thursday, March 27th</strong> and can be purchased from <strong><a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=email&amp;utm_campaign=packages">my website</a></strong>.</p>

<!--more-->


<p>3 packages will be available:</p>

<ol>
<li><p><strong>Ebook</strong> only — $39</p>

<p> The book is 19 chapters, totaling 136 pages. The book content ranges from how to get started with open source projects to the nitty gritty of <a href="http://brandonhilkert.com/blog/ruby-gem-configuration-patterns/?utm_source=bh-com&amp;utm_medium=email&amp;utm_campaign=packages">configuration patterns in a Ruby gem</a>. The <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=email&amp;utm_campaign=packages">chapter list</a> offers a detailed list of the topics included.</p></li>
<li><p><strong>Ebook</strong> + <strong>Code</strong> (14 chapters of code)  — $79</p>

<p> In addition to the ebook above, I have packaged the <strong>code from all 14 technical chapters</strong> — several of which include Rails applications with the sample gem code mounted. This is the perfect package if you want down to the code level and really get your hands dirty.</p></li>
<li><p><strong>Ebook</strong> + <strong>Code</strong> (14 chapters of code) + <strong>Screencasts</strong> (2 hrs. of video) — $129</p>

<p> In addition to the ebook and code above, I have created <strong>14 screencasts totaling over 2 hours of detailed workflow</strong>. I go through the process of writing the code for each technical chapter and discuss the benefits and downsides to the various approaches.</p></li>
</ol>


<p>I can’t tell you how excited I am to finally share this content with you. It’s been a little over 3 months since I announced that I was writing a book on building Ruby gems. To see so much interest has been really gratifying. I really can’t wait to see what you build as a result.</p>

<p>As promised, I will be sending out a <strong>discount code on Tuesday night</strong> for those on the book mailing list, good for <strong>20% off the listed price of any package</strong>. The discount will only be <strong>available for the first 24 hours</strong>. After that, the packages will return to the prices listed above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Gem Configuration Patterns]]></title>
    <link href="http://brandonhilkert.com/blog/ruby-gem-configuration-patterns/"/>
    <updated>2014-03-17T20:26:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/ruby-gem-configuration-patterns</id>
    <content type="html"><![CDATA[<p><em>This is one of the final post leading up the the launch of the
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch"><strong>Build a Ruby Gem Ebook</strong></a>,
which is now available for sale in <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch">3 packages</a>,
including <strong>14 chapters of code</strong> and over 2 hours of screencasts</em>.</p>

<p>The world isn’t black and white (as much as we’d like to believe it is). Just because our gem’s functionality may work for us, doesn’t mean it’ll work for everyone.</p>

<p>Fortunately, we can give users the ability to add custom configuration data, allowing them to adapt our code to their own use. In this post, we&rsquo;ll adapt the <a href="https://github.com/brandonhilkert/mega_lotto"><code>mega_lotto</code> gem</a> to take a configuration block that modifies the number of integers returned from the <code>#draw</code> method output.</p>

<!--more-->


<h2>Use Case</h2>

<p>Our <code>mega_lotto</code> gem provides the functionality to randomly draw 6 numbers. However, let’s assume that someone else has taken interest in the code for our gem, but needs the code to generate 10 random numbers within the same range.</p>

<p>One option would be for them to fork the code and modify the gem to fit their needs. However, now there’s a randomly forked gem with the same name and it’s unclear why one should be used over the other, especially if no changes to the <code>README</code> were made.</p>

<p>Rather than go down that path, we can make our existing <code>mega_lotto</code> gem more flexible by returning 6 integers by default, while also providing an interface to customize this value for those with the need.</p>

<p>Our goal is to adapt our gem to take a configuration block like this:</p>

<figure class='code'><pre><code>MegaLotto.configure do |config|
  config.drawing_count = 10
end</code></pre></figure>


<h2>Implementation</h2>

<p>Let’s first write some specs for the desired functionality. Because the <code>.configure</code> method above is off the main <code>MegaLotto</code> namespace, we’ll create the spec file <code>spec/mega_lotto_spec.rb</code>. With this spec, we’ll assert that after running the configuration block above, the <code>#drawing</code> method returns an array (like before), but this time with 10 integers instead:</p>

<figure class='code'><pre><code>require "spec_helper"

describe MegaLotto do
  describe "#configure" do
    before do
      MegaLotto.configure do |config|
        config.drawing_count = 10
      end
    end

    it "returns an array with 10 elements" do
      draw = MegaLotto::Drawing.new.draw

      expect(draw).to be_a(Array)
      expect(draw.size).to eq(10)
    end
  end
end</code></pre></figure>


<p>This spec serves as higher level integration spec because it’s accessing the public API of our gem. Because of this, we can be sure that once this spec passes, our implementation is complete. As expected, when we run this spec, it fails:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements (FAILED - 1)

Failures:

  1) MegaLotto#config returns an array with 10 elements
     Failure/Error: MegaLotto.configure do |config|
     NoMethodError:
       undefined method `configure` for MegaLotto:Module
     # ./spec/mega_lotto_spec.rb:6

Finished in 0.00131 seconds
1 example, 1 failure</code></pre></figure>


<p>Now that we have a spec to work against, let’s continue our implementation.</p>

<p>The failure above complained that there was no <code>MegaLotto.configure</code> method, so let’s add it:</p>

<figure class='code'><pre><code>module MegaLotto
  def self.configure
  end
end</code></pre></figure>


<p>Re-running our specs gives us a different failure message this time:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements (FAILED - 1)

Failures:

  1) MegaLotto#configure returns an array with 10 elements
     Failure/Error: expect(draw.size).to eq(10)

       expected: 10
            got: 6

       (compared using ==)
     # ./spec/mega_lotto_spec.rb:15

Finished in 0.00246 seconds
1 example, 1 failure</code></pre></figure>


<p>The output now shows that the code still returned 6 integers, which we expected because our <code>.configure</code> method hasn’t done anything yet.</p>

<p>Because we’re using a object-oriented language like Ruby, we can create a <code>Configuration</code> class whose responsibility will be…(drumroll)….configuration!</p>

<p>Let’s start with some specs:</p>

<figure class='code'><pre><code># spec/mega_lotto/configuration_spec.rb

require "spec_helper"

module MegaLotto
  describe Configuration do
    describe "#drawing_count" do
      it "default value is 6" do
        Configuration.new.drawing_count = 6
      end
    end

    describe "#drawing_count=" do
      it "can set value" do
        config = Configuration.new
        config.drawing_count = 7
        expect(config.drawing_count).to eq(7)
      end
    end
  end
end</code></pre></figure>


<p>Running the configuration specs produces:</p>

<figure class='code'><pre><code>/Users/bhilkert/Dropbox/code/mega_lotto/spec/
mega_lotto/configuration_spec.rb:4:in `&lt;module:MegaLotto&gt;`:
uninitialized constant MegaLotto::Configuration (NameError)</code></pre></figure>


<p>Let’s add the <code>Configuration</code> class:</p>

<figure class='code'><pre><code># lib/mega_lotto/configuration.rb

module MegaLotto
  class Configuration
  end
end</code></pre></figure>


<p>Let’s try again:</p>

<figure class='code'><pre><code>/Users/bhilkert/Dropbox/code/mega_lotto/spec/
mega_lotto/configuration_spec.rb:4:in `&lt;module:MegaLotto&gt;`:
uninitialized constant MegaLotto::Configuration (NameError)</code></pre></figure>


<p>What??? Same message…Even though we added the <code>Configuration</code> class above, our gem doesn’t load it. So we can dive in to the entry file <code>lib/mega_lotto.rb</code> and add the appropriate require statement:</p>

<figure class='code'><pre><code>require "mega_lotto/version"
require "mega_lotto/configuration"
require "mega_lotto/drawing"

begin
  require "pry"
rescue LoadError
end

module MegaLotto
  def self.configure
  end
end</code></pre></figure>


<p>Now with the <code>Configuration</code> class properly loaded, let’s run our specs again:</p>

<figure class='code'><pre><code>MegaLotto::Configuration
  #drawing_count
    default value is 6 (FAILED - 1)
  #drawing_count=
    can set value (FAILED - 2)

Failures:

  1) MegaLotto::Configuration#drawing_count default value is 6
     Failure/Error: expect(config.drawing_count).to eq(6)
     NoMethodError:
       undefined method `drawing_count` for #&lt;MegaLotto::Configuration&gt;
     # ./spec/mega_lotto/configuration_spec.rb:8

  2) MegaLotto::Configuration#drawing_count= can set value
     Failure/Error: config.drawing_count = 7
     NoMethodError:
       undefined method `drawing_count=` for #&lt;MegaLotto::Configuration&gt;
     # ./spec/mega_lotto/configuration_spec.rb:15

Finished in 0.00175 seconds
2 examples, 2 failures</code></pre></figure>


<p>Even though we still have failures, we’re making progress. The failures above relate to the lack of a <code>#drawing_count=</code> method, so let’s add an accessor for it:</p>

<figure class='code'><pre><code>module MegaLotto
  class Configuration
    attr_accessor :drawing_count
  end
end</code></pre></figure>


<p><em>Note: We could’ve just added an <code>attr_writer</code> to satisfy the spec. However, I know I’m going to need a getter down the road, so I chose to do it at the same time.</em></p>

<p>With our accessor in place, let’s check the specs again:</p>

<figure class='code'><pre><code>MegaLotto::Configuration
  #drawing_count=
    can set value
  #drawing_count
    default value is 6 (FAILED - 1)

Failures:

  1) MegaLotto::Configuration#drawing_count default value is 6
     Failure/Error: expect(config.drawing_count).to eq(6)

       expected: 6
            got: nil

       (compared using ==)
     # ./spec/mega_lotto/configuration_spec.rb:8

Finished in 0.00239 seconds
2 examples, 1 failure</code></pre></figure>


<p>Still a failure, but we’re slowly making more progress. The default value isn’t getting set so we’ll change that in the implementation:</p>

<figure class='code'><pre><code>module MegaLotto
  class Configuration
    attr_accessor :drawing_count

    def initialize
      @drawing_count = 6
    end
  end
end</code></pre></figure>


<p>Running the specs one more time for the <code>Configuration</code> class shows that we’re good:</p>

<figure class='code'><pre><code>MegaLotto::Configuration
  #drawing_count
    default value is 6
  #drawing_count=
    can set value

Finished in 0.00172 seconds
2 examples, 0 failures</code></pre></figure>


<p>Running the specs for the main <code>spec/mega_lotto.rb</code> class again:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements (FAILED - 1)

Failures:

  1) MegaLotto#configure returns an array with 10 elements
     Failure/Error: expect(draw.size).to eq(10)

       expected: 10
            got: 6

       (compared using ==)
     # ./spec/mega_lotto_spec.rb:15:in `block (3 levels) in &lt;top (required)&gt;'

Finished in 0.00168 seconds
1 example, 1 failure</code></pre></figure>


<p>We still have the same failures from before, but it’s because we didn’t change the <code>MegaLotto::Drawing</code> to actually <em>use</em> the new configuration class. Since we have this awesome new class, let’s make use of it in <code>MegaLotto::Drawing</code>:</p>

<figure class='code'><pre><code>module MegaLotto
  class Drawing
    def draw
      MegaLotto.configuration.drawing_count.times.map { single_draw }
    end

    private

    def single_draw
      rand(0...60)
    end
  end
end</code></pre></figure>


<p>Running the specs for the drawing class gives us the following output:</p>

<figure class='code'><pre><code>MegaLotto::Drawing
  #draw
    each element is less than 60 (FAILED - 1)
    each element is an integer (FAILED - 2)
    returns an array (FAILED - 3)
    using the default drawing count
      returns an array with 6 elements (FAILED - 4)

Failures:

  1) MegaLotto::Drawing#draw each element is less than 60
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `configuration` for MegaLotto:Module
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:19

  2) MegaLotto::Drawing#draw each element is an integer
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `configuration` for MegaLotto:Module
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:13

  3) MegaLotto::Drawing#draw returns an array
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `configuration` for MegaLotto:Module
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:9

  4) MegaLotto::Drawing#draw using the default
      drawing count returns an array with 6 elements
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `configuration` for MegaLotto:Module
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:26

Finished in 0.00219 seconds
4 examples, 4 failures</code></pre></figure>


<p>Well…I guess it’s clear that it doesn’t have a <code>configuration</code> accessor, huh? Let’s add it to <code>lib/mega_lotto.rb</code>:</p>

<figure class='code'><pre><code>module MegaLotto
  class &lt;&lt; self
    attr_accessor :configuration
  end

  def self.configure
  end
end
</code></pre></figure>


<p>and our specs:</p>

<figure class='code'><pre><code>MegaLotto::Drawing
  #draw
    each element is less than 60 (FAILED - 1)
    each element is an integer (FAILED - 2)
    returns an array (FAILED - 3)
    using the default drawing count
      returns an array with 6 elements (FAILED - 4)

Failures:

  1) MegaLotto::Drawing#draw each element is less than 60
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `drawing_count` for nil:NilClass
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:19

  2) MegaLotto::Drawing#draw each element is an integer
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `drawing_count` for nil:NilClass
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:13

  3) MegaLotto::Drawing#draw returns an array
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `drawing_count` for nil:NilClass
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:9

  4) MegaLotto::Drawing#draw using the default
      drawing count returns an array with 6 elements
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `drawing_count` for nil:NilClass
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:26

Finished in 0.00146 seconds
4 examples, 4 failures
</code></pre></figure>


<p>A different message this time, related to the fact that the configuration accessor has no <code>#drawing_count</code> method. This makes sense because we don’t actually return anything from <code>#configuration</code>. Let’s instantiate a new <code>Configuration</code> object and see where that gets us:</p>

<figure class='code'><pre><code>module MegaLotto
  class &lt;&lt; self
    attr_writer :configuration
  end

  def self.configuration
    Configuration.new
  end

  def self.configure
  end
end</code></pre></figure>


<p>Now, the <code>Drawing</code> class specs are passing:</p>

<figure class='code'><pre><code>MegaLotto::Drawing
  #draw
    each element is an integer
    each element is less than 60
    returns an array
    using the default drawing count
      returns an array with 6 elements

Finished in 0.01007 seconds
4 examples, 0 failures</code></pre></figure>


<p>Let’s flip back to the spec file <code>spec/mega_lotto_spec.rb</code> and see where we are:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements (FAILED - 1)

Failures:

  1) MegaLotto#configure returns an array with 10 elements
     Failure/Error: expect(draw.size).to eq(10)

       expected: 10
            got: 6

       (compared using ==)
     # ./spec/mega_lotto_spec.rb:15

Finished in 0.00167 seconds
1 example, 1 failure</code></pre></figure>


<p>Still failing, but at least we have what seems like the pieces setup to implement the global configuration. The <code>.configure</code> methods needs to yield the configuration block to a new instance of the <code>Configuration</code> class. However, we’ll need to memoize the configuration instance, so when the <code>Drawing</code> class accesses <code>#drawing_count</code>, it returns the initial  configuration value:</p>

<figure class='code'><pre><code>module MegaLotto
  class &lt;&lt; self
    attr_writer :configuration
  end

  def self.configuration
    @configuration ||= Configuration.new
  end

  def self.configure
    yield(configuration)
  end
end</code></pre></figure>


<p><em>Note: it’s important to return the class instance variable from <code>.configuration</code> and check if that is set rather than the reader method, otherwise it’d get stuck in a loop and never return.</em></p>

<p>Running our specs again, we see that we’re green:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements

Finished in 0.00168 seconds
1 example, 0 failures</code></pre></figure>


<p>For the sake of sanity, let’s run the whole suite to make sure everything is covered:</p>

<figure class='code'><pre><code>$ rake
.......

Finished in 0.00688 seconds
7 examples, 0 failures</code></pre></figure>


<p>…and we’re good! Except, if we run our entire suite a few times in a row, we’ll eventually see a failure:</p>

<figure class='code'><pre><code>Failures:

  1) MegaLotto::Drawing#draw returns an Array with 6 elements
     Failure/Error: expect(drawing.size).to eq(6)

       expected: 6
            got: 10

       (compared using ==)
     # ./spec/mega_lotto/drawing_spec.rb:13

Finished in 0.00893 seconds
7 examples, 1 failure</code></pre></figure>


<p>What’s going on???</p>

<p>In the setup of the spec for <code>MegaLotto.configure</code>, we added the following before block:</p>

<figure class='code'><pre><code>before :each do
  MegaLotto.configure do |config|
    config.drawing_count = 10
  end
end</code></pre></figure>


<p>Because this configuration is global, if this spec is run before the others in our suite, the remaining specs will use it. So when the specs for <code>MegaLotto::Drawing</code> run, 10 elements are return instead of the 6, the default, and we see the failure.</p>

<p>For global values like this, it’s best to clean up after each spec to ensure the system is back to a default state. In our case, we can implement a <code>.reset</code> method on <code>MegaLotto</code> and set the configuration back to a new instance of the <code>Configuration</code> class. Let’s start with a spec for this in <code>spec/mega_lotto_spec.rb</code>:</p>

<figure class='code'><pre><code>  describe ".reset" do
    before :each do
      MegaLotto.configure do |config|
        config.drawing_count = 10
      end
    end

    it "resets the configuration" do
      MegaLotto.reset

      config = MegaLotto.configuration

      expect(config.drawing_count).to eq(6)
    end
  end</code></pre></figure>


<p>As expected, we see failure because we have yet to implement the <code>.reset</code> method:</p>

<figure class='code'><pre><code>Failures:

  1) MegaLotto.reset resets the configuration
     Failure/Error: MegaLotto.reset
     NoMethodError:
       undefined method `reset` for MegaLotto:Module
     # ./spec/mega_lotto_spec.rb:28

Finished in 0.00762 seconds
8 examples, 1 failure</code></pre></figure>


<p>Let’s do that now:</p>

<figure class='code'><pre><code>module MegaLotto
  class &lt;&lt; self
    attr_writer :configuration
  end

  def self.configuration
    @configuration ||= Configuration.new
  end

  def self.reset
    @configuration = Configuration.new
  end

  def self.configure
    yield(configuration)
  end
end</code></pre></figure>


<p>Our specs for the <code>.reset</code> method pass, so now we need to make use of it to clean up after our <code>.configure</code> spec:</p>

<figure class='code'><pre><code>describe "#configure" do

  before :each do
    MegaLotto.configure do |config|
      config.drawing_count = 10
    end
  end

  it "returns an array with 10 elements" do
    draw = MegaLotto::Drawing.new.draw

    expect(draw).to be_a(Array)
    expect(draw.size).to eq(10)
  end

  after :each do
    MegaLotto.reset
  end
end</code></pre></figure>


<p>Now we can be sure that our specs pass no matter the order of execution.</p>

<h2>Local Configuration</h2>

<p>The configuration approach above implements a global configuration object. The downside is that we can’t have multiple instances of our code running with different configurations. To avoid this, we could isolate the configuration class and only pass it to those objects that need it. By doing this, we’d avoid needing the <code>MegaLotto.configure</code> method entirely.</p>

<p>With this in mind, <code>Drawing</code> might look like:</p>

<figure class='code'><pre><code>module MegaLotto
  class Drawing
    attr_accessor :config

    def initialize(config = Configuration.new)
      @config = config
    end

    def draw
      config.drawing_count.times.map { single_draw }
    end

    private

    def single_draw
      rand(0...60)
    end
  end
end</code></pre></figure>


<p>We can supply our own configuration object during instantiation if the defaults aren’t appropriate. In this case, as long as the object responds to <code>drawing_count</code>, everything will work.</p>

<figure class='code'><pre><code>require 'ostruct'
config = OpenStruct.new(drawing_count: 10)

MegaLotto::Drawing.new(config).draw #=&gt; [23, 4, 21, 33, 48, 12, 43, 13, 2, 5]</code></pre></figure>


<p>Both approaches are certainly valid, so I’ll leave it to you to decide which approach is best for your gem.</p>

<h2>Implementations in the Wild</h2>

<p>The <a href="https://github.com/carrierwaveuploader/carrierwave#configuring-carrierwave">CarrierWave gem</a> is a popular choice to support avatar uploading. The author(s) realized that not everyone would want to store upload assets on the local system, so they offered the functionality to support Amazon S3 and other similar block storage services. In order to set this value, you’d use a <a href="https://github.com/carrierwaveuploader/carrierwave#configuring-carrierwave">configure block almost identical to the one we wrote above</a>.</p>

<p>Thoughtbot wrote a <a href="http://robots.thoughtbot.com/mygem-configure-block">great article about the configuration implementation</a> in their <a href="https://github.com/thoughtbot/clearance">Clearance gem</a>. It’s worth reading even if you don’t plan to use Clearance.</p>

<h2>Summary</h2>

<p>Keeping gems configurable means balancing your use case with the use cases of others. The more flexibility you offer to users of your gem, the more users will find value in your work. However, there’s a point when offering too much configuration can make the internals of a gem unnecessarily complicated. As you probably know, Ruby is a language full of conventions and it’s best to provide reasonable defaults and only adapt if the need arises.</p>

<p>One approach to balance complexity is to create a system where users can write their own middleware to modify the behavior of the default system. Mike Perham created a <a href="https://github.com/mperham/sidekiq/wiki/Middleware">middleware system for Sidekiq</a> allowing users to add functionality as they wish. Doing so doesn’t require the gem to change at all when unique use cases arise. The implementation of such system is beyond the scope of this book. However, if you want to learn more, <a href="https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/middleware/chain.rb">Sidekiq’s implementation</a> is a great place to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Wrote the Sucker Punch Gem]]></title>
    <link href="http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem/"/>
    <updated>2014-03-13T13:56:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem</id>
    <content type="html"><![CDATA[<p><em>This is one of the final post leading up the the launch of the
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch"><strong>Build a Ruby Gem Ebook</strong></a>,
which is now available for sale in <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch">3 packages</a>,
including <strong>14 chapters of code</strong> and over 2 hours of screencasts</em>.</p>

<p>One of the simplest and most common application of background processing is sending emails outside of a web
request. And while background processing is pretty common, most existing Ruby background processing libraries require an additional process to execute these jobs, resulting in increased infrastructure costs.</p>

<p>At the time, I was working on an application hosted on Heroku, and the cost of an additional dyno ($35/month) wasn’t justified. The background jobs did very little more than send emails out of band. To me, the traditional solutions seemed like overkill. And with this, the idea of <a href="https://github.com/brandonhilkert/sucker_punch">sucker_punch</a> was born&hellip;</p>

<!--more-->


<h2>Ruby Background Processing Libraries</h2>

<p>Until I had heard of <a href="http://sidekiq.org/">Sidekiq</a>, <a href="https://github.com/collectiveidea/delayed_job/tree/master">delayed_job</a> and <a href="https://github.com/resque/resque">Resque</a> were the standard options for processing background jobs in Ruby. I&rsquo;ve used both and believe each has a great use case.</p>

<p>In my experience, it&rsquo;s easiest to start with delayed_job if you need background processing in your application. If and when the DB becomes your bottleneck, it&rsquo;s time to move on. Redis is a dependency of both Resque and Sidekiq, which increases the complexity and infrastructure maintenance, however, with <a href="https://addons.heroku.com/?q=redis">Heroku&rsquo;s hosted Redis
Add-ons</a>, this dependency is much less of a pain.</p>

<h2>My work on Sidekiq</h2>

<p>I previously wrote about my my <a href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/">open source contributions</a> and how I got started. I had spent the previous several
months contributing to Sidekiq and learning more about concurrency patterns in Ruby.</p>

<p>Sidekiq is multi-threaded, which is the reason a single Sidekiq process is <a href="https://github.com/mperham/sidekiq/wiki/Testimonials">more
efficient</a> than a library like Resque. Although, nothing in life is free &ndash; care must be taken to ensure your jobs are thread-safe. A helpful <a href="https://github.com/mperham/sidekiq/wiki/Best-Practices">guide to writing thread-safe code</a> can be found on the Sidekiq wiki.</p>

<h2>Use Case</h2>

<p>I was working on <a href="http://defriendnotifierapp.com/">Defriend Notifier</a> and needed to notify users via email when their Facebook friend list changed. Using Sidekiq or any of the alternatives mentioned above certainly would’ve worked. In fact, the application originally used Sidekiq and functioned perfectly. However, as time went on, I decided the extra cost of the worker wasn’t justified, especially given that the application didn’t produce any revenue outside of advertising (very little…).</p>

<p>At the time, the only background processing library that didn’t require an additional background process was
<a href="https://github.com/mperham/girl_friday">girl_friday</a>, also written by <a href="https://twitter.com/mperham">Mike
Perham</a>, author of Sidekiq. While this solution worked for awhile, I found the syntax to be slightly non-intuitive and it felt a little dirty to pass around a global variable within the application
to manage a single job queue. I also experienced some memory leaks on Heroku as a result of switching to
girl_friday, but to be fair, I didn&rsquo;t spend much time determining the root cause. <em>Disclaimer: It very likely could’ve been due to code that I wrote</em>.</p>

<h2>Enter Celluloid</h2>

<p><a href="https://github.com/celluloid/celluloid">Celluloid</a> describes itself as an actor-based concurrent object
framework for Ruby. Celluloid is the guts behind Sidekiq and the reason why the multi-threaded Sidekiq code is so readable. Celluloid abstracts away the details of concurrency so your code doesn&rsquo;t have to worry about manually managing thread synchronization and object message queuing.</p>

<h2>Sucker Punch is born</h2>

<p>girl_friday was written several years ago — before Celluloid was created. Realizing the power of Celluloid,
I figured there was an opportunity for a new library that behaved like girl_friday, but utilized
Celluloid&rsquo;s more reliable multi-threading capabilities. And because Celluloid handles so much of the complexity, the gem itself would be relatively simple — really a DSL around enqueuing jobs to a <a href="https://github.com/celluloid/celluloid/wiki/Pools">Celluloid Pool</a>.</p>

<p>I <a href="https://twitter.com/brandonhilkert/status/292630123981729793">posed the question to Mike Perham</a> and he confirmed my suspicions.</p>

<p><img class="center" src="http://brandonhilkert.com/images/sucker-punch-tweet.png" title="&#34;Sucker Punch Tweet&#34;" alt="&#34;Sucker Punch Tweet&#34;"></p>

<p>Fortunately, Celluloid had all of the functionality needed for background queues already built-in. While the
functionality was there, the usage syntax was awkward.</p>

<p>I spent the next few days creating a DSL around the Celluloid internals, thus making it feel more specific to
background queues.</p>

<p>Here’s the result of a typical job class:</p>

<pre><code>class LogJob
  include SuckerPunch::Job

  def perform(event)
    # do some other stuff to
    # record the event in the background
    puts "#{event} just happened"
  end
end
</code></pre>

<p>I deployed my sucker_punch-converted application code to production and gave it a week or so before I declared it a success. Once I realized sucker_punch was going to be a maintainable method for processing background jobs in a single web process, I added additional niceties like logging and queue configuration details that may be valuable for other use cases.</p>

<p>Have you tried <a href="https://github.com/brandonhilkert/sucker_punch">sucker_punch</a> yet? If so, I&rsquo;d love to know how it went and what you used it for&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Technical Review]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-technical-review/"/>
    <updated>2014-03-04T17:43:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-technical-review</id>
    <content type="html"><![CDATA[<p><em>This is one of the final post leading up the the launch of the
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch"><strong>Build a Ruby Gem Ebook</strong></a>,
which is now available for sale in <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch">3 packages</a>,
including <strong>14 chapters of code</strong> and over 2 hours of screencasts</em>.</p>

<p>Greetings from a now less snowy Eastern USA!</p>

<p>The past few weeks have seemed like one big snow storm. We haven’t had many days above freezing and spent very little time outside (voluntarily at least). I’m sure those living in colder climates are probably saying “cry me a river…” right now. On the bright side, our extended home stays have given me more time to write.</p>

<!--more-->


<p><img class="center" src="http://brandonhilkert.com/images/snow.jpg" title="&#34;West Chester Snow&#34;" alt="&#34;West Chester Snow&#34;"></p>

<p>Since the last time, I made some serious progress…</p>

<ol>
<li><p><strong>The chapter list is finalized</strong> &ndash; I’m thankful for all the feedback you provided about the chapter list. It really helped me determine the more important topics and make sure they were well covered.</p></li>
<li><p><strong>Content is done</strong> &ndash; Snow days inside will do that. I made a big push to strengthen the weaker areas where there was overwhelming interest.</p></li>
<li><p><strong>Grammatical editing is done</strong> &ndash; I’m lucky to be surrounded by really supportive people that have both the skill and interest to help edit. They pitched in and we knocked it out!</p>

<p> <img class="center" src="http://brandonhilkert.com/images/editing.jpg" title="&#34;Build a Ruby Gem Editing&#34;" alt="&#34;Build a Ruby Gem Editing&#34;"></p></li>
<li><p><strong>Technical review is underway</strong> &ndash; Again, I can’t stress how lucky I feel that people I respect and look up to in the Ruby community volunteered their free time to review the book. I suspect it’ll be another week or 2 before the final changes are sorted out, but never the less, technical review is well underway.</p></li>
<li><p><strong><a href="http://www.mikeperham.com/">Mike Perham</a> is writing a foreword</strong> &ndash; Mike is someone I greatly respect and helped me navigate the open source eco-system when I first started contributing to his <a href="http://sidekiq.org/">Sidekiq</a> project. He’s been contributing to OSS far longer than Sidekiq and the Ruby community is lucky to have him. He’s written a beautifully succinct opening for the book as it relates to developing open source software. If reading his foreword doesn’t motivate to start contributing, I don’t now what will.</p></li>
</ol>


<p>Specifics about the launch date haven’t been determined, but <strong>the book will definitely launch in late March</strong>. I plan to be in touch with a <strong>sample chapter and coupon code</strong>, as promised, when the time gets closer.</p>

<p>Looking back on the items mentioned above, I’m really excited to be nearing the home stretch and finally get it in to your hands.</p>

<p>Hope you had a great past couple of weeks. Talk to you soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding the RAILS_CACHE_ID Environment Variable]]></title>
    <link href="http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable/"/>
    <updated>2014-02-19T07:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable</id>
    <content type="html"><![CDATA[<p>Last week, I was looking through my Twitter stream and came across a tweet that referenced <code>ENV[“RAILS_CACHE_ID”]</code>. I was unfamiliar with this environment variable and made a note to learn more.</p>

<p>Rails 4 has made a discernible effort to improve view rendering performance by what they’re calling <a href="http://signalvnoise.com/posts/3690-the-performance-impact-of-russian-doll-caching">russian doll caching</a>. Prior to this, view caching was simple in syntax, but realistically more complicated when cached partials needed busting on subsequent releases.</p>

<!--more-->


<p>I didn’t know if this environmental variable had anything to do with Rails 4 caching, so I went digging…</p>

<p>The first thing I did was <code>git clone</code> the Rails source code and look for that variable. Outside of the documentation and tests, it showed up in one place, <code>activesupport/lib/active_support/cache.rb</code>:</p>

<pre><code># Expands out the +key+ argument into a key that can be used for the
# cache store. Optionally accepts a namespace, and all keys will be
# scoped within that namespace.
#
# If the +key+ argument provided is an array, or responds to +to_a+, then
# each of elements in the array will be turned into parameters/keys and
# concatenated into a single key. For example:
#
#   expand_cache_key([:foo, :bar])               # =&gt; "foo/bar"
#   expand_cache_key([:foo, :bar], "namespace")  # =&gt; "namespace/foo/bar"
#
# The +key+ argument can also respond to +cache_key+ or +to_param+.

def expand_cache_key(key, namespace = nil)
  expanded_cache_key = namespace ? "#{namespace}/" : ""

  if prefix = ENV["RAILS_CACHE_ID"] || ENV["RAILS_APP_VERSION"]
    expanded_cache_key &lt;&lt; "#{prefix}/"
  end

  expanded_cache_key &lt;&lt; retrieve_cache_key(key)
  expanded_cache_key
end
</code></pre>

<p>The comments preceding the method do a good job telling the whole story. The <code>expanded_cache_key</code> variable is an array built up from the <code>key</code> argument. The <code>RAILS_CACHE_ID</code> environment variable is prefaced to this array, operating similar to a namespace.</p>

<p>With these assumptions in mind, let’s see if we prove for sure. I’ll generate a new Rails 4 app:</p>

<pre><code>$ rails new cache_test
</code></pre>

<p>We’ll be inspecting model objects, so let’s generate a fake blog model:</p>

<pre><code>$ rails g scaffold post title content:text
</code></pre>

<p>Migrate the database to get current:</p>

<pre><code>$ bin/rake db:migrate
</code></pre>

<p>I’ll create a new <code>Post</code> and take a look at the default <code>cache_key</code>:</p>

<pre><code>$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Let’s set the <code>RAILS_CACHE_ID</code> and look at the <code>cache_key</code> of this record again:</p>

<pre><code>$ export RAILS_CACHE_ID=octopus
$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Hmmm…same thing. Referring back to the Rails course code above, it turns out that not all cache writes use the <code>expand_cache_key</code> method. Searching around the Rails code for <code>expand_cache_key</code>, we find the following results:</p>

<pre><code>ActionController::Caching::Fragments#fragment_cache_key
ActionDispatch::Http::Cache::Response#etag=
</code></pre>

<p>From the looks of it, it only applies to fragment caching and manually setting ETAG headers for HTTP responses, so let’s dig in to those.</p>

<h2>Fragment Caching</h2>

<p>I can cache the post fragment by wrapping it in a <code>cache</code> block:</p>

<pre><code>&lt;% app/views/posts/show.html.erb %&gt;
&lt;%= cache(@post) do %&gt;
  &lt;p&gt;
    &lt;strong&gt;Title:&lt;/strong&gt;
    &lt;%= @post.title %&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Content:&lt;/strong&gt;
    &lt;%= @post.content %&gt;
  &lt;/p&gt;
&lt;% end %&gt;
</code></pre>

<p>Run the server and make a request to <code>http://localhost:3000/posts/1</code>.</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:16:04 -0500
  ActiveRecord::SchemaMigration Load (0.2ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.2ms)
Write fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.6ms)
  Rendered posts/show.html.erb within layouts/application (11.0ms)
</code></pre>

<p><em>Note: Make sure <code>config.action_controller.perform_caching</code> is set to <code>true</code> in <code>config/environments/development.rb</code> (it’s <code>false</code> by default), otherwise caching is disabled.</em></p>

<p>There it is! It wrote out the key <code>views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code>. Let’s change the environmental variable and see if it adjusts accordingly:</p>

<pre><code>$ export RAILS_CACHE_ID=shark
</code></pre>

<p>Restart the Rails server and again, request <code>http://localhost:3000/posts/1</code>:</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:35:33 -0500
  ActiveRecord::SchemaMigration Load (0.1ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.3ms)
Write fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.5ms)
  Rendered posts/show.html.erb within layouts/application (11.1ms)
Completed 200 OK in 82ms (Views: 62.7ms | ActiveRecord: 0.5ms)
</code></pre>

<p>Sure enough…the key <code>views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code> was used this time.</p>

<h2>Etags</h2>

<p>Etags are a value added to the HTTP headers that allow a browser to determine whether the content for a particular piece of content should be refreshed or not. If not, the server returns a <code>304</code> HTTP code and the browser uses the cached response from a previous request.</p>

<p>Rails provides two controller helper methods to help determine whether the content should be refreshed: <code>fresh_when</code> and <code>stale?</code>. The <a href="http://guides.rubyonrails.org/caching_with_rails.html#conditional-get-support">Rails guides</a> provide a decent explanation of these methods and when to use them.</p>

<p>Jumping in to the <code>PostsController</code>, let’s use the <code>fresh_when</code> method in the <code>show</code> action:</p>

<pre><code>class PostsController &lt; ApplicationController

  def show
    @post = Post.find(params[:id])
    fresh_when(@post)
  end

end
</code></pre>

<p>Now, when we request the <code>show</code> page for that post, we get an Etag back in the header response of <code>9c754ae292618570ec43cae8e03a0b13</code>. That doesn’t look very familiar, huh?</p>

<p>It turns out that the Etag is generated using the following method:</p>

<pre><code>Digest::MD5.hexadigest(key)
</code></pre>

<p>But the key is more than just the <code>cache_key</code> of the <code>@post</code>. If we refer back to where the <code>expand_cache_key</code> method was used, we see that when the <code>etag</code> attribute is set on the response, the key is expanded using the <code>ActiveSupport::Cache#expand_cache_key</code> method we looked at above:</p>

<pre><code> def etag=(etag)
   key = ActiveSupport::Cache.expand_cache_key(etag)
   @etag = self[ETAG] = %("#{Digest::MD5.hexdigest(key)}")
 end
</code></pre>

<p>Let’s stop the server and reset the <code>ENV[“RAILS_CACHE_ID”]</code>:</p>

<pre><code>$ export RAILS_CACHE_ID=whale
</code></pre>

<p>Running the same request, we get an Etag of <code>b389da68ca1b25986edecf349fcf63e6</code>. So as you can see, by updating <code>ENV[“RAILS_CACHE_ID”]</code> alone, we get a different Etag in the response without changing the <code>post</code> object itself, which means we can invalidate our browser cache by updating this environmental variable.</p>

<p>I, personally, deploy to Heroku most of the time and it’d be nice to be able take advantage of browser caching in this manner, but also know when a new deploy is released. <a href="http://ninjasandrobots.com/rails-caching-a-problem-with-etags-and-a-solution">This article</a> describes a solution that integrates Heroku’s numbered releases.</p>

<p>However, we know that Heroku uses git to get the source code of the appellation to the application container, so why not leverage git commit IDs for <code>ENV[“RAILS_CACHE_ID”]</code>.</p>

<p><code>git log</code> is a command to look at….well, git logs!. With a few additional options, we can get a shortened version of the commit SHA:</p>

<pre><code>$ git log --pretty=format:%h -n1
40ad584
</code></pre>

<p><strong>Combining the git commit SHA gives us the perfect opportunity to invalidate browser cache</strong>. If the Etag is different because a different git commit SHA is the most recent on the server, we know there’s a potential the HTML rendered and cached in the browser could be outdated. We can implement this by setting the ENV variable in <code>config/application.rb</code>:</p>

<pre><code>ENV['RAILS_CACHE_ID'] = `git log --pretty=format:%h -n1`.strip
</code></pre>

<p>Now, when a request is made we get an Etag of <code>6d80b6397347f8de1b8718e7fd9f90e1</code>. And if we add an empty commit and re-request the post, we get an Etag of <code>6dcc66ddf83613dd0c46406a1e983b38</code>.</p>

<p>Hooray! <strong>A browser caching strategy for HTML content that’s dependent on the git release</strong>.</p>

<h2>Summary</h2>

<p>Before Rails 4, it was common to use a version number in the view <code>cache</code> method so that when you changed a encompassed view template, the cache would bust and the changes would be shown. However, now that <code>cache_digests</code> are part of Rails 4, the contents of the template block is evaluated and an MD5 string is created from the contents (the latter part of the cache key &ndash; <code>c39e6bde261c006ffe9ddf27fb9d5318</code> in the last example). This ensures that whenever the contents of the view template are changed, the cache is busted and the new template is properly stored and rendered.</p>

<p>Given the <code>cache_key</code> of fragment caching is dependent on the contents of the template, I have trouble finding value in setting the <code>RAILS_CACHE_ID</code> environmental variable for fragment caching alone.</p>

<p>Alternatively, the use case for using <code>ENV[“RAILS_CACHE_ID”]</code> to control browser caching can be a tremendous asset when the content of the body response is not considered. Caching strategies can be difficult to reason about and hopefully this gives you another tool in the toolbox to make parts of your Rails applications more performant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Update]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-book-update/"/>
    <updated>2014-02-15T08:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-book-update</id>
    <content type="html"><![CDATA[<p><em>This is one of the final post leading up the the launch of the
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch"><strong>Build a Ruby Gem Ebook</strong></a>,
which is now available for sale in <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=launch">3 packages</a>,
including <strong>14 chapters of code</strong> and over 2 hours of screencasts</em>.</p>

<p><strong>This past weekend I added ~ 6,000 words</strong> to the existing content. I&rsquo;m really excited to be nearing the end of the road. I&rsquo;ve gotten some great feedback since I started and wanted to gather a bit more to finalize the chapter list.</p>

<p>Here&rsquo;s the chapter list I&rsquo;m working with&nbsp;so far:</p>

<!--more-->


<ol>
<li>Introduction What is a gem? Why build a gem?)</li>
<li>File structure of a gem</li>
<li>Testing/debugging setup</li>
<li>Code implementation of of example gem</li>
<li>Versioning</li>
<li>Release (how to release? and when to release?)</li>
<li>Changelog (What is it? and what to include?)</li>
<li>Responsibility of a gem author</li>
<li>Loading additional libraries within a gem</li>
<li>Command-line utilities</li>
<li>Configuration patterns</li>
<li>Rails hooks</li>
<li>Rails view helpers</li>
<li>Rails controller includes</li>
<li>Rails Model Includes</li>
<li>Rails rake tasks</li>
<li>Rails engines (when/why to use?)</li>
<li>Open source management</li>
<li>Summary</li>
</ol>


<p>Phew! That&rsquo;s a lot&hellip;so with that in mind, <strong>have I covered everything?</strong></p>

<p>Please <strong>leave a comment</strong> if you&rsquo;re interested in reading about something I haven&rsquo;t mentioned.</p>

<p>One of the things I&rsquo;m most excited about is being able to use real-word examples for each chapter. I learn by reading and writing my own code and really appreciate when a book/post does the same. I&rsquo;ve tried to do that at every step of the way. Hopefully this will make the book more valuable to you.</p>

<p>I will be in touch in the <strong>next few weeks with a sample chapter</strong> or two, along with some feature blog posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Page Specific Javascript in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/page-specific-javascript-in-rails/"/>
    <updated>2014-02-04T20:51:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/page-specific-javascript-in-rails</id>
    <content type="html"><![CDATA[<p>The asset pipeline has made including javascript in Rails applications a breeze. Without any additional changes, the code included in your app is executed on every page. However, with a combination of CSS class scopes and a jQuery plugin, you can isolate certain javascript code to only run on specific pages.</p>

<h2>The Problem</h2>

<p>Imagine you have 2 pages in your application (landing and contact) and need an alert box to show up on the contact page only. How would you do it?</p>

<!--more-->


<p>Traditionally, if it&rsquo;s something small, you might bite the bullet and just include it in the view template:</p>

<pre><code>&lt;% # app/views/page/contact.html.erb %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;

&lt;%= javascript_tag do %&gt;
  alert("My example alert box.");
&lt;% end %&gt;
</code></pre>

<p>To me, this always felt dirty. Mixing UI and javascript concerns in an HTML template is easy to forget. Imagine your app has matured and want to change the message of the alert box. Rather than find an associated javascript file (the logical path), you&rsquo;re forced to dig through HTML to find the alert box text.</p>

<p>Another solution is to insert our javascript in to its own file:</p>

<pre><code>// app/assets/javascripts/alert.js

alert("My example alert box.");
</code></pre>

<p>And including this file only in the view we want it to execute:</p>

<pre><code>&lt;%# app/views/page/contact.html.erb %&gt;

&lt;%= javascript_include_tag "alert" %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;
</code></pre>

<p>And don&rsquo;t forget to include your new file in the list of files to be compiled:</p>

<pre><code># config/environments/production.rb

config.assets.precompile += %w( alert.js )
</code></pre>

<p>Like the previous solution, it too, mixes the concerns of HTML and javascript, but introduces a new problem &ndash; this javascript file is included and download separately from the rest of the app&rsquo;s asset. This causes the browser to make another request to the server, thus increasing the page load time and in turn, causing bad bad user pain (Ok, maybe not that bad…). But it’s still not ideal.</p>

<h2>The Solution</h2>

<p>The solution I&rsquo;ve found the most elegant requires adding CSS classes to the layout&rsquo;s body tag and using the <a href="https://github.com/Verba/jquery-readyselector">jquery-readyselector plugin</a>.</p>

<p>First, in order to scope the pages through CSS selectors, let&rsquo;s add some classes to our layout:</p>

<pre><code>&lt;%# app/views/layouts/application.html.erb %&gt;

&lt;body class="&lt;%= controller_name %&gt; &lt;%= action_name %&gt;"&gt;
  &lt;%= yield %&gt;
&lt;/body&gt;
</code></pre>

<p>Assuming your <code>contact</code> page action was inside a controller named <code>PagesController</code>, the rendered result would be the following:</p>

<pre><code>&lt;body class="pages contact"&gt;
  ...
&lt;/body&gt;
</code></pre>

<p>Add <a href="https://raw.github.com/Verba/jquery-readyselector/master/jquery.readyselector.js">this small bit of javavascript code</a> to a new file: <code>vendor/assets/javascripts/jquery-readyselector.js</code>.</p>

<p>Include the new plugin in the <code>application.js</code> manifest file:</p>

<pre><code>...
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require jquery-readyselector
//= require_tree .
</code></pre>

<p>Like before, let&rsquo;s put the javascript code in an isolated asset file, but scope it to the page:</p>

<pre><code>// app/assets/javascripts/alert.js.coffee

$(".pages.contact").ready -&gt;
  alert "My example alert box."
</code></pre>

<p>Because this file is picked up with the <code>//= require_tree .</code> line in the <code>application.js</code> manifest, there’s no additional step to load the asset. And that&rsquo;s it! Your <em>fancy</em> alert box will now only run on your contact page.</p>

<p>Let me what you think of this solution and if you’ve come across this issue before. I&rsquo;d love to hear about other solutions!</p>

<p><em>Note: In order for this solution to work with Turbolinks in Rails 4, I had to drag in the <a href="https://github.com/kossnocorp/jquery.turbolinks">jquery.turbolinks plugin</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relative Timestamps in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/relative-timestamps-in-rails/"/>
    <updated>2014-01-13T07:01:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/relative-timestamps-in-rails</id>
    <content type="html"><![CDATA[<p>Facebook’s news feed popularized the relative timestamp format of &ldquo;X hours ago&rdquo;. For good reason too&hellip;why print an absolute timestamp so that people have to do the relative calculation in their head? It’s one less step for the user, and to be fair, pretty easy to implement.</p>

<h2>Rails helpers to the rescue</h2>

<p>Rails has a view helper aptly named <code>time_ago_in_words</code>. If you use the
<code>created_at</code> attribute from a record, you could easily reference a relative timestamp from a corresponding view:</p>

<pre><code># app/views/posts/show.html.erb

Posted: &lt;%= time_ago_in_words(post.created_at) %&gt; ago
</code></pre>

<p>That’s great! But not enough…what happens when a user stays on the page for 10 min. and the latest post was no longer posted &ldquo;1 minute ago”? Asking them to refresh the page every 10 minutes is no longer an acceptable answer.</p>

<!--more-->


<p>Additionally, Rails 4 encourages the use of <a href="http://edgeguides.rubyonrails.org/caching_with_rails.html">Russian doll caching</a>, so if you cached record and use <code>time_ago_in_words</code>, the relative time of the post would never change. No bueno!</p>

<p>Fortunately, we can do better…</p>

<h2>The Solution</h2>

<p><a href="http://timeago.yarp.com/">Timeago.js</a> is a <a href="http://jquery.com/">jQuery</a> plugin that converts timestamps to a relative format. They also boast the following on their website:</p>

<ul>
<li><p>Avoid timestamps dated &ldquo;1 minute ago&rdquo; even though the page was opened 10 minutes ago; timeago refreshes automatically</p></li>
<li><p>You can take full advantage of page caching in your web applications, because the timestamps aren&rsquo;t calculated on the server</p></li>
<li><p>You get to use microformats like the cool kids</p></li>
</ul>


<h2>The Implementation</h2>

<ol>
<li><p>Download the plugin and place it in <code>vendor/javascripts/timeago.jquery.js</code></p></li>
<li><p>Add the following line to your <code>application.js</code> manifest file, so it&rsquo;s picked up by the <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset pipeline</a>:</p>

<pre><code> //= require jquery.timeago
</code></pre></li>
<li><p>Create a helper that you can use from your views that will do the dirty work for you:</p>

<pre><code> # app/helpers/time.rb
 module TimeHelper
   def timeago(time, options = {})
     options[:class] ||= "timeago"
     content_tag(
       :time,
       time.to_s,
       options.merge(datetime: time.getutc.iso8601)
     ) if time
   end
 end
</code></pre></li>
<li><p>Reference the new helper method from your view &ndash; passing in the time attribute of the model:</p>

<pre><code> # app/views/posts/show.html.erb
 Posted: &lt;%= timeago(post.created_at) %&gt;
</code></pre>

<p> This generates the following HTML tag:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"&gt;&lt;/time&gt;
</code></pre>

<p> Now that <code>timeago.js</code> is loaded and you have the right HTML tags on the page, you need to invoke the plugin and let it do its thing.</p></li>
<li><p>Add the following to the bottom of your layout and reload the page:</p>

<pre><code> # app/views/layouts/application.html.erb
 &lt;body&gt;
   &lt;%= javascript_tag do %&gt;
     $(function() {
       $("time.timeago").timeago();
     });
   &lt;% end %&gt;
 &lt;/body&gt;
</code></pre>

<p> Once the <code>timeago()</code> function is called, the timestamp above will look like:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"
 title="2013-11-08 20:05:37 UTC"&gt;2 days ago&lt;/time&gt;
</code></pre></li>
</ol>


<p>And that&rsquo;s it&hellip;sit on the page long enough and watch the timestamps increment. You&rsquo;ve now got yourself a solution that is dynamic and allows you to cache the views until the cows come home!</p>

<h2>Summary</h2>

<p>Even though Rails has a simple mechanism for displaying relative timestamps in views, moving this functionality to the client side makes sense.</p>

<p>Another benefit you get is timezone interpretation. Even though we print the UTC time in the HTML tag, the plugin will detect the local timezone from the browser and adjust accordingly. In my experience, timezones are a huge pain and the more you can offload them to a solution like this, the better.</p>

<p>Happy time-stamping!</p>

<p><em>Note: Since writing this, I discovered the <a href="https://github.com/37signals/local_time">local_time gem</a> from 37Signals. They’ve been a big advocate of moving relative timestamp calculation to the client-side. Their gem uses <a href="http://momentjs.com/">moment.js</a> instead of timago.js and it includes <a href="https://github.com/37signals/local_time/blob/master/app/assets/javascripts/local_time.js.coffee#L157">code to update the timestamps if Turbolinks is being used</a>. It’s worth checking out if you do this on a regular basis or use the moment.js library for other reasons.</em></p>

<p>P.S. In my book, <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=relative-timestamps-post">Build a Ruby Gem</a>, I cover how to create a Rails engine gem with the above functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Launched an Email Course to 500+ People]]></title>
    <link href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/"/>
    <updated>2014-01-06T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/how-i-launched-an-email-course</id>
    <content type="html"><![CDATA[<p>About a month ago, I joined <a href="http://jfdi.bz/">JFDI.bz</a> &ndash; a community for
solo-founders launching their own thing. Once a month, the group engages in a
<em>Week of Hustle</em> &ndash; a week long sprint to launch something.
I chose to launch an email course on the topic of <a href="http://brandonhilkert.com/courses/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary">building a Ruby
gem</a>.</p>

<!--more-->


<h2>Why <em>Build a Ruby Gem</em>?</h2>

<p>A few years ago, I was building my first Ruby gem and I was left pretty
confused with the process and conventions. After working through my
frustrations, I thought the information I learned could be useful to others.</p>

<p>Honestly, I thought to write an eBook at first, however, the last thing I
wanted was to invest a month or two of my time only to find out people
weren&rsquo;t interested.</p>

<p>An email course was a good medium &ndash; I could cover the basics well enough to get
people through their hangups, while also validating the need for an eBook. I
figured if I got <strong>100-200</strong> people to sign up for the course, I would move
forward with the book.</p>

<h2>Results</h2>

<p>It turns out my marketing efforts were more successful than I anticipated.</p>

<h3>Today, almost 600 people have taken the Build a Ruby Gem email course!</h3>

<h2>Email is King&hellip;still</h2>

<p>Prior to launching this email course, I&rsquo;d read about the value of building an
email list from people like <a href="http://nathanbarry.com/">Nathan Barry</a>, <a href="http://unicornfree.com/">Amy
Hoy</a> and <a href="http://justinjackson.ca/">Justin Jackson</a>.</p>

<p>I&rsquo;d also read countless other posts describing the most common regrets when
launching a new product. Almost all of them included not building an email
list. With that said, it was one of the first things I setup.</p>

<p>I blogged each day about my progress. Each post had a
mailing list subscription form that sent them subsequent daily updates.  Subscriptions
were slow at first, but interest built.  By then end of the week <strong>232</strong> people had
subscribed. And the day the course went live, I was able to to convert <strong>115</strong>
(~50%) of them.</p>

<p>The people subscribed were <strong>EXACTLY</strong> my target audience so it&rsquo;s no surprise
conversion was high.</p>

<h2>Finding Your Target Audience</h2>

<p>Fortunately for me, my target audience was Ruby developers and they hang out
online (surprise, surprise). But where online&hellip;</p>

<p>Let me hit you with something that seems obvious in hindsight:</p>

<h3>Marketing is easy when you build a product for an audience you&rsquo;re already part of.</h3>

<p>This was something I&rsquo;d <a href="http://unicornfree.com/2013/how-do-you-create-a-product-people-want-to-buy">read over the past few
months</a>,
but not seen its value until now.</p>

<p>The email course is for <strong>Ruby developers</strong>, I&rsquo;m a <strong>Ruby Developer</strong>, so the
question becomes&hellip;.<em>where do I hang out online?</em></p>

<p>That question is <strong>easy</strong> to answer &ndash; <a href="http://rubyweekly.com/">Ruby weekly</a>,
<a href="http://www.reddit.com/r/ruby">Reddit</a> and
<a href="http://www.rubyflow.com/">RubyFlow</a>.</p>

<p>And don&rsquo;t you know&hellip;it turns out those 3 sources have been the highest
converting sources since the course launched:</p>

<ol>
<li>Ruby weekly &ndash; 131</li>
<li>RubyFlow &ndash; 65</li>
<li>Reddit &ndash; 62</li>
</ol>


<p>The remaining sources were a combination of direct links, social media and
other technology news aggregation sites (probably mostly stemming from the top
sources above).</p>

<p><em>Note: I&rsquo;ve been reading <a href="http://www.amazon.com/80-20-Sales-Marketing-Definitive/dp/1599185059">80/20 Sales and
Marketing</a>
and the numbers above coincide, almost exactly, to the 80/20 curve. That is,
80% of the conversion came from 20% of the sources.</em></p>

<h2>Twitter Tip</h2>

<p>The last day of the email course has a <em>Summary</em> section thanking people for
taking the course and attempting to get feedback. While I haven&rsquo;t received much
constructive criticism, I dropped this little doozie at the bottom:</p>

<p><img class="center" src="http://brandonhilkert.com/images/email-course/click-to-tweet.png" title="&#34;Build a Ruby Gem Email Course Click To Tweet&#34;" alt="&#34;Build a Ruby Gem Email Course Click To Tweet&#34;"></p>

<p>I&rsquo;d read a post about <a href="http://grinnick.com/posts/how-groove-s-email-copy-makes-their-posts-go-viral?ref=hn">GroveHQ&rsquo;s emails going
viral</a>
and this was something they did in their campaigns.</p>

<p>The link allows people to click and immediately be setup to Tweet the
following:</p>

<p><img class="center" src="http://brandonhilkert.com/images/email-course/course-tweet.png" title="&#34;Build a Ruby Gem Email Course Tweet&#34;" alt="&#34;Build a Ruby Gem Email Course Tweet&#34;"></p>

<p>It&rsquo;s difficult to determine the value of those tweets, but over 10 people have
clicked and tweeted. To me, this was surprising, but valuable.</p>

<p>I&rsquo;ll probably look to make it stand out a bit more to hopefully improve the
click-through.</p>

<h2>In Summary</h2>

<p>I spent a total of <strong>16 hours</strong> creating the <em>Build a Ruby Gem</em> email
course, which has since <strong>validated the need for a book</strong>. While interest
in a free email course doesn&rsquo;t guarantee a book on the same subject will sell, it was
the closet thing I could think to do outside of taking pre-orders.</p>
]]></content>
  </entry>
  
</feed>
