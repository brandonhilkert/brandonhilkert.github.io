<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2014-03-19T12:21:17-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Gem Configuration Patterns]]></title>
    <link href="http://brandonhilkert.com/blog/ruby-gem-configuration-patterns/"/>
    <updated>2014-03-17T20:26:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/ruby-gem-configuration-patterns</id>
    <content type="html"><![CDATA[<p><em>This is one of 3 posts leading up the the launch of my
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=sucker-punch"><strong>Build a Ruby Gem book</strong></a>
on <strong>Thursday, March 27</strong>! Sign up below to receive a <strong>20% discount coupon</strong> when the book launches.</em></p>

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Ruby Gem Configuration Patterns" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>


<p>The world isn’t black and white (as much as we’d like to believe it is). Just because our gem’s functionality may work for us, doesn’t mean it’ll work for everyone.</p>

<p>Fortunately, we can give users the ability to add custom configuration data, allowing them to adapt our code to their own use. In this post, we&rsquo;ll adapt the <a href="https://github.com/brandonhilkert/mega_lotto"><code>mega_lotto</code> gem</a> to take a configuration block that modifies the number of integers returned from the <code>#draw</code> method output.</p>

<!--more-->


<h2>Use Case</h2>

<p>Our <code>mega_lotto</code> gem provides the functionality to randomly draw 6 numbers. However, let’s assume that someone else has taken interest in the code for our gem, but needs the code to generate 10 random numbers within the same range.</p>

<p>One option would be for them to fork the code and modify the gem to fit their needs. However, now there’s a randomly forked gem with the same name and it’s unclear why one should be used over the other, especially if no changes to the <code>README</code> were made.</p>

<p>Rather than go down that path, we can make our existing <code>mega_lotto</code> gem more flexible by returning 6 integers by default, while also providing an interface to customize this value for those with the need.</p>

<p>Our goal is to adapt our gem to take a configuration block like this:</p>

<figure class='code'><pre><code>MegaLotto.configure do |config|
  config.drawing_count = 10
end</code></pre></figure>


<h2>Implementation</h2>

<p>Let’s first write some specs for the desired functionality. Because the <code>.configure</code> method above is off the main <code>MegaLotto</code> namespace, we’ll create the spec file <code>spec/mega_lotto_spec.rb</code>. With this spec, we’ll assert that after running the configuration block above, the <code>#drawing</code> method returns an array (like before), but this time with 10 integers instead:</p>

<figure class='code'><pre><code>require "spec_helper"

describe MegaLotto do
  describe "#configure" do
    before do
      MegaLotto.configure do |config|
        config.drawing_count = 10
      end
    end

    it "returns an array with 10 elements" do
      draw = MegaLotto::Drawing.new.draw

      expect(draw).to be_a(Array)
      expect(draw.size).to eq(10)
    end
  end
end</code></pre></figure>


<p>This spec serves as higher level integration spec because it’s accessing the public API of our gem. Because of this, we can be sure that once this spec passes, our implementation is complete. As expected, when we run this spec, it fails:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements (FAILED - 1)

Failures:

  1) MegaLotto#config returns an array with 10 elements
     Failure/Error: MegaLotto.configure do |config|
     NoMethodError:
       undefined method `configure` for MegaLotto:Module
     # ./spec/mega_lotto_spec.rb:6

Finished in 0.00131 seconds
1 example, 1 failure</code></pre></figure>


<p>Now that we have a spec to work against, let’s continue our implementation.</p>

<p>The failure above complained that there was no <code>MegaLotto.configure</code> method, so let’s add it:</p>

<figure class='code'><pre><code>module MegaLotto
  def self.configure
  end
end</code></pre></figure>


<p>Re-running our specs gives us a different failure message this time:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements (FAILED - 1)

Failures:

  1) MegaLotto#configure returns an array with 10 elements
     Failure/Error: expect(draw.size).to eq(10)

       expected: 10
            got: 6

       (compared using ==)
     # ./spec/mega_lotto_spec.rb:15

Finished in 0.00246 seconds
1 example, 1 failure</code></pre></figure>


<p>The output now shows that the code still returned 6 integers, which we expected because our <code>.configure</code> method hasn’t done anything yet.</p>

<p>Because we’re using a object-oriented language like Ruby, we can create a <code>Configuration</code> class whose responsibility will be…(drumroll)….configuration!</p>

<p>Let’s start with some specs:</p>

<figure class='code'><pre><code># spec/mega_lotto/configuration_spec.rb

require "spec_helper"

module MegaLotto
  describe Configuration do
    describe "#drawing_count" do
      it "default value is 6" do
        Configuration.new.drawing_count = 6
      end
    end

    describe "#drawing_count=" do
      it "can set value" do
        config = Configuration.new
        config.drawing_count = 7
        expect(config.drawing_count).to eq(7)
      end
    end
  end
end</code></pre></figure>


<p>Running the configuration specs produces:</p>

<figure class='code'><pre><code>/Users/bhilkert/Dropbox/code/mega_lotto/spec/
mega_lotto/configuration_spec.rb:4:in `&lt;module:MegaLotto&gt;`:
uninitialized constant MegaLotto::Configuration (NameError)</code></pre></figure>


<p>Let’s add the <code>Configuration</code> class:</p>

<figure class='code'><pre><code># lib/mega_lotto/configuration.rb

module MegaLotto
  class Configuration
  end
end</code></pre></figure>


<p>Let’s try again:</p>

<figure class='code'><pre><code>/Users/bhilkert/Dropbox/code/mega_lotto/spec/
mega_lotto/configuration_spec.rb:4:in `&lt;module:MegaLotto&gt;`:
uninitialized constant MegaLotto::Configuration (NameError)</code></pre></figure>


<p>What??? Same message…Even though we added the <code>Configuration</code> class above, our gem doesn’t load it. So we can dive in to the entry file <code>lib/mega_lotto.rb</code> and add the appropriate require statement:</p>

<figure class='code'><pre><code>require "mega_lotto/version"
require "mega_lotto/configuration"
require "mega_lotto/drawing"

begin
  require "pry"
rescue LoadError
end

module MegaLotto
  def self.configure
  end
end</code></pre></figure>


<p>Now with the <code>Configuration</code> class properly loaded, let’s run our specs again:</p>

<figure class='code'><pre><code>MegaLotto::Configuration
  #drawing_count
    default value is 6 (FAILED - 1)
  #drawing_count=
    can set value (FAILED - 2)

Failures:

  1) MegaLotto::Configuration#drawing_count default value is 6
     Failure/Error: expect(config.drawing_count).to eq(6)
     NoMethodError:
       undefined method `drawing_count` for #&lt;MegaLotto::Configuration&gt;
     # ./spec/mega_lotto/configuration_spec.rb:8

  2) MegaLotto::Configuration#drawing_count= can set value
     Failure/Error: config.drawing_count = 7
     NoMethodError:
       undefined method `drawing_count=` for #&lt;MegaLotto::Configuration&gt;
     # ./spec/mega_lotto/configuration_spec.rb:15

Finished in 0.00175 seconds
2 examples, 2 failures</code></pre></figure>


<p>Even though we still have failures, we’re making progress. The failures above relate to the lack of a <code>#drawing_count=</code> method, so let’s add an accessor for it:</p>

<figure class='code'><pre><code>module MegaLotto
  class Configuration
    attr_accessor :drawing_count
  end
end</code></pre></figure>


<p><em>Note: We could’ve just added an <code>attr_writer</code> to satisfy the spec. However, I know I’m going to need a getter down the road, so I chose to do it at the same time.</em></p>

<p>With our accessor in place, let’s check the specs again:</p>

<figure class='code'><pre><code>MegaLotto::Configuration
  #drawing_count=
    can set value
  #drawing_count
    default value is 6 (FAILED - 1)

Failures:

  1) MegaLotto::Configuration#drawing_count default value is 6
     Failure/Error: expect(config.drawing_count).to eq(6)

       expected: 6
            got: nil

       (compared using ==)
     # ./spec/mega_lotto/configuration_spec.rb:8

Finished in 0.00239 seconds
2 examples, 1 failure</code></pre></figure>


<p>Still a failure, but we’re slowly making more progress. The default value isn’t getting set so we’ll change that in the implementation:</p>

<figure class='code'><pre><code>module MegaLotto
  class Configuration
    attr_accessor :drawing_count

    def initialize
      @drawing_count = 6
    end
  end
end</code></pre></figure>


<p>Running the specs one more time for the <code>Configuration</code> class shows that we’re good:</p>

<figure class='code'><pre><code>MegaLotto::Configuration
  #drawing_count
    default value is 6
  #drawing_count=
    can set value

Finished in 0.00172 seconds
2 examples, 0 failures</code></pre></figure>


<p>Running the specs for the main <code>spec/mega_lotto.rb</code> class again:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements (FAILED - 1)

Failures:

  1) MegaLotto#configure returns an array with 10 elements
     Failure/Error: expect(draw.size).to eq(10)

       expected: 10
            got: 6

       (compared using ==)
     # ./spec/mega_lotto_spec.rb:15:in `block (3 levels) in &lt;top (required)&gt;'

Finished in 0.00168 seconds
1 example, 1 failure</code></pre></figure>


<p>We still have the same failures from before, but it’s because we didn’t change the <code>MegaLotto::Drawing</code> to actually <em>use</em> the new configuration class. Since we have this awesome new class, let’s make use of it in <code>MegaLotto::Drawing</code>:</p>

<figure class='code'><pre><code>module MegaLotto
  class Drawing
    def draw
      MegaLotto.configuration.drawing_count.times.map { single_draw }
    end

    private

    def single_draw
      rand(0...60)
    end
  end
end</code></pre></figure>


<p>Running the specs for the drawing class gives us the following output:</p>

<figure class='code'><pre><code>MegaLotto::Drawing
  #draw
    each element is less than 60 (FAILED - 1)
    each element is an integer (FAILED - 2)
    returns an array (FAILED - 3)
    using the default drawing count
      returns an array with 6 elements (FAILED - 4)

Failures:

  1) MegaLotto::Drawing#draw each element is less than 60
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `configuration` for MegaLotto:Module
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:19

  2) MegaLotto::Drawing#draw each element is an integer
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `configuration` for MegaLotto:Module
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:13

  3) MegaLotto::Drawing#draw returns an array
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `configuration` for MegaLotto:Module
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:9

  4) MegaLotto::Drawing#draw using the default
      drawing count returns an array with 6 elements
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `configuration` for MegaLotto:Module
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:26

Finished in 0.00219 seconds
4 examples, 4 failures</code></pre></figure>


<p>Well…I guess it’s clear that it doesn’t have a <code>configuration</code> accessor, huh? Let’s add it to <code>lib/mega_lotto.rb</code>:</p>

<figure class='code'><pre><code>module MegaLotto
  class &lt;&lt; self
    attr_accessor :configuration
  end

  def self.configure
  end
end
</code></pre></figure>


<p>and our specs:</p>

<figure class='code'><pre><code>MegaLotto::Drawing
  #draw
    each element is less than 60 (FAILED - 1)
    each element is an integer (FAILED - 2)
    returns an array (FAILED - 3)
    using the default drawing count
      returns an array with 6 elements (FAILED - 4)

Failures:

  1) MegaLotto::Drawing#draw each element is less than 60
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `drawing_count` for nil:NilClass
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:19

  2) MegaLotto::Drawing#draw each element is an integer
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `drawing_count` for nil:NilClass
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:13

  3) MegaLotto::Drawing#draw returns an array
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `drawing_count` for nil:NilClass
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:9

  4) MegaLotto::Drawing#draw using the default
      drawing count returns an array with 6 elements
     Failure/Error: let(:draw) { MegaLotto::Drawing.new.draw }
     NoMethodError:
       undefined method `drawing_count` for nil:NilClass
     # ./lib/mega_lotto/drawing.rb:4:in `draw'
     # ./spec/mega_lotto/drawing_spec.rb:6
     # ./spec/mega_lotto/drawing_spec.rb:26

Finished in 0.00146 seconds
4 examples, 4 failures
</code></pre></figure>


<p>A different message this time, related to the fact that the configuration accessor has no <code>#drawing_count</code> method. This makes sense because we don’t actually return anything from <code>#configuration</code>. Let’s instantiate a new <code>Configuration</code> object and see where that gets us:</p>

<figure class='code'><pre><code>module MegaLotto
  class &lt;&lt; self
    attr_writer :configuration
  end

  def self.configuration
    Configuration.new
  end

  def self.configure
  end
end</code></pre></figure>


<p>Now, the <code>Drawing</code> class specs are passing:</p>

<figure class='code'><pre><code>MegaLotto::Drawing
  #draw
    each element is an integer
    each element is less than 60
    returns an array
    using the default drawing count
      returns an array with 6 elements

Finished in 0.01007 seconds
4 examples, 0 failures</code></pre></figure>


<p>Let’s flip back to the spec file <code>spec/mega_lotto_spec.rb</code> and see where we are:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements (FAILED - 1)

Failures:

  1) MegaLotto#configure returns an array with 10 elements
     Failure/Error: expect(draw.size).to eq(10)

       expected: 10
            got: 6

       (compared using ==)
     # ./spec/mega_lotto_spec.rb:15

Finished in 0.00167 seconds
1 example, 1 failure</code></pre></figure>


<p>Still failing, but at least we have what seems like the pieces setup to implement the global configuration. The <code>.configure</code> methods needs to yield the configuration block to a new instance of the <code>Configuration</code> class. However, we’ll need to memoize the configuration instance, so when the <code>Drawing</code> class accesses <code>#drawing_count</code>, it returns the initial  configuration value:</p>

<figure class='code'><pre><code>module MegaLotto
  class &lt;&lt; self
    attr_writer :configuration
  end

  def self.configuration
    @configuration ||= Configuration.new
  end

  def self.configure
    yield(configuration)
  end
end</code></pre></figure>


<p><em>Note: it’s important to return the class instance variable from <code>.configuration</code> and check if that is set rather than the reader method, otherwise it’d get stuck in a loop and never return.</em></p>

<p>Running our specs again, we see that we’re green:</p>

<figure class='code'><pre><code>MegaLotto
  #configure
    returns an array with 10 elements

Finished in 0.00168 seconds
1 example, 0 failures</code></pre></figure>


<p>For the sake of sanity, let’s run the whole suite to make sure everything is covered:</p>

<figure class='code'><pre><code>$ rake
.......

Finished in 0.00688 seconds
7 examples, 0 failures</code></pre></figure>


<p>…and we’re good!</p>

<h2>Implementations in the Wild</h2>

<p>The <a href="https://github.com/carrierwaveuploader/carrierwave#configuring-carrierwave">CarrierWave gem</a> is a popular choice to support avatar uploading. The author(s) realized that not everyone would want to store upload assets on the local system, so they offered the functionality to support Amazon S3 and other similar block storage services. In order to set this value, you’d use a <a href="https://github.com/carrierwaveuploader/carrierwave#configuring-carrierwave">configure block almost identical to the one we wrote above</a>.</p>

<p>Thoughtbot wrote a <a href="http://robots.thoughtbot.com/mygem-configure-block">great article about the configuration implementation</a> in their <a href="https://github.com/thoughtbot/clearance">Clearance gem</a>. It’s worth reading even if you don’t plan to use Clearance.</p>

<h2>Summary</h2>

<p>Keeping gems configurable means balancing your use case with the use cases of others. The more flexibility you offer to users of your gem, the more users will find value in your work. However, there’s a point when offering too much configuration can make the internals of a gem unnecessarily complicated. As you probably know, Ruby is a language full of conventions and it’s best to provide reasonable defaults and only adapt if the need arises.</p>

<p>One approach to balance complexity is to create a system where users can write their own middleware to modify the behavior of the default system. Mike Perham created a <a href="https://github.com/mperham/sidekiq/wiki/Middleware">middleware system for Sidekiq</a> allowing users to add functionality as they wish. Doing so doesn’t require the gem to change at all when unique use cases arise. The implementation of such system is beyond the scope of this book. However, if you want to learn more, <a href="https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/middleware/chain.rb">Sidekiq’s implementation</a> is a great place to start.</p>

<p><em>This is one of 3 posts leading up the the launch of my
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=sucker-punch"><strong>Build a Ruby Gem book</strong></a>
on <strong>Thursday, March 27</strong>! Sign up below to receive a <strong>20% discount coupon</strong> when the book launches.</em></p>

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Ruby Gem Configuration Patterns" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Wrote the Sucker Punch Gem]]></title>
    <link href="http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem/"/>
    <updated>2014-03-13T13:56:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/why-i-wrote-the-sucker-punch-gem</id>
    <content type="html"><![CDATA[<p><em>This is one of 3 posts leading up the the launch of my
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=sucker-punch"><strong>Build a Ruby Gem book</strong></a>
on <strong>Thursday, March 27</strong>! Sign up below to receive a <strong>20% discount coupon</strong> when the book launches.</em></p>

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Why I Wrote the Sucker Punch Gem" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>


<p>One of the simplest and most common application of background processing is sending emails outside of a web
request. And while background processing is pretty common, most existing Ruby background processing libraries require an additional process to execute these jobs, resulting in increased infrastructure costs.</p>

<p>At the time, I was working on an application hosted on Heroku, and the cost of an additional dyno ($35/month) wasn’t justified. The background jobs did very little more than send emails out of band. To me, the traditional solutions seemed like overkill. And with this, the idea of <a href="https://github.com/brandonhilkert/sucker_punch">sucker_punch</a> was born&hellip;</p>

<!--more-->


<h2>Ruby Background Processing Libraries</h2>

<p>Until I had heard of <a href="http://sidekiq.org/">Sidekiq</a>, <a href="https://github.com/collectiveidea/delayed_job/tree/master">delayed_job</a> and <a href="https://github.com/resque/resque">Resque</a> were the standard options for processing background jobs in Ruby. I&rsquo;ve used both and believe each has a great use case.</p>

<p>In my experience, it&rsquo;s easiest to start with delayed_job if you need background processing in your application. If and when the DB becomes your bottleneck, it&rsquo;s time to move on. Redis is a dependency of both Resque and Sidekiq, which increases the complexity and infrastructure maintenance, however, with <a href="https://addons.heroku.com/?q=redis">Heroku&rsquo;s hosted Redis
Add-ons</a>, this dependency is much less of a pain.</p>

<h2>My work on Sidekiq</h2>

<p>I previously wrote about my my <a href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/">open source contributions</a> and how I got started. I had spent the previous several
months contributing to Sidekiq and learning more about concurrency patterns in Ruby.</p>

<p>Sidekiq is multi-threaded, which is the reason a single Sidekiq process is <a href="https://github.com/mperham/sidekiq/wiki/Testimonials">more
efficient</a> than a library like Resque. Although, nothing in life is free &ndash; care must be taken to ensure your jobs are thread-safe. A helpful <a href="https://github.com/mperham/sidekiq/wiki/Best-Practices">guide to writing thread-safe code</a> can be found on the Sidekiq wiki.</p>

<h2>Use Case</h2>

<p>I was working on <a href="http://defriendnotifierapp.com/">Defriend Notifier</a> and needed to notify users via email when their Facebook friend list changed. Using Sidekiq or any of the alternatives mentioned above certainly would’ve worked. In fact, the application originally used Sidekiq and functioned perfectly. However, as time went on, I decided the extra cost of the worker wasn’t justified, especially given that the application didn’t produce any revenue outside of advertising (very little…).</p>

<p>At the time, the only background processing library that didn’t require an additional background process was
<a href="https://github.com/mperham/girl_friday">girl_friday</a>, also written by <a href="https://twitter.com/mperham">Mike
Perham</a>, author of Sidekiq. While this solution worked for awhile, I found the syntax to be slightly non-intuitive and it felt a little dirty to pass around a global variable within the application
to manage a single job queue. I also experienced some memory leaks on Heroku as a result of switching to
girl_friday, but to be fair, I didn&rsquo;t spend much time determining the root cause. <em>Disclaimer: It very likely could’ve been due to code that I wrote</em>.</p>

<h2>Enter Celluloid</h2>

<p><a href="https://github.com/celluloid/celluloid">Celluloid</a> describes itself as an actor-based concurrent object
framework for Ruby. Celluloid is the guts behind Sidekiq and the reason why the multi-threaded Sidekiq code is so readable. Celluloid abstracts away the details of concurrency so your code doesn&rsquo;t have to worry about manually managing thread synchronization and object message queuing.</p>

<h2>Sucker Punch is born</h2>

<p>girl_friday was written several years ago — before Celluloid was created. Realizing the power of Celluloid,
I figured there was an opportunity for a new library that behaved like girl_friday, but utilized
Celluloid&rsquo;s more reliable multi-threading capabilities. And because Celluloid handles so much of the complexity, the gem itself would be relatively simple — really a DSL around enqueuing jobs to a <a href="https://github.com/celluloid/celluloid/wiki/Pools">Celluloid Pool</a>.</p>

<p>I <a href="https://twitter.com/brandonhilkert/status/292630123981729793">posed the question to Mike Perham</a> and he confirmed my suspicions.</p>

<p><img class="center" src="http://brandonhilkert.com/images/sucker-punch-tweet.png" title="&#34;Sucker Punch Tweet&#34;" alt="&#34;Sucker Punch Tweet&#34;"></p>

<p>Fortunately, Celluloid had all of the functionality needed for background queues already built-in. While the
functionality was there, the usage syntax was awkward.</p>

<p>I spent the next few days creating a DSL around the Celluloid internals, thus making it feel more specific to
background queues.</p>

<p>Here’s the result of a typical job class:</p>

<pre><code>class LogJob
  include SuckerPunch::Job

  def perform(event)
    # do some other stuff to
    # record the event in the background
    puts "#{event} just happened"
  end
end
</code></pre>

<p>I deployed my sucker_punch-converted application code to production and gave it a week or so before I declared it a success. Once I realized sucker_punch was going to be a maintainable method for processing background jobs in a single web process, I added additional niceties like logging and queue configuration details that may be valuable for other use cases.</p>

<p>Have you tried <a href="https://github.com/brandonhilkert/sucker_punch">sucker_punch</a> yet? If so, I&rsquo;d love to know how it went and what you used it for&hellip;</p>

<p><em>This is one of 3 posts leading up the the launch of my
<a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=sucker-punch"><strong>Build a Ruby Gem book</strong></a>
on <strong>Thursday, March 27</strong>! Sign up below to receive a <strong>20% discount coupon</strong> when the book launches.</em></p>

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Why I Wrote the Sucker Punch Gem" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Technical Review]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-technical-review/"/>
    <updated>2014-03-04T17:43:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-technical-review</id>
    <content type="html"><![CDATA[<p>Greetings from a now less snowy Eastern USA!</p>

<p>The past few weeks have seemed like one big snow storm. We haven’t had many days above freezing and spent very little time outside (voluntarily at least). I’m sure those living in colder climates are probably saying “cry me a river…” right now. On the bright side, our extended home stays have given me more time to write.</p>

<!--more-->


<p><img class="center" src="http://brandonhilkert.com/images/snow.jpg" title="&#34;West Chester Snow&#34;" alt="&#34;West Chester Snow&#34;"></p>

<p>Since the last time, I made some serious progress…</p>

<ol>
<li><p><strong>The chapter list is finalized</strong> &ndash; I’m thankful for all the feedback you provided about the chapter list. It really helped me determine the more important topics and make sure they were well covered.</p></li>
<li><p><strong>Content is done</strong> &ndash; Snow days inside will do that. I made a big push to strengthen the weaker areas where there was overwhelming interest.</p></li>
<li><p><strong>Grammatical editing is done</strong> &ndash; I’m lucky to be surrounded by really supportive people that have both the skill and interest to help edit. They pitched in and we knocked it out!</p>

<p> <img class="center" src="http://brandonhilkert.com/images/editing.jpg" title="&#34;Build a Ruby Gem Editing&#34;" alt="&#34;Build a Ruby Gem Editing&#34;"></p></li>
<li><p><strong>Technical review is underway</strong> &ndash; Again, I can’t stress how lucky I feel that people I respect and look up to in the Ruby community volunteered their free time to review the book. I suspect it’ll be another week or 2 before the final changes are sorted out, but never the less, technical review is well underway.</p></li>
<li><p><strong><a href="http://www.mikeperham.com/">Mike Perham</a> is writing a foreword</strong> &ndash; Mike is someone I greatly respect and helped me navigate the open source eco-system when I first started contributing to his <a href="http://sidekiq.org/">Sidekiq</a> project. He’s been contributing to OSS far longer than Sidekiq and the Ruby community is lucky to have him. He’s written a beautifully succinct opening for the book as it relates to developing open source software. If reading his foreword doesn’t motivate to start contributing, I don’t now what will.</p></li>
</ol>


<p>Specifics about the launch date haven’t been determined, but <strong>the book will definitely launch in late March</strong>. I plan to be in touch with a <strong>sample chapter and coupon code</strong>, as promised, when the time gets closer.</p>

<p>Looking back on the items mentioned above, I’m really excited to be nearing the home stretch and finally get it in to your hands.</p>

<p>Hope you had a great past couple of weeks. Talk to you soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding the RAILS_CACHE_ID Environment Variable]]></title>
    <link href="http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable/"/>
    <updated>2014-02-19T07:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/understanding-the-rails-cache-id-environment-variable</id>
    <content type="html"><![CDATA[<p>Last week, I was looking through my Twitter stream and came across a tweet that referenced <code>ENV[“RAILS_CACHE_ID”]</code>. I was unfamiliar with this environment variable and made a note to learn more.</p>

<p>Rails 4 has made a discernible effort to improve view rendering performance by what they’re calling <a href="http://signalvnoise.com/posts/3690-the-performance-impact-of-russian-doll-caching">russian doll caching</a>. Prior to this, view caching was simple in syntax, but realistically more complicated when cached partials needed busting on subsequent releases.</p>

<!--more-->


<p>I didn’t know if this environmental variable had anything to do with Rails 4 caching, so I went digging…</p>

<p>The first thing I did was <code>git clone</code> the Rails source code and look for that variable. Outside of the documentation and tests, it showed up in one place, <code>activesupport/lib/active_support/cache.rb</code>:</p>

<pre><code># Expands out the +key+ argument into a key that can be used for the
# cache store. Optionally accepts a namespace, and all keys will be
# scoped within that namespace.
#
# If the +key+ argument provided is an array, or responds to +to_a+, then
# each of elements in the array will be turned into parameters/keys and
# concatenated into a single key. For example:
#
#   expand_cache_key([:foo, :bar])               # =&gt; "foo/bar"
#   expand_cache_key([:foo, :bar], "namespace")  # =&gt; "namespace/foo/bar"
#
# The +key+ argument can also respond to +cache_key+ or +to_param+.

def expand_cache_key(key, namespace = nil)
  expanded_cache_key = namespace ? "#{namespace}/" : ""

  if prefix = ENV["RAILS_CACHE_ID"] || ENV["RAILS_APP_VERSION"]
    expanded_cache_key &lt;&lt; "#{prefix}/"
  end

  expanded_cache_key &lt;&lt; retrieve_cache_key(key)
  expanded_cache_key
end
</code></pre>

<p>The comments preceding the method do a good job telling the whole story. The <code>expanded_cache_key</code> variable is an array built up from the <code>key</code> argument. The <code>RAILS_CACHE_ID</code> environment variable is prefaced to this array, operating similar to a namespace.</p>

<p>With these assumptions in mind, let’s see if we prove for sure. I’ll generate a new Rails 4 app:</p>

<pre><code>$ rails new cache_test
</code></pre>

<p>We’ll be inspecting model objects, so let’s generate a fake blog model:</p>

<pre><code>$ rails g scaffold post title content:text
</code></pre>

<p>Migrate the database to get current:</p>

<pre><code>$ bin/rake db:migrate
</code></pre>

<p>I’ll create a new <code>Post</code> and take a look at the default <code>cache_key</code>:</p>

<pre><code>$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Let’s set the <code>RAILS_CACHE_ID</code> and look at the <code>cache_key</code> of this record again:</p>

<pre><code>$ export RAILS_CACHE_ID=octopus
$ rails c
&gt; p = Post.create
&gt; p.cache_key # =&gt; "posts/1-20140206201702645196000"
</code></pre>

<p>Hmmm…same thing. Referring back to the Rails course code above, it turns out that not all cache writes use the <code>expand_cache_key</code> method. Searching around the Rails code for <code>expand_cache_key</code>, we find the following results:</p>

<pre><code>ActionController::Caching::Fragments#fragment_cache_key
ActionDispatch::Http::Cache::Response#etag=
</code></pre>

<p>From the looks of it, it only applies to fragment caching and manually setting ETAG headers for HTTP responses, so let’s dig in to those.</p>

<h2>Fragment Caching</h2>

<p>I can cache the post fragment by wrapping it in a <code>cache</code> block:</p>

<pre><code>&lt;% app/views/posts/show.html.erb %&gt;
&lt;%= cache(@post) do %&gt;
  &lt;p&gt;
    &lt;strong&gt;Title:&lt;/strong&gt;
    &lt;%= @post.title %&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Content:&lt;/strong&gt;
    &lt;%= @post.content %&gt;
  &lt;/p&gt;
&lt;% end %&gt;
</code></pre>

<p>Run the server and make a request to <code>http://localhost:3000/posts/1</code>.</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:16:04 -0500
  ActiveRecord::SchemaMigration Load (0.2ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.2ms)
Write fragment views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.6ms)
  Rendered posts/show.html.erb within layouts/application (11.0ms)
</code></pre>

<p><em>Note: Make sure <code>config.action_controller.perform_caching</code> is set to <code>true</code> in <code>config/environments/development.rb</code> (it’s <code>false</code> by default), otherwise caching is disabled.</em></p>

<p>There it is! It wrote out the key <code>views/octopus/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code>. Let’s change the environmental variable and see if it adjusts accordingly:</p>

<pre><code>$ export RAILS_CACHE_ID=shark
</code></pre>

<p>Restart the Rails server and again, request <code>http://localhost:3000/posts/1</code>:</p>

<pre><code>Started GET "/posts/1" for 127.0.0.1 at 2014-02-06 16:35:33 -0500
  ActiveRecord::SchemaMigration Load (0.1ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by PostsController#show as HTML
  Parameters: {"id"=&gt;"1"}
  Post Load (0.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1  [["id", "1"]]
Cache digest for posts/show.html: c39e6bde261c006ffe9ddf27fb9d5318
Read fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (0.3ms)
Write fragment views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318 (1.5ms)
  Rendered posts/show.html.erb within layouts/application (11.1ms)
Completed 200 OK in 82ms (Views: 62.7ms | ActiveRecord: 0.5ms)
</code></pre>

<p>Sure enough…the key <code>views/shark/posts/1-20140206210721854446000/c39e6bde261c006ffe9ddf27fb9d5318</code> was used this time.</p>

<h2>Etags</h2>

<p>Etags are a value added to the HTTP headers that allow a browser to determine whether the content for a particular piece of content should be refreshed or not. If not, the server returns a <code>304</code> HTTP code and the browser uses the cached response from a previous request.</p>

<p>Rails provides two controller helper methods to help determine whether the content should be refreshed: <code>fresh_when</code> and <code>stale?</code>. The <a href="http://guides.rubyonrails.org/caching_with_rails.html#conditional-get-support">Rails guides</a> provide a decent explanation of these methods and when to use them.</p>

<p>Jumping in to the <code>PostsController</code>, let’s use the <code>fresh_when</code> method in the <code>show</code> action:</p>

<pre><code>class PostsController &lt; ApplicationController

  def show
    @post = Post.find(params[:id])
    fresh_when(@post)
  end

end
</code></pre>

<p>Now, when we request the <code>show</code> page for that post, we get an Etag back in the header response of <code>9c754ae292618570ec43cae8e03a0b13</code>. That doesn’t look very familiar, huh?</p>

<p>It turns out that the Etag is generated using the following method:</p>

<pre><code>Digest::MD5.hexadigest(key)
</code></pre>

<p>But the key is more than just the <code>cache_key</code> of the <code>@post</code>. If we refer back to where the <code>expand_cache_key</code> method was used, we see that when the <code>etag</code> attribute is set on the response, the key is expanded using the <code>ActiveSupport::Cache#expand_cache_key</code> method we looked at above:</p>

<pre><code> def etag=(etag)
   key = ActiveSupport::Cache.expand_cache_key(etag)
   @etag = self[ETAG] = %("#{Digest::MD5.hexdigest(key)}")
 end
</code></pre>

<p>Let’s stop the server and reset the <code>ENV[“RAILS_CACHE_ID”]</code>:</p>

<pre><code>$ export RAILS_CACHE_ID=whale
</code></pre>

<p>Running the same request, we get an Etag of <code>b389da68ca1b25986edecf349fcf63e6</code>. So as you can see, by updating <code>ENV[“RAILS_CACHE_ID”]</code> alone, we get a different Etag in the response without changing the <code>post</code> object itself, which means we can invalidate our browser cache by updating this environmental variable.</p>

<p>I, personally, deploy to Heroku most of the time and it’d be nice to be able take advantage of browser caching in this manner, but also know when a new deploy is released. <a href="http://ninjasandrobots.com/rails-caching-a-problem-with-etags-and-a-solution">This article</a> describes a solution that integrates Heroku’s numbered releases.</p>

<p>However, we know that Heroku uses git to get the source code of the appellation to the application container, so why not leverage git commit IDs for <code>ENV[“RAILS_CACHE_ID”]</code>.</p>

<p><code>git log</code> is a command to look at….well, git logs!. With a few additional options, we can get a shortened version of the commit SHA:</p>

<pre><code>$ git log --pretty=format:%h -n1
40ad584
</code></pre>

<p><strong>Combining the git commit SHA gives us the perfect opportunity to invalidate browser cache</strong>. If the Etag is different because a different git commit SHA is the most recent on the server, we know there’s a potential the HTML rendered and cached in the browser could be outdated. We can implement this by setting the ENV variable in <code>config/application.rb</code>:</p>

<pre><code>ENV['RAILS_CACHE_ID'] = `git log --pretty=format:%h -n1`.strip
</code></pre>

<p>Now, when a request is made we get an Etag of <code>6d80b6397347f8de1b8718e7fd9f90e1</code>. And if we add an empty commit and re-request the post, we get an Etag of <code>6dcc66ddf83613dd0c46406a1e983b38</code>.</p>

<p>Hooray! <strong>A browser caching strategy for HTML content that’s dependent on the git release</strong>.</p>

<h2>Summary</h2>

<p>Before Rails 4, it was common to use a version number in the view <code>cache</code> method so that when you changed a encompassed view template, the cache would bust and the changes would be shown. However, now that <code>cache_digests</code> are part of Rails 4, the contents of the template block is evaluated and an MD5 string is created from the contents (the latter part of the cache key &ndash; <code>c39e6bde261c006ffe9ddf27fb9d5318</code> in the last example). This ensures that whenever the contents of the view template are changed, the cache is busted and the new template is properly stored and rendered.</p>

<p>Given the <code>cache_key</code> of fragment caching is dependent on the contents of the template, I have trouble finding value in setting the <code>RAILS_CACHE_ID</code> environmental variable for fragment caching alone.</p>

<p>Alternatively, the use case for using <code>ENV[“RAILS_CACHE_ID”]</code> to control browser caching can be a tremendous asset when the content of the body response is not considered. Caching strategies can be difficult to reason about and hopefully this gives you another tool in the toolbox to make parts of your Rails applications more performant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Book Update]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-book-update/"/>
    <updated>2014-02-15T08:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-book-update</id>
    <content type="html"><![CDATA[<p><strong>This past weekend I added ~ 6,000 words</strong> to the existing content. I&rsquo;m really excited to be nearing the end of the road. I&rsquo;ve gotten some great feedback since I started and wanted to gather a bit more to finalize the chapter list.</p>

<p>Here&rsquo;s the chapter list I&rsquo;m working with&nbsp;so far:</p>

<!--more-->


<ol>
<li>Introduction What is a gem? Why build a gem?)</li>
<li>File structure of a gem</li>
<li>Testing/debugging setup</li>
<li>Code implementation of of example gem</li>
<li>Versioning</li>
<li>Release (how to release? and when to release?)</li>
<li>Changelog (What is it? and what to include?)</li>
<li>Responsibility of a gem author</li>
<li>Loading additional libraries within a gem</li>
<li>Command-line utilities</li>
<li>Configuration patterns</li>
<li>Rails hooks</li>
<li>Rails view helpers</li>
<li>Rails controller includes</li>
<li>Rails Model Includes</li>
<li>Rails rake tasks</li>
<li>Rails engines (when/why to use?)</li>
<li>Open source management</li>
<li>Summary</li>
</ol>


<p>Phew! That&rsquo;s a lot&hellip;so with that in mind, <strong>have I covered everything?</strong></p>

<p>Please <strong>leave a comment</strong> if you&rsquo;re interested in reading about something I haven&rsquo;t mentioned.</p>

<p>One of the things I&rsquo;m most excited about is being able to use real-word examples for each chapter. I learn by reading and writing my own code and really appreciate when a book/post does the same. I&rsquo;ve tried to do that at every step of the way. Hopefully this will make the book more valuable to you.</p>

<p>I will be in touch in the <strong>next few weeks with a sample chapter</strong> or two, along with some feature blog posts.</p>

<p>If you&rsquo;re interested in receiving updates about the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary"><em>Build a Ruby Gem</em>
book</a>,
enter your email below:</p>

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="Build a Ruby Gem Book Update" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>


<p>Members of this list will also receive a <strong>20% discount coupon</strong> when the book
launches!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Page Specific Javascript in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/page-specific-javascript-in-rails/"/>
    <updated>2014-02-04T20:51:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/page-specific-javascript-in-rails</id>
    <content type="html"><![CDATA[<p>The asset pipeline has made including javascript in Rails applications a breeze. Without any additional changes, the code included in your app is executed on every page. However, with a combination of CSS class scopes and a jQuery plugin, you can isolate certain javascript code to only run on specific pages.</p>

<h2>The Problem</h2>

<p>Imagine you have 2 pages in your application (landing and contact) and need an alert box to show up on the contact page only. How would you do it?</p>

<!--more-->


<p>Traditionally, if it&rsquo;s something small, you might bite the bullet and just include it in the view template:</p>

<pre><code>&lt;% # app/views/page/contact.html.erb %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;

&lt;%= javascript_tag do %&gt;
  alert("My example alert box.");
&lt;% end %&gt;
</code></pre>

<p>To me, this always felt dirty. Mixing UI and javascript concerns in an HTML template is easy to forget. Imagine your app has matured and want to change the message of the alert box. Rather than find an associated javascript file (the logical path), you&rsquo;re forced to dig through HTML to find the alert box text.</p>

<p>Another solution is to insert our javascript in to its own file:</p>

<pre><code>// app/assets/javascripts/alert.js

alert("My example alert box.");
</code></pre>

<p>And including this file only in the view we want it to execute:</p>

<pre><code>&lt;%# app/views/page/contact.html.erb %&gt;

&lt;%= javascript_include_tag "alert" %&gt;

&lt;h1&gt;Contact&lt;/h1&gt;
&lt;p&gt;This is the contact page&lt;/p&gt;
</code></pre>

<p>And don&rsquo;t forget to include your new file in the list of files to be compiled:</p>

<pre><code># config/environments/production.rb

config.assets.precompile += %w( alert.js )
</code></pre>

<p>Like the previous solution, it too, mixes the concerns of HTML and javascript, but introduces a new problem &ndash; this javascript file is included and download separately from the rest of the app&rsquo;s asset. This causes the browser to make another request to the server, thus increasing the page load time and in turn, causing bad bad user pain (Ok, maybe not that bad…). But it’s still not ideal.</p>

<h2>The Solution</h2>

<p>The solution I&rsquo;ve found the most elegant requires adding CSS classes to the layout&rsquo;s body tag and using the <a href="https://github.com/Verba/jquery-readyselector">jquery-readyselector plugin</a>.</p>

<p>First, in order to scope the pages through CSS selectors, let&rsquo;s add some classes to our layout:</p>

<pre><code>&lt;%# app/views/layouts/application.html.erb %&gt;

&lt;body class="&lt;%= controller_name %&gt; &lt;%= action_name %&gt;"&gt;
  &lt;%= yield %&gt;
&lt;/body&gt;
</code></pre>

<p>Assuming your <code>contact</code> page action was inside a controller named <code>PagesController</code>, the rendered result would be the following:</p>

<pre><code>&lt;body class="pages contact"&gt;
  ...
&lt;/body&gt;
</code></pre>

<p>Add <a href="https://raw.github.com/Verba/jquery-readyselector/master/jquery.readyselector.js">this small bit of javavascript code</a> to a new file: <code>vendor/assets/javascripts/jquery-readyselector.js</code>.</p>

<p>Include the new plugin in the <code>application.js</code> manifest file:</p>

<pre><code>...
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require jquery-readyselector
//= require_tree .
</code></pre>

<p>Like before, let&rsquo;s put the javascript code in an isolated asset file, but scope it to the page:</p>

<pre><code>// app/assets/javascripts/alert.js.coffee

$(".pages.contact").ready -&gt;
  alert "My example alert box."
</code></pre>

<p>Because this file is picked up with the <code>//= require_tree .</code> line in the <code>application.js</code> manifest, there’s no additional step to load the asset. And that&rsquo;s it! Your <em>fancy</em> alert box will now only run on your contact page.</p>

<p>Let me what you think of this solution and if you’ve come across this issue before. I&rsquo;d love to hear about other solutions!</p>

<p><em>Note: In order for this solution to work with Turbolinks in Rails 4, I had to drag in the <a href="https://github.com/kossnocorp/jquery.turbolinks">jquery.turbolinks plugin</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relative Timestamps in Rails]]></title>
    <link href="http://brandonhilkert.com/blog/relative-timestamps-in-rails/"/>
    <updated>2014-01-13T07:01:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/relative-timestamps-in-rails</id>
    <content type="html"><![CDATA[<p>Facebook’s news feed popularized the relative timestamp format of &ldquo;X hours ago&rdquo;. For good reason too&hellip;why print an absolute timestamp so that people have to do the relative calculation in their head? It’s one less step for the user, and to be fair, pretty easy to implement.</p>

<h2>Rails helpers to the rescue</h2>

<p>Rails has a view helper aptly named <code>time_ago_in_words</code>. If you use the
<code>created_at</code> attribute from a record, you could easily reference a relative timestamp from a corresponding view:</p>

<pre><code># app/views/posts/show.html.erb

Posted: &lt;%= time_ago_in_words(post.created_at) %&gt; ago
</code></pre>

<p>That’s great! But not enough…what happens when a user stays on the page for 10 min. and the latest post was no longer posted &ldquo;1 minute ago”? Asking them to refresh the page every 10 minutes is no longer an acceptable answer.</p>

<!--more-->


<p>Additionally, Rails 4 encourages the use of <a href="http://edgeguides.rubyonrails.org/caching_with_rails.html">Russian doll caching</a>, so if you cached record and use <code>time_ago_in_words</code>, the relative time of the post would never change. No bueno!</p>

<p>Fortunately, we can do better…</p>

<h2>The Solution</h2>

<p><a href="http://timeago.yarp.com/">Timeago.js</a> is a <a href="http://jquery.com/">jQuery</a> plugin that converts timestamps to a relative format. They also boast the following on their website:</p>

<ul>
<li><p>Avoid timestamps dated &ldquo;1 minute ago&rdquo; even though the page was opened 10 minutes ago; timeago refreshes automatically</p></li>
<li><p>You can take full advantage of page caching in your web applications, because the timestamps aren&rsquo;t calculated on the server</p></li>
<li><p>You get to use microformats like the cool kids</p></li>
</ul>


<h2>The Implementation</h2>

<ol>
<li><p>Download the plugin and place it in <code>vendor/javascripts/timeago.jquery.js</code></p></li>
<li><p>Add the following line to your <code>application.js</code> manifest file, so it&rsquo;s picked up by the <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset pipeline</a>:</p>

<pre><code> //= require jquery.timeago
</code></pre></li>
<li><p>Create a helper that you can use from your views that will do the dirty work for you:</p>

<pre><code> # app/helpers/time.rb
 module TimeHelper
   def timeago(time, options = {})
     options[:class] ||= "timeago"
     content_tag(
       :time,
       time.to_s,
       options.merge(datetime: time.getutc.iso8601)
     ) if time
   end
 end
</code></pre></li>
<li><p>Reference the new helper method from your view &ndash; passing in the time attribute of the model:</p>

<pre><code> # app/views/posts/show.html.erb
 Posted: &lt;%= timeago(post.created_at) %&gt;
</code></pre>

<p> This generates the following HTML tag:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"&gt;&lt;/time&gt;
</code></pre>

<p> Now that <code>timeago.js</code> is loaded and you have the right HTML tags on the page, you need to invoke the plugin and let it do its thing.</p></li>
<li><p>Add the following to the bottom of your layout and reload the page:</p>

<pre><code> # app/views/layouts/application.html.erb
 &lt;body&gt;
   &lt;%= javascript_tag do %&gt;
     $(function() {
       $("time.timeago").timeago();
     });
   &lt;% end %&gt;
 &lt;/body&gt;
</code></pre>

<p> Once the <code>timeago()</code> function is called, the timestamp above will look like:</p>

<pre><code> &lt;time class="timeago" datetime="2013-11-08T20:05:37Z"
 title="2013-11-08 20:05:37 UTC"&gt;2 days ago&lt;/time&gt;
</code></pre></li>
</ol>


<p>And that&rsquo;s it&hellip;sit on the page long enough and watch the timestamps increment. You&rsquo;ve now got yourself a solution that is dynamic and allows you to cache the views until the cows come home!</p>

<h2>Summary</h2>

<p>Even though Rails has a simple mechanism for displaying relative timestamps in views, moving this functionality to the client side makes sense.</p>

<p>Another benefit you get is timezone interpretation. Even though we print the UTC time in the HTML tag, the plugin will detect the local timezone from the browser and adjust accordingly. In my experience, timezones are a huge pain and the more you can offload them to a solution like this, the better.</p>

<p>Happy time-stamping!</p>

<p><em>Note: Since writing this, I discovered the <a href="https://github.com/37signals/local_time">local_time gem</a> from 37Signals. They’ve been a big advocate of moving relative timestamp calculation to the client-side. Their gem uses <a href="http://momentjs.com/">moment.js</a> instead of timago.js and it includes <a href="https://github.com/37signals/local_time/blob/master/app/assets/javascripts/local_time.js.coffee#L157">code to update the timestamps if Turbolinks is being used</a>. It’s worth checking out if you do this on a regular basis or use the moment.js library for other reasons.</em></p>

<p>P.S. In my book, <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-com&amp;utm_medium=web&amp;utm_campaign=relative-timestamps-post">Build a Ruby Gem</a>, I cover how to create a Rails engine gem with the above functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Launched an Email Course to 500+ People]]></title>
    <link href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/"/>
    <updated>2014-01-06T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/how-i-launched-an-email-course</id>
    <content type="html"><![CDATA[<p>About a month ago, I joined <a href="http://jfdi.bz/">JFDI.bz</a> &ndash; a community for
solo-founders launching their own thing. Once a month, the group engages in a
<em>Week of Hustle</em> &ndash; a week long sprint to launch something.
I chose to launch an email course on the topic of <a href="http://brandonhilkert.com/courses/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary">building a Ruby
gem</a>.</p>

<!--more-->


<h2>Why <em>Build a Ruby Gem</em>?</h2>

<p>A few years ago, I was building my first Ruby gem and I was left pretty
confused with the process and conventions. After working through my
frustrations, I thought the information I learned could be useful to others.</p>

<p>Honestly, I thought to write an eBook at first, however, the last thing I
wanted was to invest a month or two of my time only to find out people
weren&rsquo;t interested.</p>

<p>An email course was a good medium &ndash; I could cover the basics well enough to get
people through their hangups, while also validating the need for an eBook. I
figured if I got <strong>100-200</strong> people to sign up for the course, I would move
forward with the book.</p>

<h2>Results</h2>

<p>It turns out my marketing efforts were more successful than I anticipated.</p>

<h3>Today, almost 600 people have taken the Build a Ruby Gem email course!</h3>

<h2>Email is King&hellip;still</h2>

<p>Prior to launching this email course, I&rsquo;d read about the value of building an
email list from people like <a href="http://nathanbarry.com/">Nathan Barry</a>, <a href="http://unicornfree.com/">Amy
Hoy</a> and <a href="http://justinjackson.ca/">Justin Jackson</a>.</p>

<p>I&rsquo;d also read countless other posts describing the most common regrets when
launching a new product. Almost all of them included not building an email
list. With that said, it was one of the first things I setup.</p>

<p>I blogged each day about my progress. Each post had a
mailing list subscription form that sent them subsequent daily updates.  Subscriptions
were slow at first, but interest built.  By then end of the week <strong>232</strong> people had
subscribed. And the day the course went live, I was able to to convert <strong>115</strong>
(~50%) of them.</p>

<p>The people subscribed were <strong>EXACTLY</strong> my target audience so it&rsquo;s no surprise
conversion was high.</p>

<h2>Finding Your Target Audience</h2>

<p>Fortunately for me, my target audience was Ruby developers and they hang out
online (surprise, surprise). But where online&hellip;</p>

<p>Let me hit you with something that seems obvious in hindsight:</p>

<h3>Marketing is easy when you build a product for an audience you&rsquo;re already part of.</h3>

<p>This was something I&rsquo;d <a href="http://unicornfree.com/2013/how-do-you-create-a-product-people-want-to-buy">read over the past few
months</a>,
but not seen its value until now.</p>

<p>The email course is for <strong>Ruby developers</strong>, I&rsquo;m a <strong>Ruby Developer</strong>, so the
question becomes&hellip;.<em>where do I hang out online?</em></p>

<p>That question is <strong>easy</strong> to answer &ndash; <a href="http://rubyweekly.com/">Ruby weekly</a>,
<a href="http://www.reddit.com/r/ruby">Reddit</a> and
<a href="http://www.rubyflow.com/">RubyFlow</a>.</p>

<p>And don&rsquo;t you know&hellip;it turns out those 3 sources have been the highest
converting sources since the course launched:</p>

<ol>
<li>Ruby weekly &ndash; 131</li>
<li>RubyFlow &ndash; 65</li>
<li>Reddit &ndash; 62</li>
</ol>


<p>The remaining sources were a combination of direct links, social media and
other technology news aggregation sites (probably mostly stemming from the top
sources above).</p>

<p><em>Note: I&rsquo;ve been reading <a href="http://www.amazon.com/80-20-Sales-Marketing-Definitive/dp/1599185059">80/20 Sales and
Marketing</a>
and the numbers above coincide, almost exactly, to the 80/20 curve. That is,
80% of the conversion came from 20% of the sources.</em></p>

<h2>Twitter Tip</h2>

<p>The last day of the email course has a <em>Summary</em> section thanking people for
taking the course and attempting to get feedback. While I haven&rsquo;t received much
constructive criticism, I dropped this little doozie at the bottom:</p>

<p><img class="center" src="http://brandonhilkert.com/images/email-course/click-to-tweet.png" title="&#34;Build a Ruby Gem Email Course Click To Tweet&#34;" alt="&#34;Build a Ruby Gem Email Course Click To Tweet&#34;"></p>

<p>I&rsquo;d read a post about <a href="http://grinnick.com/posts/how-groove-s-email-copy-makes-their-posts-go-viral?ref=hn">GroveHQ&rsquo;s emails going
viral</a>
and this was something they did in their campaigns.</p>

<p>The link allows people to click and immediately be setup to Tweet the
following:</p>

<p><img class="center" src="http://brandonhilkert.com/images/email-course/course-tweet.png" title="&#34;Build a Ruby Gem Email Course Tweet&#34;" alt="&#34;Build a Ruby Gem Email Course Tweet&#34;"></p>

<p>It&rsquo;s difficult to determine the value of those tweets, but over 10 people have
clicked and tweeted. To me, this was surprising, but valuable.</p>

<p>I&rsquo;ll probably look to make it stand out a bit more to hopefully improve the
click-through.</p>

<h2>In Summary</h2>

<p>I spent a total of <strong>16 hours</strong> creating the <em>Build a Ruby Gem</em> email
course, which has since <strong>validated the need for a book</strong>. While interest
in a free email course doesn&rsquo;t guarantee a book on the same subject will sell, it was
the closet thing I could think to do outside of taking pre-orders.</p>

<p>I&rsquo;ve started writing the <a href="http://brandonhilkert.com/books/build-a-ruby-gem/?utm_source=bh-newsletter&amp;utm_medium=email&amp;utm_campaign=woh-summary"><em>Build a Ruby Gem</em>
book</a>.
If you&rsquo;re interested in receiving updates on my progress, enter your email
below:</p>

<div class="inline-newsletter-form">
  <form action="http://brandonhilkert.us7.list-manage2.com/subscribe/post?u=34ccc3aa2135746d0231c9420&id=3c07d60ff7" method="post" target="_blank" novalidate>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email" required>
    <input type="hidden" name="LOCATION" id="LOCATION" value="How I Launched an Email Course to 500+ People" />
    <input type="hidden" name="PRODUCT" id="PRODUCT" value="book-gem" />
    <input type="submit" value="Send Me a Discount Code" name="subscribe" id="mc-embedded-subscribe" class="button">
  </form>
</div>


<p>Members of this list will also receive a <strong>20% discount coupon</strong> when the book
launches!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be Ambitious]]></title>
    <link href="http://brandonhilkert.com/blog/be-ambitious/"/>
    <updated>2013-12-31T13:04:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/be-ambitious</id>
    <content type="html"><![CDATA[<h2>2013</h2>

<p>On Dec. 31, 2012, I sat around a dinner table with my wife and 4 of our
friends.  Discussing the upcoming New Year, we went around the table and shared
our resolutions. My turn came and I said, &ldquo;<em>I&rsquo;m going to finish an
<a href="http://en.wikipedia.org/wiki/Ironman_Triathlon">Ironman</a></em>&rdquo;.</p>

<p>Up until that point, my longest race of any kind was a half marathon &ndash;
certainly no triathlons. So for me, this was biiiiiiig time. I honestly don&rsquo;t
know if anyone believed what I said that night. I&rsquo;m not even sure I did. But
nonetheless, I had said it out loud in the presence of friends. The same
friends I&rsquo;d later have to explain why I bailed &ndash; <em>if I bailed</em>.</p>

<!--more-->


<p>But I didn&rsquo;t bail. On Sept. 21, I finished the
<a href="http://www.tricolumbia.org/events/?eid=5">ChesapeakeMan</a> in 12 hours and 54
minutes. I spent 3 hours/day, 6 days/week for the prior 30 weeks preparing for
that day. It was easily the longest 30 weeks of my life.</p>

<h2>Accountability</h2>

<p>During the training, there were a few times I seriously considered quitting. In
every one of those moments, I thought back to the scene around that dinner
table on New Year&rsquo;s Eve. I had confidently told 5 other people I was going to
finish an Ironman and I didn&rsquo;t want to have to explain that I quit.</p>

<p>This is accountability&hellip;had I not mentioned by goal that night, the only
person I would&rsquo;ve let down is myself &ndash; that&rsquo;s easy to stomach. But knowing
others had expectations made it close to impossible for me to quit.</p>

<h2>2014</h2>

<p>With an Ironman crossed off my list, here we are, one year later. And rather
than rely on another dinner party resolution sharing session, I&rsquo;m documenting my resolution
here. So here goes&hellip;</p>

<h2>This year I&rsquo;m going to write to <a href="http://brandonhilkert.com/books/build-a-ruby-gem/">write a book</a>.</h2>

<p>I never would&rsquo;ve thought a book would be in my future, but that&rsquo;s what
resolutions are for, right?!?! I also never would&rsquo;ve guessed I&rsquo;d finish an
Ironman, so why not keep the ball rollin&#8217;.</p>

<h2>In Summary</h2>

<p>Do something <strong>ambitious</strong> this year. Don&rsquo;t be the person that plan to lose 20
lbs. and quits going to the gym a week in to it. After my experience this year,
I believe <strong>everyone</strong> is capable of far more than they think.</p>

<p>This could be the year you take that next big step. Whether it&rsquo;s learning a new
language, launching a new product, or finding your dream job. <strong>Tell someone
about it</strong>. I promise you&rsquo;ll second guess quitting.</p>

<p><em>Leave a comment with your ambitious goals for 2014.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flexible Rails Environment Configuration]]></title>
    <link href="http://brandonhilkert.com/blog/flexible-rails-environment-configuration/"/>
    <updated>2013-12-19T18:44:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/flexible-rails-environment-configuration</id>
    <content type="html"><![CDATA[<p>It&rsquo;s hard to write a Rails app without interfacing with an external service or
API. In most cases, these services require a secret token or password. Since
checking passwords in to source control is generally a bad practice, we need a
good way to safely and reliably access these values in code.</p>

<p>I&rsquo;ve tried a few gems that attempt to make this process easier and ultimately
settled on a simpler solution &ndash; the combination of a few lines of code and
<a href="http://en.wikipedia.org/wiki/Environment_variable">ENV variables</a>, which are
accessible whether you manage your own infrastructure or use a
<a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PaaS</a> service like
<a href="https://www.heroku.com">Heroku</a>.</p>

<!--more-->


<h2>The Problem</h2>

<p>In a recent Rails app, I used <a href="http://pusher.com/">Pusher</a> and it requires the
unique URL to be setup in an initializer:</p>

<figure class='code'><pre><code># config/initializers/pusher.rb

Pusher.url = "http://asdfa@api.pusherapp.com"</code></pre></figure>


<p>If I need to set this URL in multiple place &ndash; copying/pasting is not a great
solution because it sets me up for copy/paste errors. It&rsquo;s also a headache to
find all occurrences of the URL when it changes.</p>

<h2>The Solution</h2>

<p>Setup a <a href="http://en.wikipedia.org/wiki/YAML">yaml</a> file similar to this:</p>

<figure class='code'><pre><code># config/application.yml

defaults: &defaults
  PUSHER_URL: http://asdfa@api.pusherapp.com

development:
  &lt;&lt;: *defaults

test:
  &lt;&lt;: *defaults</code></pre></figure>


<p>Add the following to <code>config/application.rb</code> before the Rails application class
is defined:</p>

<figure class='code'><pre><code>if File.exists?(File.expand_path('../application.yml', __FILE__))
  config = YAML.load(File.read(File.expand_path('../application.yml', __FILE__)))
  config.merge! config.fetch(Rails.env, {})
  config.each do |key, value|
    ENV[key] ||= value.to_s unless value.kind_of? Hash
  end
end</code></pre></figure>


<p>Resulting in a <code>config/application.rb</code> that looks something like this:</p>

<figure class='code'><pre><code># config/application.rb

require File.expand_path('../boot', __FILE__)

require 'rails/all'

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(:default, Rails.env)

if File.exists?(File.expand_path('../application.yml', __FILE__))
  config = YAML.load(File.read(File.expand_path('../application.yml', __FILE__)))
  config.merge! config.fetch(Rails.env, {})
  config.each do |key, value|
    ENV[key] ||= value.to_s unless value.kind_of? Hash
  end
end

module NewApp
  class Application &lt; Rails::Application
    # ...
  end
end</code></pre></figure>


<p>The added code first looks for an <code>application.yml</code> file. If it finds one, it
reads in the values for that environment (development, test, production, etc.)
and merges them in to the existing Ruby ENV hash.</p>

<p><em>Note: Since <code>application.yml</code> will typically hold passwords and other secret
keys, it should be added to <code>.gitignore</code> so they don&rsquo;t end up in source
control.</em></p>

<p>Now, when the application is initialized, <code>PUSHER_URL</code> is
available in the ENV hash. This allows me to the update the pusher initializer to:</p>

<figure class='code'><pre><code># config/initializers/pusher.rb

Pusher.url = ENV["PUSHER_URL"]</code></pre></figure>


<p>If I&rsquo;m deploying to Heroku, I need to set the config value using the following
command:</p>

<p><code>heroku config:set PUSHER_URL=http://asdfa@api.pusherapp.com</code></p>

<p>Or if I&rsquo;m deploying to Ubuntu, I can set the ENV variable for all users on the system:</p>

<figure class='code'><pre><code># /etc/environment

...
export PUSHER_URL=http://asdfa@api.pusherapp.com</code></pre></figure>


<p><em>Note: If you choose not to set ENV variables on the host system, you can
easily mimic the development environment and drop the <code>config/application.yml</code>
file on to the system. This is no different than using a <code>database.yml</code> that
most Rails developers are used to.</em></p>

<p>That&rsquo;s it! So with 7 lines of code and a configuration file, you have yourself
an environment configuration setup that&rsquo;s flexible for most deployment
solutions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Email Course - Weekend Update]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/"/>
    <updated>2013-12-09T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update</id>
    <content type="html"><![CDATA[<p>
  <em>I did an <strong>8-day sprint</strong> to launch my <a
  href="http://brandonhilkert.com/courses/build-a-ruby-gem/" target="_blank"><strong>Build a Ruby Gem</strong> email course</a>
  and documented my progress through this series of blog posts.</em>
</p>




<p><p><a href="http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/">Day 2</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3/">Day 3</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/">Day 4</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/">Day 5</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/">Day 6</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/">Weekend Update</a>
<a href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/">Summary</a></p>

<p>Hope you had a great weekend!</p>

<p>Aside from hibernating inside due to the 6 extra inches of snow that wasn&rsquo;t
predicted, I spent some time with the course content this weekend. In efforts
to do a final proofread, I noticed something wasn&rsquo;t quite right. My goal for
this course was to smooth over the conventions of a Ruby gem that go much less
talked about. However, because I naively chose a gem that included Rails
integration as the example, the content ended up being more about Rails than I
had planned.</p>

<p><!--more--></p>

<p>I thought about it for a bit on Saturday and decided it was best to
rewrite the content around a simpler gem example. So that my Sunday!</p>

<p>I thought about how I ended up down this path and realized it&rsquo;s because I
didn&rsquo;t put enough planning in to the actual content. Early on, I sketched our a
very rough outline of the lessons in the course, but never thought about the
examples or which gem to use. I originally picked on of my recent written gems
for Rails and assumed it was simple enough that I could quickly gloss over the
Rails details. But the last thing I wanted was for the Rails topics to cloud
the steps need to build a basic Ruby Gem.</p>

<p>Examples are really hard. I ended up choosing a topic that is probably not
supremely useful in an everyday Ruby application, however, the conventions and
theories apply to any gem.</p>

<p>I do plan to cover Rails integration in a future publication. There are so many
hooks in to the framework when using a Railtie, it almost deserves a separate
course. I did save the removed content, so I&rsquo;ll have to figure out where it&rsquo;s
best presented.</p>

<h2>What I Accomplished This Weekend</h2>

<p>As mentioned above, I rewrote the course content around a simpler gem example.
It did simplify the course, so I hope it&rsquo;ll be easier to navigate for those
that are less familiar with Ruby.</p>

<p>I also designed a landing page for the course that I&rsquo;m really excited about.
Web design has always been one of the skills that I&rsquo;ve struggled with. I can generally
get it 70-80% there, but never have it look really polished. I&rsquo;ve spent
more time doing that lately and finally feel like I&rsquo;m hitting the mark.</p>

<p>The only thing left to do is proofread the course content and setup the course
drip campaign in Mailchimp.</p>

<h2>Launch Date</h2>

<p>I&rsquo;m excited to announce the course will launch this <strong>Wednesday (12/11) at 7AM
EST</strong>. I&rsquo;ll send an announcement on Wednesday morning with the registration
URL.</p>

<h2>Marketing</h2>

<p>Signups continued to trickle in throughout the weekend and I added another 30
subscriptions to this update list:</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/mailchimp-weekend.png" title="&#34;Mailchimp Weekend results&#34;" alt="&#34;Mailchimp Weekend results&#34;"></p>

<p>The link in Ruby Weekly amounted to 117 newsletter subscription
(<strong>almost 25% of the total visits</strong>). There&rsquo;s been no other channel even close to
that level of conversion.</p>

<p>During the process of posting course updates, I&rsquo;ve come across a few other
channels that I thought would be valuable sources of traffic after launch. I
plan to post to those sites sometime Wednesday and am interested to see how
they do relative to the sources I&rsquo;ve been using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Email Course - Week of Hustle - Day 6]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/"/>
    <updated>2013-12-06T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6</id>
    <content type="html"><![CDATA[<p>
  <em>I did an <strong>8-day sprint</strong> to launch my <a
  href="http://brandonhilkert.com/courses/build-a-ruby-gem/" target="_blank"><strong>Build a Ruby Gem</strong> email course</a>
  and documented my progress through this series of blog posts.</em>
</p>




<p><p><a href="http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/">Day 2</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3/">Day 3</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/">Day 4</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/">Day 5</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/">Day 6</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/">Weekend Update</a>
<a href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/">Summary</a></p>

<p>Happy Friday!</p>

<p>This morning I&rsquo;m feeling well rested and finally on the home stretch. In the
middle of the week, the remaining work felt overwhelming at times and I have a
feeling that played in to me feeling exhausted.</p>

<p>Part of it was that each lesson has gotten substantially longer than I planned
for. I think once I get in to the flow of writing, I tend to document
everything for everyone. I don&rsquo;t think everyone will need this level of detail,
but I&rsquo;d hate to leave it out, only to find that some users were left confused
because of the lack thereof.</p>

<p>Here&rsquo;s how the word count of each lesson shakes out so far:</p>

<p><!--more--></p>

<ul>
<li>Day 1 &ndash; 941</li>
<li>Day 2 &ndash; 1067</li>
<li>Day 3 &ndash; 1738</li>
<li>Day 4 &ndash; 868</li>
<li>Day 5 &ndash; 1118</li>
</ul>


<p>Looking at this now, I&rsquo;ll probably go back and rework Day 3 to either split out
some of the content, or remove it during editing depending on its value.</p>

<h2>What I Accomplished Today</h2>

<p>This morning I finished Day 5 of the Build a Ruby Gem Email Course. I&rsquo;m happy
with where it left off and can now say there&rsquo;s only 1 (2 at most) more to
write. And even those will be more wrap-up. All the code is finished.</p>

<p>I got in to the flow of writing pretty quickly this morning. I naturally woke
up around 6am, so I was probably less in a daze when I started.</p>

<h2>Marketing</h2>

<p>I was looking forward to writing this section&hellip;Yesterday, I opened my inbox and saw this:</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/ruby-weekly-link.png" title="&#34;A link to my Build a Ruby Gem email course in Ruby Weekly.&#34;" alt="&#34;A link to my Build a Ruby Gem email course in Ruby Weekly.&#34;"></p>

<p>That&rsquo;s my course link in the <a href="http://rubyweekly.com/">Ruby Weekly</a> newsletter.
This newsletter is a great weekly summary of the Ruby community and has several
thousand subscribers. I had a feeling this would yield a significant bump in
subscriptions and page views and boy was that true.</p>

<p>Page views were up <strong>153%</strong> from the previous day:</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/ga-day5.png" title="&#34;Google Analytics day 5 results&#34;" alt="&#34;Google Analytics day 5 results&#34;"></p>

<p>And subscriptions for course updates were up <strong>130%</strong>:</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/mailchimp-day5.png" title="&#34;Mailchimp day 5 results&#34;" alt="&#34;Mailchimp day 5 results&#34;"></p>

<p>Herein lies the power of reaching your target audience&hellip;</p>

<p>I track conversions to the newsletter in Google Analytics and Ruby Weekly is
kind enough to send a lot a campaign identifier with the link. Here are the
channels that have converted the best:</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/ga-conversions-day5.png" title="&#34;Google Analytics traffic conversions from day 5&#34;" alt="&#34;Google Analytics traffic conversions from day 5&#34;"></p>

<p>30% of all newsletter clicks resulted in newsletter subscriptions&hellip;I&rsquo;ll take
it! Not far behind is the campaign I sent to my personal list announcing the
email course, and next is links from Twitter. However, what this doesn&rsquo;t show
is that only 7 visitors arrived from Twitter referral links, so while 14% is
pretty good, it&rsquo;s a sample size that&rsquo;s probably not worth trusting.</p>

<p>While I&rsquo;ve read plenty about the power of email, I&rsquo;ve not seen this effect in
person until now. With these quick marketing recaps, I feel like I&rsquo;ve only
scratched the surface. After the course launches, I plan to spend more time
with the numbers to get a better feel for what went well, and more so, what I
should avoid in future launches.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Email Course - Week of Hustle - Day 5]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/"/>
    <updated>2013-12-05T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5</id>
    <content type="html"><![CDATA[<p>
  <em>I did an <strong>8-day sprint</strong> to launch my <a
  href="http://brandonhilkert.com/courses/build-a-ruby-gem/" target="_blank"><strong>Build a Ruby Gem</strong> email course</a>
  and documented my progress through this series of blog posts.</em>
</p>




<p><p><a href="http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/">Day 2</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3/">Day 3</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/">Day 4</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/">Day 5</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/">Day 6</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/">Weekend Update</a>
<a href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/">Summary</a></p>

<p>I&rsquo;m tired. Getting up around 5am all week has worn on me. Yesterday I felt like
zombie&hellip;and it was mostly my own fault because I didn&rsquo;t make it a priority to
get bed a decent hour.</p>

<p>I&rsquo;m not sure about you, but I function best with 7-8 hours of sleep. I
generally can&rsquo;t sleep longer than 8, and anything less than 7 is OK for a
day or two, otherwise, it catches up with me. I think that&rsquo;s what&rsquo;s going
on here&hellip;</p>

<p><!--more--></p>

<p>Having realized this, I got to sleep last night around 9:30pm. I figured I&rsquo;d
sleep in until 6am or so, but naturally woke up around 5:15am. So while I&rsquo;m
feeling better this morning, I&rsquo;m still feeling the side effects of not getting
enough sleep from the first few days of the week.</p>

<p>I&rsquo;ll be more cautious of this for the rest of the week and see if I can get
back to a normal (whatever that means!).</p>

<h2>What I Accomplished Today</h2>

<p>Like the previous days, I was able to write Day 4 of the Build a Ruby Gem Email
Course. I had a bit of trouble getting in to the flow of writing this morning.
I&rsquo;m not sure if it&rsquo;s due to the lack of sleep mentioned above, or just a little
speed bump in the normal creative process. It took 15 min. or so until I felt
like words were coming out naturally.</p>

<h2>Changes to the Email Course</h2>

<p>On Day 3, I realized I hadn&rsquo;t gotten to the meat of the Ruby gem and was still
writing about important, but somewhat theoretical topics. It occurred to me that
it&rsquo;s probably best not to cut the content, but rather, extend the course. So
instead of a 5-day course, it might be 6 or 7. My goal is write the best content possible and if after 7 days, I
feel like I&rsquo;ve covered the topic thoroughly, I&rsquo;ll wrap it up.</p>

<p>One thought that has crossed my mind is removing some of the content for an
ebook. I could make the course somewhat abbreviated, while offering the book as
an up-sell to those interested in the details. I&rsquo;ll think about this some more
and once the course content shakes out.</p>

<p>Additionally , I thinking about spreading the course out. So rather than
send 1 email a day, shoot for every 2-3 days, so that I can market the course as
a 14 or 21-day email course. I also feel like the people that will get the most
value out of the content  would benefit from extra time in between each lesson.</p>

<h2>Marketing</h2>

<p>Visits were slightly down yesterday, and I suspect the allure of the announcement has worn off.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/ga-day4.png" title="&#34;Google Analytics day 4 results&#34;" alt="&#34;Google Analytics day 4 results&#34;"></p>

<p>Thinking more about it, I&rsquo;ve not been great at seeking out marketing channels
for people that might be a good fit for the course. I&rsquo;ve been posting to the
same channels, which has produced a decreasing level of interest over the past
4 days. Truthfully, I&rsquo;m pretty worn out by the time I finish the email course
lesson and this update post, so it&rsquo;s difficult to get worked up for that. But
I&rsquo;ll think more about it and report back.</p>

<p>The mailing list is up to 82 subscribers, so while the growth is slowing, it&rsquo;s
still a 10% lift over the previous day. This, too, probably reiterates my need
to find users elsewhere.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/mailchimp-day4.png" title="&#34;Mailchimp day 4 results&#34;" alt="&#34;Mailchimp day 4 results&#34;"></p>

<p>I setup the subscription form to track what page the user was on when they
subscribed. Subscriptions are coming from all over the place. It appears that even after 4 days, people are
still landing on the first post of the series and converting.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/mailchimp-conversion-sources-day4.png" title="&#34;Mailchimp conversion sources for day 4&#34;" alt="&#34;Mailchimp conversion sources for day 4&#34;"></p>

<p>Again, Reddit appears to be the best source for both traffic and conversions.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/sources-day4.png" title="&#34;Google Analytics day 4 traffic sources&#34;" alt="&#34;Google Analytics day 4 traffic sources&#34;"></p>

<p>Once the email course is live, I&rsquo;ll make a better effort to market the landing
page elsewhere. I think these updates may be better suited for a different
target audience anyway.</p>

<p>The end is near!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Email Course - Week of Hustle - Day 4]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/"/>
    <updated>2013-12-04T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4</id>
    <content type="html"><![CDATA[<p>
  <em>I did an <strong>8-day sprint</strong> to launch my <a
  href="http://brandonhilkert.com/courses/build-a-ruby-gem/" target="_blank"><strong>Build a Ruby Gem</strong> email course</a>
  and documented my progress through this series of blog posts.</em>
</p>




<p><p><a href="http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/">Day 2</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3/">Day 3</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/">Day 4</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/">Day 5</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/">Day 6</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/">Weekend Update</a>
<a href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/">Summary</a></p>

<p>I let myself sleep in until 5:30am this morning ;) I spent a few very
unsuccessful hours wrestling with Wordpress last night and didn&rsquo;t get to bed at
the time I wanted. However, all is well. I was able to push out Day 4 of the
Build a Ruby Gem Email Course without issue.</p>

<p>One of the things that I&rsquo;m noticing about putting the course posts together is
how much the content relies on outside resources. Whether it&rsquo;s an external URL,
the output of a command prompt, or a diff on Github&hellip;getting those together is
a non-trivial amount of time.</p>

<p><!--more--></p>

<p>A side effect of getting up early is that by 7:30am (when I&rsquo;ve typically finish
this post), I feel really productive. At this point, I&rsquo;ve worked for 2 straight
hours, all of which have been highly focused. So at 7:30am, I take a break, get
some breakfast and take a shower and &ldquo;start&rdquo; the rest of my day. It feels like
the day starts out on a better foot as a result.</p>

<p>I&rsquo;ve also found that I&rsquo;ve been able to focus better early in the morning vs.
later at night. I know this is personal thing, some people do their best work
in the wee hours of the night. Not me, I&rsquo;m a morning person and have embraced
it. My productivity in the morning is probably 2-3x that of my normal
productivity during the day. I&rsquo;m not sure if it&rsquo;s because I&rsquo;m refreshed or
fewer distractions (it&rsquo;s dark, no TV, no social media, no other windows
open&hellip;).</p>

<h2>What I Accomplished Today</h2>

<p>I pushed out the latest day of the email course. I feel like it&rsquo;s just starting
to get in to the thick of things. I&rsquo;ve been really sensitive to the fact that
not every person that takes the course will be a Ruby veteran. Hopefully the
detailed discussions on load paths and basic installations won&rsquo;t detract from
the value for those that are.</p>

<p>Yesterday I mentioned the non-optimal formatting of my email campaigns on
mobile devices. I spent some time with Mailchimp last night and applied a more
responsive template to the campaign. It&rsquo;s better, but still somewhat finicky in
the iOS Gmail app. I&rsquo;ve sent a support request and hopefully I&rsquo;ll have that
ironed out soon. But for those on every other platform, you should&rsquo;ve had a
much better reading experience!</p>

<h2>Marketing</h2>

<p>As I expected, the growth of both the mailing list and page views slowed down a bit.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/ga-day3.png" title="&#34;Google Analytics day 3 results&#34;" alt="&#34;Google Analytics day 3 results&#34;"></p>

<p>I got a 15% bump in mailing list subscriptions, which is better than nothing!</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/mailchimp-day3.png" title="&#34;Mailchimp day 3 results&#34;" alt="&#34;Mailchimp day 3 results&#34;"></p>

<p>I&rsquo;m sending the daily update campaigns at 8pm. I didn&rsquo;t put much thought in to
this time, other than the fact that I stumbled on an email marketing post that
suggested the hours between 8-12am get the best open rates. According to the
campaign report, the open rate is doing well, as compared with the average.
However, I have a tendency to believe it&rsquo;s more due to the nature of the
opted-in target audience. This is a very specific topic that people
specifically wanted to read about. So it makes sense to me that the open rate
would be pretty high.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/campaign-day3.png" title="&#34;Mailchimp day 3 campaign report&#34;" alt="&#34;Mailchimp day 3 campaign report&#34;"></p>

<p>Reddit continues to be a positive source of traffic. I had haphazardly posted
to Reddit in the past, but it&rsquo;s been driving more traffic than any other
source. Along with views, it&rsquo;s also yielded one of the highest conversion rates
for the mailing list. So I&rsquo;ll continue to post my updates there.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/sources-day3.png" title="&#34;Google Analytics day 3 traffic sources&#34;" alt="&#34;Google Analytics day 3 traffic sources&#34;"></p>

<p>Until tomorrow&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Email Course - Week of Hustle - Day 3]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3/"/>
    <updated>2013-12-03T06:15:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m doing an
<strong>8-day sprint</strong> where I&rsquo;m launching an email course on
how to <strong>Build a Ruby Gem</strong>.</em></p>

<p><a href="http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/">Day 2</a> |
Day 3 |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/">Day 4</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/">Day 5</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/">Day 6</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-weekend-update/">Weekend Update</a></p>

<h2>Back at it</h2>

<p>I hit the 5:00am goal this morning! It&rsquo;s 6:15am and I&rsquo;ve wrapped up the 2nd day of
the Build a Ruby Gem Email Course.</p>

<p>Yesterday, I had some anxiety about the amount of writing involved in putting
this course together. I&rsquo;ve read a number of blog posts about building a Ruby
gem, but most seem to assume you have a pretty in depth knowledge of creating
gems, while others skip important details of the process. So I knew going in to
it that I wanted to write about it a little differently. I wanted to talk more
about theory of why things are being done vs. how the Ruby language works.</p>

<p>Thinking back to my first Ruby gem, I remember my frustration trying to
understand the conventions of naming and file structure. So I&rsquo;m writing the course I
wish I had when I started.</p>

<!--more-->


<h2>Flow</h2>

<p>It&rsquo;s been 3 days since I started documenting this process and the writing
process has gotten significantly easier. Since I started my blog, I&rsquo;ve read a
number of posts recommending the value of writing every day, regardless of the
subject. I&rsquo;m beginning to see the benefit of this consistency. I&rsquo;ll report back
on this by the end of the week as it should be even more apparent by then.</p>

<h2>What I Accomplished today</h2>

<p>I wrote Day 2 of the Build a Ruby Gem Email Course. The content organization
that I did on the first day has proved to be valuable. Outside of moving a few
topics around, it&rsquo;s stayed largely in tact. So here&rsquo;s to organization!!!</p>

<p>I think I also solved my email list problems. Actually, it was less &ldquo;problems&rdquo;, and
more, I need to learn how to use <a href="http://mailchimp.com/">Mailchimp</a>. I was in touch with their support
over an issue around signing up for multiple lists. I originally had the
subscriptions to the Week of Hustle updates going to my personal newsletter
list. This caused a semi-alarming error message if you were already on the
list.</p>

<p>The solution was to create a separate list and manage it outside of the realm
of my newsletter. Despite seeming over-complicated at first, I now feel
comfortable with this solution and I think it actually fits my goals better.
I&rsquo;ve already started to think of the best way to manage the email course once
it&rsquo;s live.</p>

<h2>What I&rsquo;m working on today</h2>

<p>A few people have pointed out some oddities with the formatting of my email
updates and there are a few design changes I&rsquo;d like to make on the sign up
forms. However, because the email updates are going out daily, it&rsquo;s my first
priority.</p>

<p>There have been no changes to the timeline I posted yesterday, and still feel
like I&rsquo;m on schedule to finish by the end of the weekend!</p>

<h2>Marketing</h2>

<p>I was originally worried that the buzz surrounding the course and my updates
about the process would die off and I&rsquo;d get another couple people throughout
the week. This appears to not be the case. However, I&rsquo;m not convinced it&rsquo;ll
continue this way throughout the week.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/ga-day2.png" title="&#34;Google Analytics day 2 results&#34;" alt="&#34;Google Analytics day 2 results&#34;"></p>

<p>As you can see, traffic to the blog was almost exactly the same as the previous
day (Sunday).</p>

<p>I screwed up the Google Analytics tracking code on the layouts, so I wasn&rsquo;t
tracking email list conversions until late last night. But the good news is
that according to Mailchimp, I signed up another 25 subscribers to the updates list.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/mailchimp-day2.png" title="&#34;Mailchimp day 2 results&#34;" alt="&#34;Mailchimp day 2 results&#34;"></p>

<p>This is down from the previous day, but overall, I couldn&rsquo;t be happier. I did
get a little boost because I sent a campaign about the course and my updates to
my newsletter email list, which seemed to account for maybe 8-10 subscriptions.</p>

<p>See you tomorrow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Email Course - Week of Hustle - Day 2]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/"/>
    <updated>2013-12-02T07:02:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2</id>
    <content type="html"><![CDATA[<p>
  <em>I did an <strong>8-day sprint</strong> to launch my <a
  href="http://brandonhilkert.com/courses/build-a-ruby-gem/" target="_blank"><strong>Build a Ruby Gem</strong> email course</a>
  and documented my progress through this series of blog posts.</em>
</p>




<p><p><a href="http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/">Day 2</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3/">Day 3</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/">Day 4</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/">Day 5</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/">Day 6</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/">Weekend Update</a>
<a href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/">Summary</a></p>

<p>Alright, back at it! I didn&rsquo;t quite hit the
5:00am goal I had, but was early enough to accomplish
what I was shooting for. (Setting my alarm for
11:58pm because namecheap.com had hourly Cyber Monday
coupon codes didn&rsquo;t help&hellip;).</p>

<h2>What I Accomplished today</h2>

<p>Today I wrote the first post out of 5 and it went
relatively smooth. Yesterday I created a rough outline
for the course content using
<a href="http://evernote.com/">Evernote</a>. I&rsquo;ve used it mainly as
a place to spew out the ideas that are not necessarily
organized, but just general notes about things I want to
make sure get covered (imagine that, using Evernote for
notes?!?!).</p>

<p><!--more--></p>

<p>Writing my entry for the email course caused me to
realize that I had to make a few changes to my blog to
facilitate the course (ie. hide newsletter signup at the
end of each course). Those changes probably took 10-15
min. However, I got them out of the way so I won&rsquo;t have
to worry about it anymore for future courses (I know, fat
chance a web developer leaves something alone for very
long&hellip;).</p>

<h2>What I&rsquo;m working on</h2>

<p>There&rsquo;s been some weirdness with my Mailchimp sign up
form, mostly around signing up for multiple groups as an
existing recipient. I&rsquo;ve submitted a support request and
have been reaching out to people that are far more
knowledgable than I using email lists and hope to have it
resolved by the end of the day, at which point I&rsquo;ll notify my existing
email list of the course.</p>

<h2>My new timeline</h2>

<p>I made a few changes/additions to my project timeline as
you can see below:</p>

<ul>
<li><p><del>Day 1 &ndash; Overall topic and organize what content goes on which days, setup GH
project and ready tags, write WOH day blog, why gem discussion (ref. open
source blog &ndash; pics of GA)</del></p></li>
<li><p><del>Day 2 &ndash; Write content and WOH blog (notify subscribers)</del></p></li>
<li><p>Day 3 &ndash; Write content and WOH blog (notify subscribers)</p></li>
<li><p>Day 4 &ndash; Write content and WOH blog (notify subscribers)</p></li>
<li><p>Day 5 &ndash; Write content and WOH blog (notify subscribers)</p></li>
<li><p>Day 6 &ndash; Write content and WOH blog (notify subscribers)</p></li>
<li><p>Day 7 &ndash;  Setup auto responder and way to capture for the course, write emails for each day of sequence (depending on the content). Proofread all course posts.</p></li>
<li><p>Day 8 &ndash; Launch with new landing page and notify subscribers</p></li>
</ul>


<p>I realized I needed to separate out time to proofread previous email course
content posts. After writing for over an hour, I don&rsquo;t feel like I&rsquo;m in the
best position to be critical of my writing. I think editing after the fact will
also reveal some places where content can be removed due to wordiness.</p>

<h2>Marketing</h2>

<p>I wanted to add a marketing section to each of these updates because building
an audience is such a critical piece of this process. Yesterday, I posted my
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> post around the internet and got
overwhelmingly positive feedback.</p>

<p>The &ldquo;sign up for updates&rdquo; form yielded around 40 subscriptions. My wife and I
went to the movies yesterday and at one point I looked at my phone and saw
this:</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/mailbox.png" title="&#34;My mailbox showing Mailchimp subscriptions&#34;" alt="&#34;My mailbox showing Mailchimp subscriptions&#34;"></p>

<p>Yesterday I mentioned part of my motivation for launching this <strong>Build a Ruby
Gem</strong> email course was to determine if there was enough interest in the topic
to warrant an ebook. So far, so good&hellip;</p>

<p>Total visits to the site was 337. I&rsquo;ll take a 10% conversion rate any day!</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/ga-day1.png" title="&#34;Google Analytics from Day 1&#34;" alt="&#34;Google Analytics from Day 1&#34;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Ruby Gem Email Course - Week of Hustle - Day 1]]></title>
    <link href="http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1/"/>
    <updated>2013-12-01T05:37:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1</id>
    <content type="html"><![CDATA[<p>
  <em>I did an <strong>8-day sprint</strong> to launch my <a
  href="http://brandonhilkert.com/courses/build-a-ruby-gem/" target="_blank"><strong>Build a Ruby Gem</strong> email course</a>
  and documented my progress through this series of blog posts.</em>
</p>




<p><p><a href="http://brandonhilkert.com/blog/build-a-ruby-gem-woh-day-1/">Day 1</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-2/">Day 2</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-3/">Day 3</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-4/">Day 4</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-5/">Day 5</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-day-6/">Day 6</a> |
<a href="http://brandonhilkert.com/blog/build-a-ruby-gem-email-course-week-of-hustle-weekend-update/">Weekend Update</a>
<a href="http://brandonhilkert.com/blog/how-i-launched-an-email-course/">Summary</a></p>

<h2>JFDI</h2>

<p>Living outside a major metropolitan area has made it hard to surround myself
with other entrepreneurs. Fortunately, the internet has made the world a
smaller place. Last week I joined <a href="http://jfdi.bz/">JFDI.bz</a>, a community for
solo-founders launching their own thing.</p>

<p>My goal for joining this community was to have access to other motivated
entrepreneurs that I could use as a sounding-board. I also figured it&rsquo;d be
great opportunity to peek in to other solo founders launch process and
motivation for a particular product.</p>

<h2>Week of Hustle</h2>

<p>Week of Hustle is an 8-day sprint to launch something. Anything really&hellip;could
be an existing product that you need to put the finishing touches on, or a
brand new idea. It was one of the things that attracted most to JFDI.</p>

<p>Launching any kind of product is time consuming. And with a family and other
full-time responsibilities, life can get in the way. I feel like I&rsquo;m pretty
good at managing my time efficiently, but when accountability is involved, it&rsquo;s
much harder to put it off.</p>

<p><!--more--></p>

<h2>My Goal</h2>

<p>This week I will be launching a free <strong>5-day email course</strong> focused on
<strong>Building a Ruby Gem</strong>. My goal for the course is to build my newsletter
audience and work through the steps of building a smaller info product to
determine if there&rsquo;s enough interest in the subject to warrant writing an
ebook.</p>

<p>As part of 8-day process, I will be posting blog entries daily about my
progress and the challenges I&rsquo;m facing at each step.</p>

<h2>Why an email course on Building a Ruby Gem?</h2>

<p>One of the first blog posts I wrote was about <a href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/">how to get started contributing
to Open Source</a>. I
wrote it because I remember being somewhat unsure about the topic early in my
Ruby career. Additionally, it garnered far more attention than any of my other
posts, which tells me there&rsquo;s clearly a need for this kind of discussion.</p>

<p><img class="center" src="http://brandonhilkert.com/images/woh/ga.png" title="&#34;Google Analytics of my first few blog posts.&#34;" alt="&#34;Google Analytics of my first few blog posts.&#34;"></p>

<p>The Ruby gem ecosystem is really powerful, but equally confusing, in my
opinion. There are <em>strong</em> recommendations about how to structure the
internals of a gem, which can make writing your first gem pretty frustrating.</p>

<h2>My plan this week</h2>

<p>So getting down to business&hellip;here&rsquo;s my tentative plan this week:</p>

<ul>
<li><p>Day 1 &ndash; Overall topic and organize what content goes on which days, setup GH
project and ready tags, write WOH day blog, why gem discussion (ref. open
source blog &ndash; pics of GA)</p></li>
<li><p>Day 2 &ndash; Write content and WOH blog (notify subscribers)</p></li>
<li><p>Day 3 &ndash; Write content and WOH blog (notify subscribers)</p></li>
<li><p>Day 4 &ndash; Write content and WOH blog (notify subscribers)</p></li>
<li><p>Day 5 &ndash; Write content and WOH blog (notify subscribers)</p></li>
<li><p>Day 6 &ndash; Write content and WOH blog (notify subscribers)</p></li>
<li><p>Day 7 &ndash;  Setup auto responder and way to capture for the course, write emails for each day of sequence</p></li>
<li><p>Day 8 &ndash; Launch with new landing page and notify subscribers</p></li>
</ul>


<h2>Time Management</h2>

<p>I do have a full-time job and will be working all week. Because I try to spend
as much time as possible with my daughter, my goal is to accomplish the steps
above early in the AM. This morning I set my alarm for 6am, but got up 4:30am
because I was excited to start the week. Today was a relatively easy day in
terms of time-consuming tasks, so I&rsquo;m guessing I&rsquo;ll shoot for 5am the remainder
of the week. We&rsquo;ll see!</p>

<h2>Today&rsquo;s Accomplishments</h2>

<ul>
<li>I created a <a href="https://github.com/brandonhilkert/mega_lotto">Github project to house the code I&rsquo;ll write</a></li>
<li>I wrote this post</li>
<li>I setup a mail chimp entry form for subscription to my WOH updates</li>
<li>I created the structure for the email course content</li>
<li>I searched through <a href="http://www.reddit.com/">Reddit</a> and found a <a href="http://www.reddit.com/r/ruby/comments/1qplmu/tutorial_build_a_gem_from_scratch/">few posts that
express</a>
a need to <a href="http://www.reddit.com/r/ruby/comments/1qmb29/building_a_gem_from_scratch_google_hangout_today/">learn about about writing Ruby
gems</a>.
Those interested in these posts would be a great target audience.</li>
</ul>


<p>Until tomorrow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serving Fonts for Firefox with Fastly]]></title>
    <link href="http://brandonhilkert.com/blog/serving-fonts-for-firefox-with-fastly/"/>
    <updated>2013-11-20T09:57:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/serving-fonts-for-firefox-with-fastly</id>
    <content type="html"><![CDATA[<p><a href="http://brandonhilkert.com/blog/setting-up-a-cloudfront-cdn-for-rails/">Setting up a CDN to host assets</a> is
one of the first performance improvements I make to a production Rails
application. The first time I attempted to host assets from a different domain,
I quickly realized that <a href="http://davidwalsh.name/cdn-fonts">Firefox won&rsquo;t download fonts from a different
domain</a> without specific headers.</p>

<h2>Nginx Fix</h2>

<p>At the time, our system was using <a href="http://wiki.nginx.org/Main">Nginx</a> to serve
assets that were fronted by a <a href="http://aws.amazon.com/cloudfront/">Amazon
Cloudfront</a> CDN. In order to make it work
with this setup, I had to add to the following to our Nginx configuration:</p>

<figure class='code'><pre><code>location ~* \.(ttf|ttc|otf|eot|woff|svg|font.css)$ {
    add_header Access-Control-Allow-Origin *;
    expires 1M;
    access_log off;
    add_header Cache-Control "public";
}</code></pre></figure>




<!--more-->


<p>This added the <code>Access-Control-Allow-Origin</code> header for all fonts and
font-related assets.</p>

<h2>Enter Fastly</h2>

<p>Fast-forward a few months and we&rsquo;ve taken the next step in serving assets by
uploading them to S3. As mentioned in my previous post about <a href="http://brandonhilkert.com/blog/setup-a-cloudfront-cdn-for-rails/">setting up a
Cloudfront CDN</a>, we&rsquo;ve also started
using <a href="http://www.fastly.com">Fastly</a> as our CDN.</p>

<p>Fastly&rsquo;s caching service is really powerful, but can be overwhelming at times.
They make heavy use of <a href="https://www.varnish-cache.org/">Varnish</a>, even to the
point of allowing you to write your own Varnish configurations if you choose.
I&rsquo;m a Varnish amateur so I&rsquo;ll go down the GUI route here.</p>

<p>Setting the headers in S3 upon upload would&rsquo;ve been ideal, but wasn&rsquo;t possible
given the mechanism were were using to upload. Fortunately, Fastly allows you
to <a href="http://docs.fastly.com/guides/21835572/23999817">set custom headers</a> at any
point in the caching life cycle.</p>

<h2>The Solution</h2>

<p>In Fastly, go to <code>Configure -&gt; Content -&gt; Headers -&gt; + New</code> and enter the
following:</p>

<p><img class="center" src="http://brandonhilkert.com/images/fastly/headers.png" title="&#34;Fastly headers&#34;" alt="&#34;Fastly headers&#34;"></p>

<p>This configuration will add the <code>Access-Control-Allow-Origin</code> header to all
asset responses. But we can do one better than this!</p>

<p>Fastly&rsquo;s <a href="http://docs.fastly.com/guides/21835572/23472072">headers can take
conditions</a>&hellip;knowing I only
wanted to add this header to fonts, I clicked <code>Response Conditions</code> on the
header I previously added:</p>

<p><img class="center" src="http://brandonhilkert.com/images/fastly/conditions.png" title="&#34;Fastly Conditions&#34;" alt="&#34;Fastly Conditions&#34;"></p>

<p>And entered the following:</p>

<p><img class="center" src="http://brandonhilkert.com/images/fastly/condition.png" title="&#34;Fastly Condition&#34;" alt="&#34;Fastly Condition&#34;"></p>

<p>This condition looks at the URL of the incoming request to determine whether it
matches any of the following regex conditions: <code>req.url ~
"(ttf|ttc|otf|eot|woff|svg|font\.css)$"</code>. If it does, it&rsquo;ll apply the
<code>Access-Control-Allow-Origin</code> header.</p>

<p><em>Note: Once you&rsquo;ve made these changes, don&rsquo;t forget to click the <code>Deploy</code>
button, otherwise, you won&rsquo;t see the new headers.</em></p>

<h2>In Summary</h2>

<p>While Fastly can be overwhelming, the power of being able to modify any aspect
of the caching stack is valuable. Asset download times have generally been
somewhere between 30-50 ms. Cloudfont offered this performance at times, but
wasn&rsquo;t very consistent &ndash; some would be 30 ms, and others would take 150 ms. I
haven&rsquo;t noticed this inconsistency with Fastly and would happily recommend
their service to anyone looking to improved their caching layer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Design Copied - What Would You Do?]]></title>
    <link href="http://brandonhilkert.com/blog/blog-design-copied-what-would-you-do/"/>
    <updated>2013-11-14T07:19:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/blog-design-copied-what-would-you-do</id>
    <content type="html"><![CDATA[<p>I posted a blog post yesterday, so the first thing I did when I woke up this
morning was look at Google Analytics to for the most popular traffic sources. I
found the following:</p>

<p><img class="center" src="http://brandonhilkert.com/images/blogcopy/rubyconn.png" title="&#34;Rubyconn&#34;" alt="&#34;Rubyconn&#34;"></p>

<p>Never having heard of it before, I clicked it. I then clicked one of the first links on
the page and saw this:</p>

<!--more-->


<p><img class="center" src="http://brandonhilkert.com/images/blogcopy/other.png" title="&#34;Blog copy&#34;" alt="&#34;Blog copy&#34;"></p>

<p>Here&rsquo;s my blog:</p>

<p><img class="center" src="http://brandonhilkert.com/images/blogcopy/myblog.png" title="&#34;Brandon Hilkert's blog&#34;" alt="&#34;Brandon Hilkert's blog&#34;"></p>

<p>Wow! Full-on copy of my blog design. The blog title &ldquo;build_something!&rdquo; was even
the title of a previous blog post <a href="http://brandonhilkert.com/blog/build-something/">Build
Something</a>.</p>

<p>The <a href="http://blog.rkcudjoe.com/">copied blog</a> has a Github link so I clicked it.
And sure enough&hellip;my entire repo (not even forked). Just a local clone, showing
mostly commits by me.</p>

<p>Now, you&rsquo;re probably asking yourself why I put it on Github in the first place.
Honestly, it&rsquo;s the perfect backup. And I never thought any one would copy the
entire thing!</p>

<p>I spent several months with the help of a <a href="http://jodyferry.com/">really talented UI
designer</a> to finalize my blog design. And in the end,
was really happy with the outcome.</p>

<p>The whole thing is disappointing&hellip;sure I could try to ignore it, but after
investing that much time, it&rsquo;s a bummer to see your work copied in 5 minutes
without care or inquiry.</p>

<p>So the question is&hellip;what would you do?</p>

<p><em>Update:</em> Even after several requests to take the design down, the person in
question has disagreed, even without my consent to use the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a Cloudfront CDN for Rails]]></title>
    <link href="http://brandonhilkert.com/blog/setting-up-a-cloudfront-cdn-for-rails/"/>
    <updated>2013-11-12T21:18:00-05:00</updated>
    <id>http://brandonhilkert.com/blog/setting-up-a-cloudfront-cdn-for-rails</id>
    <content type="html"><![CDATA[<p><em>Update: I&rsquo;ve since added a post on <a href="http://brandonhilkert.com/blog/serving-fonts-for-firefox-with-fastly/">serving fonts for Firefox with Fastly</a>.</em></p>

<p>Implementing a <a href="http://en.wikipedia.org/wiki/Content_delivery_network">CDN</a> to
serve compiled assets in Rails is one of the most significant performance
enhancements I&rsquo;ve seen. Having done so for 2 fairly large applications, it&rsquo;s
hard for me to imagine serving assets locally anymore.</p>

<h2>The Asset Pipeline</h2>

<p>The addition of the Rails <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset
pipeline</a> has reduced both
the number of assets served and the size of these files. Users on slow
connections have been the biggest beneficiary of these changes.</p>

<h2>The Problem</h2>

<p>Even with the asset pipeline, content is transmitted to the end user
over their, sometimes slow, connection. Distance plays a role in the speed at which
data can be delivered. Because of this, users further away from your servers get a
sluggish experience. This decreases both the users&#8217; patience and your ability to effectively
engage them.</p>

<!--more-->


<h2>The Solution</h2>

<p>CDNs are networks of servers that host your content so that when
you make a request, the request is served from a server closest
to you. This can often reduce transmission time by several
seconds (&hellip;think users in Asia requesting content that&rsquo;s
served from Virginia &ndash; this is the case if you deploy to Heroku).</p>

<p>The use of a CDN also reduces the number of requests to your
application servers. Most Ruby applications use
<a href="http://wiki.nginx.org/Main">Nginx</a> or <a href="http://httpd.apache.org/">Apache</a> in
front of the Ruby processes. These HTTP servers are really good at serving
static content, but no one will deny &ndash; the fewer requests, the better.</p>

<h2>Option 1: <em>Push</em> your assets to the CDN during deployment</h2>

<p>Depending on your method of deployment, pushing assets to a CDN isn&rsquo;t always
trivial. The <a href="https://github.com/rumblelabs/asset_sync">asset_sync</a> gem has
made this relatively straight forward if you choose to host your assets from
<a href="http://aws.amazon.com/s3/">Amazon S3</a>. Out of the 2 options, this is the most
efficient because all requests for assets will be diverted away from your
application, leaving its precious processing power to serve more important
application requests.</p>

<h2>Option 2: Assets are <em>pulled</em> to the CDN on first request</h2>

<p>This option won&rsquo;t change deployment and is simple to
setup. The only downside is that upon first request to an asset, the CDN will
pull it from your web server and cache it (it&rsquo;s hardly a downside if you&rsquo;re
currently serving <em>all</em> your assets from your web server). All subsequent
requests to that asset will be served straight from the CDN. The simplicity of
this option generally makes it my preferred option.</p>

<p>So let&rsquo;s get to it&hellip;</p>

<h2>Amazon Cloudfront</h2>

<p>Log in to your Amazon EC2 account and click &ldquo;Cloudfront&rdquo;:</p>

<p><img class="center" src="http://brandonhilkert.com/images/cdn/cloudfront.png" title="&#34;Click Cloudfront in the AWS web console&#34;" alt="&#34;Click Cloudfront in the AWS web console&#34;"></p>

<p>Click &ldquo;Create Distribution&rdquo;:</p>

<p><img class="center" src="http://brandonhilkert.com/images/cdn/create.png" title="&#34;Create a Cloudfront distribution endpoint&#34;" alt="&#34;Create a Cloudfront distribution endpoint&#34;"></p>

<p>Enter the domain where your assets currently live (ignore Origin ID &ndash; it&rsquo;ll be filled in for you):</p>

<p><img class="center" src="http://brandonhilkert.com/images/cdn/settings.png" title="&#34;Settings for a typical CDN&#34;" alt="&#34;Settings for a typical CDN&#34;"></p>

<p>Make note of the Cloudfront distribution URL</p>

<p><img class="center" src="http://brandonhilkert.com/images/cdn/domain.png" title="&#34;Cloudfront distribution URL&#34;" alt="&#34;Cloudfront distribution URL&#34;"></p>

<h2>Rails</h2>

<p>Rails provides and easy way to change the host URL of the assets (images,
stylesheets, javascripts, fonts&hellip;). Enter the Cloudfront
distribution URL from above as the Rails <code>asset_host</code>.</p>

<figure class='code'><pre><code># config/environments/production.rb
config.action_controller.asset_host = "d24xjtg100euk4.cloudfront.net"</code></pre></figure>


<p>At this point, the domain of all Rails asset helpers <code>image_tag</code>, <code>stylesheet_link_tag</code>, and <code>javascript_include_tag</code>
will be prefaced with the asset host URL that you configured above.</p>

<p>For example:</p>

<figure class='code'><pre><code>image_tag("shark_teeth.png")
# http://d24xjtg100euk4.cloudfront.net/assets/images/shark_teeth.png</code></pre></figure>


<p><em>Note: if you only change <code>config/environments/production.rb</code>, you won&rsquo;t see
any changes in your <code>development</code> environment.</em></p>

<p>And that&rsquo;s it!</p>

<h2>In Summary</h2>

<p>This is the ultimate low-hanging fruit optimization. If you haven&rsquo;t served your
assets from a CDN before, I&rsquo;d suggest giving it a try. The <a href="http://aws.amazon.com/cloudfront/pricing/">cost of
Cloudfront</a> is minimal, and in my
mind, worth 10x that.</p>

<p>I&rsquo;ve recently been trying out a service called
<a href="http://www.fastly.com/">Fastly</a>, which is an alternative to Cloudfront. It&rsquo;s
slightly more expensive, but seems to have better and more consistent
performance.</p>
]]></content>
  </entry>
  
</feed>
