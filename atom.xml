<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Brandon Hilkert]]></title>
  <link href="http://brandonhilkert.com/atom.xml" rel="self"/>
  <link href="http://brandonhilkert.com/"/>
  <updated>2013-10-29T20:07:54-04:00</updated>
  <id>http://brandonhilkert.com/</id>
  <author>
    <name><![CDATA[Brandon Hilkert]]></name>
    <email><![CDATA[brandonhilkert@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build something]]></title>
    <link href="http://brandonhilkert.com/blog/build-something/"/>
    <updated>2013-10-29T20:10:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/build-something</id>
    <content type="html"><![CDATA[<p><em>A variation of this post originally appeared on the <a href="http://railsmasterclass.com/">Rails Masterclass</a>
newsletter.</em></p>

<p>Learning new technologies can be a challenge. With books, forums, videos, blog
posts&hellip;where do you start?!?! I&rsquo;ve used all these resources in the past and
only one thing has reliably led to me to really learn the concepts &ndash; building something REAL!</p>

<h3>How I learned Ruby and Rails</h3>

<p>Several years ago, I was learning both <a href="https://www.ruby-lang.org/en/">Ruby</a>
and <a href="http://rubyonrails.org/">Rails</a> and trying to figure out which books were
worth the time. I ended up starting with <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Web Development with
Rails</a>,
which was a fantastic introduction to the features and benefits you&rsquo;ll get from
learning the Rails framework. However, like many other books, it guides you
through building a website with little real world value &ndash; an e-commerce
shopping cart (you&rsquo;ve heard this one before, right???).  The concepts in the
book generally apply to other products built with Rails, but it was sometimes
hard for me to see their value elsewhere.  I found that the books and articles often skipped over things that were fairly
trivial for a more experienced developer, but essential to get a real world application out the door.</p>

<h3>The best way to learn (with a catch)</h3>

<p>I propose you build something&hellip;anything really. But it would be more useful if
the thing you build is useful to either you, someone else, or even
better&hellip;everyone! But there&rsquo;s a catch&hellip;whatever you build, you must not only
put it out there for the world to see, but you must share it in whatever way
you feel comfortable.</p>

<h3>My Craigslist Scraper</h3>

<p>A few years ago, I was in the market for a new job. I built a small Craigslist
scraper that searched for &ldquo;my perfect job&rdquo; and had it notify me via email
whenever it found a similar post.</p>

<p>The process of creating this little scraper did two things for me. First, it
allowed me to learn (I wrote it in Perl and at the time knew very little about
the language&hellip;). And second, it saved the 15 minutes or so it would take me
each day to sift through the new job postings. It really was a win-win!</p>

<h3>Start to Finish</h3>

<p>It&rsquo;s easy to copy and paste code snippets from a blog post or book. It&rsquo;s much
harder to see these applications through to the point where they&rsquo;re useful. Who
cares if no one uses it? The value you get from seeing your application code
all the way to the point of production is exponentially greater than the value
of having run &ldquo;rails server&rdquo; on your local development machine.</p>

<p>Questions such as &ldquo;How will I log and be notified of errors?&rdquo; and &ldquo;How will I
backup my production data store?&rdquo; take time and thought to answer.</p>

<p>There are so many easy to use
<a href="http://en.wikipedia.org/wiki/Platform_as_a_service">PAAS</a> platforms
now-a-days, even if you&rsquo;re not the devops guru that you aspire to be, you too
can have production code running with minimal effort for FREE!
<a href="https://www.heroku.com">Heroku</a> is a great example of a place that you can
host your Rails applications without hassle or cost. If you have an application
running locally that you&rsquo;d like to share, hosting it at Heroku is a no-brainer.</p>

<p>If you have more aspirational goals of managing servers and understanding what
makes a Rails application tick, servers at <a href="https://www.digitalocean.com/">Digital
Ocean</a>, <a href="https://www.linode.com/">Linode</a>, and
<a href="http://www.rackspace.com/">Rackspace</a> can be extremely cost effective.</p>

<h3>Dogfooding</h3>

<p>Building an application that can save you time in your daily routine (ie. task
tracker, appt. reminder, etc.) is a great first step to learning more. It&rsquo;s
also very possible that if the application helps you, it could help other
people. I&rsquo;ll leave the marketing talk for another time, but stepping back and
being an actual user of your application will cause you to look at it in a very
different light. It&rsquo;s likely that you&rsquo;ll find ways to drastically improve your
application within the first 10 minutes of usage.</p>

<h3>Sharing (this is my favorite part)</h3>

<p>You&rsquo;ve now spent several weeks/months building something interesting &ndash; tell the
world about it. Tweet about it, post it to your local user group mailing list,
email your friends, anything&hellip;the more people that see it, the better. Like
dogfooding, you&rsquo;ll get valuable feedback that you might not have gotten
otherwise.</p>

<p>I can hear all the perfectionists now&hellip;&ldquo;I don&rsquo;t want to share it until it&rsquo;s
perfect&rdquo;. Having worked on a number of large applications, the candid truth is
that it will <strong>NEVER</strong> be perfect. The feedback you&rsquo;ll get sooner is more
valuable than the time you&rsquo;ll waste by attempting perfection. Besides, I have a
feeling that most the features you thought you <em>had</em> to have before you
launched are unimportant to the people that actually want to use your
application.</p>

<p>There&rsquo;s a more subtle point to sharing your new application&hellip;subconsciously
you&rsquo;re likely not going to share something that you think is crappy. If your
goal is to ultimately share what you&rsquo;ve built, you&rsquo;ll put the work in to make
it worthy of sharing, and in the process, learn about the finer details of
releasing a web application in to the wild, not just a basic shopping cart that
has minimal real-world value.</p>

<h3>Where to go from here?</h3>

<p>Knowing what you want to build is easier said than done. I keep a list of ideas
that I ultimately want to build someday. Some have very little use outside my
own world and others probably have potential to be used by other people, but
either way, bringing these ideas to life with new technologies or concepts
really helps me to solidify their real-world value.</p>

<p>If you don&rsquo;t have ideas, a quick Google search for &ldquo;startup ideas&rdquo; will provide
you with some very interesting results. However, I&rsquo;d think about the things
you&rsquo;re doing everyday and ask yourself if any of them can be solved, or aided,
with software. If the answer is &ldquo;yes&rdquo; to any of them, you have yourself a great
candidate.</p>

<p>I&rsquo;d love to hear about what you&rsquo;re building and the challenges you&rsquo;re facing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Wrote sucker_punch]]></title>
    <link href="http://brandonhilkert.com/blog/why-i-wrote-sucker-punch/"/>
    <updated>2013-10-20T16:41:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/why-i-wrote-sucker-punch</id>
    <content type="html"><![CDATA[<p>One of the simplest and most common application of
background processing is sending emails outside of a web
request. And while background processing is pretty
common, Ruby libraries require an additional background
process to execute jobs. The application I was working on
was hosted on Heroku, and the cost of adding an
additional dyno is $35/month. The background jobs did
very little more than send emails the current solutions
seemed like overkill to me. So
<a href="https://github.com/brandonhilkert/sucker_punch">sucker_punch</a>
was born&hellip;</p>

<h3>Ruby Background Processing Libraries</h3>

<p>Until I had heard of Sidekiq,
<a href="https://github.com/collectiveidea/delayed_job/tree/master">delayed_job</a>
and <a href="https://github.com/resque/resque">Resque</a> were the
standard options for processing background jobs in Ruby.
I&rsquo;ve used both and believe each has a great use case.</p>

<p>My experience is that it&rsquo;s easiest to start with
delayed_job and if you get to the point where the DB is
your bottleneck, it&rsquo;s time to move on. Redis is a
dependency of both Resque and Sidekiq, so it requires
more infrastructure and care to maintain, however, with
<a href="https://addons.heroku.com/?q=redis">Heroku&rsquo;s hosted Redis
Add-ons</a>, this
dependency is much less of a pain any more.</p>

<h3>My work on Sidekiq</h3>

<p>I previously wrote about my my <a href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/">open source
contributions</a>
and how I got started. I had spent the previous several
months contributing to Sidekiq and learning more about
concurrency patterns in Ruby.</p>

<p>Sidekiq is multi-threaded, which is the reason a single
Sidekiq process is <a href="https://github.com/mperham/sidekiq/wiki/Testimonials">more
efficient</a>.
However, care must be taken to ensure your jobs are
thread-safe. A helpful <a href="https://github.com/mperham/sidekiq/wiki/Best-Practices">guide to writing thread-safe
code</a>
can be found on the Sidekiq wiki.</p>

<h3>My Use Case</h3>

<p>I was working on <a href="http://defriendnotifierapp.com/">Defriend
Notifier</a> and needed to
notify users via email when their Facebook friend list
changed. Using Sidekiq or any of the alternatives
mentioned above would have worked for my use. In fact,
the application originally did use Sidekiq and worked
perfectly. However, I was looking for ways to reduce the
hosting cost of the application given that it doesn&rsquo;t
produce any revenue stream outside of advertising.</p>

<p>The only background processing library that doesn&rsquo;t
require an additional background process is
<a href="https://github.com/mperham/girl_friday">girl_friday</a>,
also written by <a href="https://twitter.com/mperham">Mike
Perham</a>, author of Sidekiq.
While this solution worked for awhile, I found the syntax
to be slightly non-intuitive and it felt a little dirty
to pass around a global variable within the application
to manage a single job queue. I also experienced some
memory leaks on Heroku as a result of switching to
girl_friday, but to be fair, I didn&rsquo;t spend much time
determining the root cause. It&rsquo;s very likely it could
have been code that I wrote.</p>

<h3>Celluloid</h3>

<p><a href="https://github.com/celluloid/celluloid">Celluloid</a>
describes itself as an actor-based concurrent object
framework for Ruby. Celluloid is the guts behind Sidekiq
and the reason why the multi-threaded Sidekiq code is so
readable. Celluloid abstracts away the details of
concurrency so that the library code doesn&rsquo;t have to
worry about manually managing thread synchronization and
object message queuing.</p>

<h3>sucker_punch is born</h3>

<p>girl_friday was written several years previous, before
Celluloid was created. Realizing the power of Celluloid,
I figured there was an opportunity for a new library that
essentially behaved like girl_friday, but utilized
Celluloid&rsquo;s more reliable multi-threading capabilities.</p>

<p>I <a href="https://twitter.com/brandonhilkert/status/292630123981729793">tweeted at Mike
Perham</a>
and his response was enough to affirm my interest.</p>

<p>Fortunately, Celluloid had all of the functionality
needed for background queues already built-in. While the
functionality was there, the usage syntax was a little
awkward given that it wasn&rsquo;t primary usage for the
framework.</p>

<p>I spent the next few days creating a DSL around the
Celluloid internals, thus making it feel more specific to
background queues.</p>

<p>Here is a typical job class:</p>

<figure class='code'><figcaption><span>Example sucker_punch job class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LogJob</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">SuckerPunch</span><span class="p">:</span><span class="ss">:Job</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># do some other stuff to</span>
</span><span class='line'>    <span class="c1"># record the event in the background</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">event</span><span class="si">}</span><span class="s2"> just happened&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I deployed the sucker_punch-converted code to production
and gave it a week or so before I declared it a success.
Once I realized sucker_punch was going to be a
maintainable method for processing background jobs in a
single web process, I added additional niceties like
logging and queue configuration details that may be
valuable for other use cases.</p>

<p>Have you tried sucker_punch yet? If so, I&rsquo;d love to know how it went and what you used it for&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Ways To Get Started Contributing To Open Source]]></title>
    <link href="http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source/"/>
    <updated>2013-10-15T16:30:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/3-ways-to-get-started-contributing-to-open-source</id>
    <content type="html"><![CDATA[<p>Towards the end of 2012, I began feeling like a had a good grip on the Ruby
language. As mentioned in a <a href="http://brandonhilkert.com/blog/the-technology-hump/">previous
post</a>, I felt confident enough in my skills that
I could make a positive contribution to the open source community.</p>

<p>I learned a lot by watching certain projects and getting involved with others
and hope that my notes are helpful for you and your endeavors.</p>

<h3>1. Fix a bug in an existing gem because it affects you</h3>

<p>My experience with <a href="http://brandonhilkert.com/about">Meeteor</a> and <a href="http://brandonhilkert.com/about">Spokely</a> caused me to move
FAST and break a lot of things along the way. Because of the pace, when I did
find a bug, I wasn&rsquo;t great at contributing code back to the source repository.
In many cases, my fixes were brute force <a href="http://en.wikipedia.org/wiki/Monkey_patch">monkey
patches</a> or something else that I
would probably be pretty embarassed about today.</p>

<!--more-->


<p>Some of the more extreme cases caused me to <a href="https://github.com/brandonhilkert/jquery-tokeninput">fork a
gem</a> and <a href="https://github.com/brandonhilkert/jquery-tokeninput/commits/master">commit
changes</a> to
my version of the repo and reference my version of them gem in the application.
Thinking back on this now, doing so probably did more harm than good. The
downside is that it creates yet another fork of the gem and it also suffers
from lack of future updates by the original author. Unless, of course, you&rsquo;re
diligent about merging in changes from master, but let&rsquo;s admit, this never
happens.</p>

<p>In hindsight, I should have spent the extra 30 minutes to write organized and
tested code in order to contribute back to the original project. If I
experienced the bug, it&rsquo;s likely that others would too, if they hadn&rsquo;t already.</p>

<p><em>Be sure to review the Github issues for other reports of the bug.
It&rsquo;s possible there may already be an open pull request, thus
saving you the effort of preparing the fix.</em></p>

<h3>2. Improve an existing gem to learn more about the subject</h3>

<p>It&rsquo;s best to head towards projects that you either have passion for or use
heavily.  If you&rsquo;re unsure of the level of effort required for an issue or
feature, ask the gem&rsquo;s author. Also, before you prepare that killer feature
that&rsquo;s going to take you 2 weeks to prepare, make sure it&rsquo;s known and approved
by the auther. It&rsquo;s a bummer to put in all that work only to learn that it&rsquo;s
not something the author is interested in adding and supporting. They&rsquo;ll likely
be happy for the extra help and point you in the right direction.</p>

<p>For me, this was <a href="http://sidekiq.org/">Sidekiq</a>. I had been a long time user of
<a href="https://github.com/collectiveidea/delayed_job">Delayed Job</a> and
<a href="https://github.com/resque/resque">Resque</a>. When I first tried Sidekiq, I was
dumbfounded at how much faster it was because of its multi-threading
capabilities. I was also really surprised how easy it was to get started.
Sidekiq&rsquo;s author, <a href="https://twitter.com/mperham">Mike Perham</a>, has done a great job at
keeping the API similar to that of Resque, thus minimizing the pain of
switching.</p>

<p>Often, a popular gem will have a list of pending features to be written for
upcoming versions. If you can&rsquo;t find this list documented in the source code,
again, ask the gem&rsquo;s contributors. They&rsquo;ll likely have thought through upcoming
features and can make recommendations on how to get started.</p>

<p>There&rsquo;s no better way to learn than reading code. Sidekiq uses
Celluloid to handle the concurrency and for me, concurrency was an
afterthought. I realized this and figured by contributing, it would force me to
better understand the fundamental patterns of concurrency in Ruby.</p>

<p>I can hear the next question&hellip;how can you contribute to a codebase you want to
learn about but know nothing about?  At the time, Sidekiq&rsquo;s Web UI wasn&rsquo;t
great. Web applications are what I&rsquo;m good at, so I took it as an opportunity to
improve the Sidekiq Web UI, while I became more familiar with Sidekiq&rsquo;s
internals. I spent a few weeks <a href="https://github.com/mperham/sidekiq/contributors">playing with graphs and improving Sidekiq&rsquo;s
internal API</a> and was able to
make the Web UI significantly better than it was before I started.</p>

<p>That was the start of my contribution to Sidekiq and since then have learned
quite a bit more about what makes the system tick. It&rsquo;s by no means a straight
forward gem and probably one I wouldn&rsquo;t urge you to cut your teeth on, but
certainly a challenge and very well maintained.</p>

<h3>3. Create a new gem by extracting code that you commonly use</h3>

<p>Greenfielding Rails apps is exciting. It starts out as <code>rails new
my-awesome-new-app</code>. You boot the server only to be greeted by the default
index page. The next steps are a series of copying and pasting from previous
applications or blog posts on the subject of configuring a Rails app. Whichever
<a href="http://words.steveklabnik.com/rails-has-two-default-stacks">stack</a> you prefer,
there&rsquo;s generally a number of changes/additions that need to be made to kickstart the productivity.</p>

<p>Rather than paste in the same old code to handle &ldquo;______&rdquo; (insert your
favoritie super important feature), what better than to simply include a gem
that does it all for you. And what better person to create this gem than YOU!</p>

<p>On a previous project, I found myself calling the same view helper methods over
and over again, so I pulled it out into a
<a href="https://github.com/brandonhilkert/so_meta">gem</a> so I didn&rsquo;t have to worry
about copying the code across projects. It&rsquo;s a trivial example, but one that
can save you a lot of time and headache.</p>

<p>The ease of creating a gem is both a blessing and a curse for the community.
Ruby advocates writing code in a way that&rsquo;s modular, which tends to make
extracting that code to a gem pretty easy when done correctly. With a little
<a href="https://www.google.com/search?q=how+to+make+a+ruby+gem&amp;oq=how+to+make+a+ruby+gem">Google&#8217;ing</a>,
you can pretty quickly extract a feature that&rsquo;s already written and have it up
on RubyGems for the world to consume in no time.</p>

<h3>In summary</h3>

<p>I spent a fair amount of time trying to plot my entrace in to the Open Source
community. <a href="http://github.com">Github</a> has made it tremendously easy to not
only collaborate, but scour other products in search of code that might be
interesting to both learn and contribute to.</p>

<p>For those that write Ruby, I would urge you to avoid starting by contributing
to gems like Rails or other large codebases. Despite having plenty of work to
do, they&rsquo;re often hard to navigate and have quite a few idosyncrasies due to
their long and complex histories. It&rsquo;s also hard to know whether other people
are working on the same issue you might think is relatively trivial. There&rsquo;s
not much worse than putting in a few hard hours on a bug, only to have a pull
request fixing the same buy show up a few minutes before.</p>

<p>Start with a smaller project and figure out the path that works best for you.
Everyone is different, but that&rsquo;s what makes you so valuable to the open source
community. Work on things you love and make open source software better than
when you started.</p>

<p>What will your next open source project be?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loyalty]]></title>
    <link href="http://brandonhilkert.com/blog/loyalty/"/>
    <updated>2013-09-30T08:34:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/loyalty</id>
    <content type="html"><![CDATA[<p>Last weekend, I finished an
<a href="http://www.tricolumbia.org/events/chesapeakeman-endurance-festival/">Ironman</a>.
The training consumed valuable time with both family and friends that I&rsquo;ll
never get back. However, the support and love that I received on the days
surrounding the race have given me an increased appreciation for the people
that are in my life and the unwavering support they offer.</p>

<p>Finishing the race was an incredible experience. The day of the race had its
share of extreme ups and downs, both of which I&rsquo;ve come to value now that it&rsquo;s
over. Since I no longer have to worry about waking up at 5 a.m. to get to gym,
I&rsquo;ve spent a fair amount of time replaying the past 30 weeks and the sacrifices
involved.</p>

<!--more-->


<p>The people pictured below were with me at every possible step of the race. They
spent almost 13 hours watching 154 people swim, bike and run 140.6 miles back
and forth through sunburn, darkness, and rain.</p>

<p><img class="center" src="http://brandonhilkert.com/images/ironman.jpg" title="&#34;My family at the Ironman&#34;" alt="&#34;My family at the Ironman&#34;"></p>

<p>I feel so tremendously lucky to have them in my life and I&rsquo;m pretty sure I
don&rsquo;t always make that apparent. I don&rsquo;t think they have any idea how much
having them there meant to me. The thought of them standing around the next
corner got me those small wins that kept me upright.</p>

<p>To me, the most telling part is that I didn&rsquo;t specifically ask any of them to
come. All of them were there because they wanted to be. And that, meant the
most.</p>

<p>I&rsquo;ve spent the last week thinking about what I could say or do to show my
appreciation. The best I could come up with is to simply say &ldquo;Thank You&rdquo;.</p>

<p>This is loyalty.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Technology Hump]]></title>
    <link href="http://brandonhilkert.com/blog/the-technology-hump/"/>
    <updated>2013-09-23T20:16:00-04:00</updated>
    <id>http://brandonhilkert.com/blog/the-technology-hump</id>
    <content type="html"><![CDATA[<p>For the past few years, I&rsquo;ve spent most of my waking moments either reading about or writing code. For me, it&rsquo;s about the constant pursuit of learning and getting better at my craft. In hindsight, I can say that that mentality has helped me have a leg up on the competition (for reasons I will detail in future posts).</p>

<h3>Rewind 4 years</h3>

<p>Four years ago I was writing PHP on the side for startups and just getting into software products as both a profession and hobby (more on this too&hellip;). I had reached a level of comfort with PHP where I knew I could solve just about any business problem thrown at me. This feeling was not only comforting, but empowering. Shortly after, I helped create <a href="http://brandonhilkert.com/about">Meeteor</a>, which was written in <a href="http://rubyonrails.org/">Rails</a> and my world took turn for the better.</p>

<!--more-->


<p>Not only was I thrown into a ring of unknown, but I was handed an application that was written by contractors overseas. I won&rsquo;t go in to my feelings about outsourcing here now, but suffice it to say, this experience was less than pleasant.</p>

<p>I spent the next 2-3 weeks learning both <a href="http://www.ruby-lang.org/">Ruby</a> and Rails and largely banging my head against the wall. For me, one of the most frustrating feelings is knowing how to do something in another language/framework, but can&rsquo;t in the one your currently working with. I felt like I was moving backwards, but stuck with it because it felt like the Rails knowledge would be a big pay off going forward.</p>

<p>The next 2 years that followed were largely a blur in what seemed like crash course in creating a product and a business. I&rsquo;m grateful for this experience and believe it has better positioned me for the things I want to accomplish going forward.</p>

<h3>Where I am today</h3>

<p>Today, I&rsquo;m back at that position I was 4 years ago with PHP, but now with Ruby. I&rsquo;m confident I can solve just about anything thrown at me with the tools that I&rsquo;m now most familiar with. Rather than entrench myself with Ruby and Rails books, I&rsquo;m finding articles about retention, conversion, and idea validation more interesting.</p>

<p>I&rsquo;m by no means suggesting that I&rsquo;ve solved every problem on the internet and development is a breeze. In fact, it&rsquo;s quite the opposite. But I now feel more confident in my ability to creativity solve a problem rather than find the answer hidden behind a random <a href="http://stackoverflow.com/">Stack Overflow</a> post. Don&rsquo;t get me wrong, I still encounter challenges I&rsquo;ve never seen before, but that&rsquo;s what not only brought me to development in the first place, but one of the reasons I continue to love what I do.</p>

<p>The technology world changes at a rapid pace. There&rsquo;s a certain amount of dedication involved in staying current on your craft if you want to continue being relevant. But I no longer feel the pressure to spend every waking moment with my head in a Ruby book. Seeing other languages and frameworks emerge (here&rsquo;s looking at you <a href="http://emberjs.com/">Ember.js</a>) is exciting, but takes me back to my experience 4 years ago and the pains involved at the beginning of a learning curve.</p>

<p>I&rsquo;m excited about what&rsquo;s to come now that the technology isn&rsquo;t the most challenging element on my plate.</p>

<p>Have you had similar experiences with a change in focus after becoming more technically capable?</p>
]]></content>
  </entry>
  
</feed>
